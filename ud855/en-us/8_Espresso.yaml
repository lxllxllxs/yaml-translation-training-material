id: 268703
key: f0084cc7-2cbc-4b8e-8644-375e8c927167
locale: en-us
version: 1.0.0
title: Espresso
semantic_type: Lesson
updated_at: 'Tue Jun 13 2017 16:17:20 GMT+0000 (UTC)'
is_public: true
image:
  url: 'https://d17h27t6h515a5.cloudfront.net/topher/2017/April/59025503_ud855-espresso/ud855-espresso.png'
  width: 932
  height: 924
video: null
summary: 'This lesson will teach you all about Espresso, Android''s testing framework that simplifies writing UI tests. We will cover testing basic Views, AdapterViews, Intents, and IdlingResources.'
lesson_type: Classroom
duration: 120
is_project_lesson: false
_concepts_ids:
  - 277608
  - 277609
  - 278755
  - 277615
  - 277616
  - 277622
  - 277624
  - 277625
  - 277627
  - 277630
  - 278723
  - 278724
  - 278725
  - 278726
  - 278727
  - 278728
  - 278729
  - 278730
  - 278731
  - 278732
  - 278733
  - 278734
_project_id: null
concepts:
  - id: 277608
    key: e4448227-af55-4883-ab88-e8ed717e2800
    locale: en-us
    version: 1.0.0
    title: Is that Espresso in My Tea?
    semantic_type: Concept
    updated_at: 'Fri Apr 14 2017 19:37:42 GMT+0000 (UTC)'
    is_public: true
    resources: null
    _atoms_ids:
      - 289123
    atoms:
      - id: 289123
        key: 76cc8216-c510-48c9-8bd5-3497146565db
        locale: en-us
        version: 1.0.0
        title: Is that Espresso in My Tea?
        semantic_type: VideoAtom
        updated_at: 'Wed Jun 28 2017 00:40:56 GMT+0000 (UTC)'
        is_public: true
        tags: []
        instructor_notes: ''
        resources: null
        video:
          id: '52515'
          youtube_id: ORmbNTo9XRY
          subtitles:
            - url: 'http://video.udacity-data.com.s3.amazonaws.com/topher/2017/March/58decd3c_1-is-that-espresso-in-my-tea-hs/subtitles/lang_en_vs1.srt'
              language_code: en
          transcodings:
            uri_480p_mp4: 'http://video.udacity-data.com.s3.amazonaws.com/topher/2017/March/58decd3c_1-is-that-espresso-in-my-tea-hs/1-is-that-espresso-in-my-tea-hs_480p.mp4'
            uri_480p_1000kbps_mp4: 'http://video.udacity-data.com.s3.amazonaws.com/topher/2017/March/58decd3c_1-is-that-espresso-in-my-tea-hs/1-is-that-espresso-in-my-tea-hs_480p_1000kbps.mp4'
            uri_480p_ogg: 'http://video.udacity-data.com.s3.amazonaws.com/topher/2017/March/58decd3c_1-is-that-espresso-in-my-tea-hs/1-is-that-espresso-in-my-tea-hs_480p.ogg'
            uri_720p_mp4: 'http://video.udacity-data.com.s3.amazonaws.com/topher/2017/March/58decd3c_1-is-that-espresso-in-my-tea-hs/1-is-that-espresso-in-my-tea-hs_720p.mp4'
            uri_hls: 'http://video.udacity-data.com.s3.amazonaws.com/topher/2017/March/58decd3c_1-is-that-espresso-in-my-tea-hs/hls/playlist.m3u8'
  - id: 277609
    key: 3aa91842-e7fb-4689-912a-5d8776e844ca
    locale: en-us
    version: 1.0.0
    title: 'Quiz: Welcome to the World of Testing'
    semantic_type: Concept
    updated_at: 'Tue Apr 25 2017 20:00:44 GMT+0000 (UTC)'
    is_public: true
    resources: null
    _atoms_ids:
      - 300432
      - 278778
    atoms:
      - id: 300432
        key: 3b6492ae-7643-42f5-897e-a13ba14118ed
        locale: en-us
        version: 1.0.0
        title: Welcome To The World Of Testing
        semantic_type: VideoAtom
        updated_at: 'Wed Jun 28 2017 00:40:50 GMT+0000 (UTC)'
        is_public: true
        tags: []
        instructor_notes: ''
        resources: null
        video:
          id: '54209'
          youtube_id: qLWvc56oKnY
          subtitles:
            - url: 'http://video.udacity-data.com.s3.amazonaws.com/topher/2017/April/58ffa8b7_02-welcome-to-the-world-of-testing-q/subtitles/lang_en_vs1.srt'
              language_code: en
          transcodings:
            uri_480p_mp4: 'http://video.udacity-data.com.s3.amazonaws.com/topher/2017/April/58ffa8b7_02-welcome-to-the-world-of-testing-q/02-welcome-to-the-world-of-testing-q_480p.mp4'
            uri_480p_1000kbps_mp4: 'http://video.udacity-data.com.s3.amazonaws.com/topher/2017/April/58ffa8b7_02-welcome-to-the-world-of-testing-q/02-welcome-to-the-world-of-testing-q_480p_1000kbps.mp4'
            uri_480p_ogg: 'http://video.udacity-data.com.s3.amazonaws.com/topher/2017/April/58ffa8b7_02-welcome-to-the-world-of-testing-q/02-welcome-to-the-world-of-testing-q_480p.ogg'
            uri_720p_mp4: 'http://video.udacity-data.com.s3.amazonaws.com/topher/2017/April/58ffa8b7_02-welcome-to-the-world-of-testing-q/02-welcome-to-the-world-of-testing-q_720p.mp4'
            uri_hls: 'http://video.udacity-data.com.s3.amazonaws.com/topher/2017/April/58ffa8b7_02-welcome-to-the-world-of-testing-q/hls/playlist.m3u8'
      - id: 278778
        key: c2c2235b-0d81-4c77-b728-a9e0cca05b53
        locale: en-us
        version: 1.0.0
        title: How would you explain the UI testing process?
        semantic_type: ValidatedQuizAtom
        updated_at: 'Tue May 09 2017 17:26:09 GMT+0000 (UTC)'
        is_public: true
        question:
          prompt: 'You are on a 2-person developer team for an online ticket seller. You just finished adding the order button, which opens up an order summary, and need your teammate to help manually test the UI. To help them understand exactly what to test and expect, write in SHORT, CONCISE steps what they need to do (e.g. "Step 1: Open app and find order button").'
          default_feedback: 'Take a look at the solution video to see one way of instructing our teammate about UI testing. '
          correct_feedback: 'Thanks for writing instructions for your teammate! Check out the solution video to see the instructions we wrote. '
          video_feedback: null
          matchers:
            - semantic_type: RegexMatcher
              is_correct: true
              expression: .*
              expression_description: Testing
              flags: ''
              incorrect_feedback: null
  - id: 278755
    key: d37b0c0b-0fbc-4fe6-9d69-d5f1415b318d
    locale: en-us
    version: 1.0.0
    title: Welcome to the World of Testing
    semantic_type: Concept
    updated_at: 'Tue Apr 25 2017 20:07:39 GMT+0000 (UTC)'
    is_public: true
    resources: null
    _atoms_ids:
      - 300435
    atoms:
      - id: 300435
        key: 3b062fe4-b620-4173-a6fe-41a6695e8f04
        locale: en-us
        version: 1.0.0
        title: Welcome To The World Of Testing
        semantic_type: VideoAtom
        updated_at: 'Wed Jun 28 2017 00:40:50 GMT+0000 (UTC)'
        is_public: true
        tags: []
        instructor_notes: ''
        resources: null
        video:
          id: '54220'
          youtube_id: 4ujK1F6OaOI
          subtitles:
            - url: 'http://video.udacity-data.com.s3.amazonaws.com/topher/2017/April/58ffaaba_03-welcome-to-the-world-of-testing-v2/subtitles/lang_en_vs1.srt'
              language_code: en
          transcodings:
            uri_480p_mp4: 'http://video.udacity-data.com.s3.amazonaws.com/topher/2017/April/58ffaaba_03-welcome-to-the-world-of-testing-v2/03-welcome-to-the-world-of-testing-v2_480p.mp4'
            uri_480p_1000kbps_mp4: 'http://video.udacity-data.com.s3.amazonaws.com/topher/2017/April/58ffaaba_03-welcome-to-the-world-of-testing-v2/03-welcome-to-the-world-of-testing-v2_480p_1000kbps.mp4'
            uri_480p_ogg: 'http://video.udacity-data.com.s3.amazonaws.com/topher/2017/April/58ffaaba_03-welcome-to-the-world-of-testing-v2/03-welcome-to-the-world-of-testing-v2_480p.ogg'
            uri_720p_mp4: 'http://video.udacity-data.com.s3.amazonaws.com/topher/2017/April/58ffaaba_03-welcome-to-the-world-of-testing-v2/03-welcome-to-the-world-of-testing-v2_720p.mp4'
            uri_hls: 'http://video.udacity-data.com.s3.amazonaws.com/topher/2017/April/58ffaaba_03-welcome-to-the-world-of-testing-v2/hls/playlist.m3u8'
  - id: 277615
    key: 92760ae0-e9bb-45be-a83e-fb2f04105c4a
    locale: en-us
    version: 1.0.0
    title: 'Quiz: TeaTime Starting Code Walkthrough'
    semantic_type: Concept
    updated_at: 'Fri Apr 14 2017 19:38:31 GMT+0000 (UTC)'
    is_public: true
    resources: null
    _atoms_ids:
      - 278781
      - 278783
      - 278785
      - 278786
      - 278787
      - 278788
      - 278790
      - 278794
      - 278795
      - 278797
      - 278798
      - 278799
    atoms:
      - id: 278781
        key: 3241e062-a253-41ce-afae-30ccb002c044
        locale: en-us
        version: 1.0.0
        title: null
        semantic_type: TextAtom
        updated_at: 'Fri Jun 16 2017 18:22:32 GMT+0000 (UTC)'
        is_public: true
        text: |+
          # TeaTime Code

          The code for this app can be found in the [TeaTime Repository](https://github.com/udacity/AdvancedAndroid_TeaTime). Download the repository using this command:

          ```bash
          git clone https://github.com/udacity/AdvancedAndroid_TeaTime.git
          ```

          If you need a refresher on how the code is organized, please refer to the [TeaTime README](https://github.com/udacity/AdvancedAndroid_TeaTime) for a detailed explanation.

          ### Exercise Code
          **Exercise:** [TESP.00-StartingCode](https://github.com/udacity/AdvancedAndroid_TeaTime/tree/TESP.00-StartingCode)

          ---

          ## Explanation of TeaTime
          Throughout this lesson we’ll be using Espresso on the TeaTime app. I’ve coded up the basic functionality, and before we build it out any further, I’d like your help in testing various UI components. We want to develop with testing in mind so that we can catch potential bugs early on. 

          In the project, under *app/main/java/com/example/android/teatime* you’ll find these java files: 

          #### MenuActivity.java

        instructor_notes: ''
        resources: null
      - id: 278783
        key: 080058b7-1ec7-4e23-b28b-a60bbc7b1249
        locale: en-us
        version: 1.0.0
        title: null
        semantic_type: ImageAtom
        updated_at: 'Tue Mar 07 2017 21:54:42 GMT+0000 (UTC)'
        is_public: true
        url: 'https://d17h27t6h515a5.cloudfront.net/topher/2017/March/58bf299a_teatime-menuactivity/teatime-menuactivity.png'
        width: 1080
        height: 1920
        caption: ''
        resources: null
        instructor_notes: null
      - id: 278785
        key: 5dcaa4cc-3402-4832-a446-36ac04b9980c
        locale: en-us
        version: 1.0.0
        title: null
        semantic_type: TextAtom
        updated_at: 'Tue Mar 07 2017 22:12:01 GMT+0000 (UTC)'
        is_public: true
        text: |-
          This is the initial screen of the app. Users can select from a gridview of possible tea options.

          #### OrderActivity.java
        instructor_notes: ''
        resources: null
      - id: 278786
        key: 32c61739-0f85-439d-9cef-9df7994e5480
        locale: en-us
        version: 1.0.0
        title: null
        semantic_type: ImageAtom
        updated_at: 'Tue Mar 07 2017 21:48:05 GMT+0000 (UTC)'
        is_public: true
        url: 'https://d17h27t6h515a5.cloudfront.net/topher/2017/March/58bf2a8f_teatime-menuactivity-03072017134707/teatime-menuactivity-03072017134707.png'
        width: 1080
        height: 1920
        caption: ''
        resources: null
        instructor_notes: null
      - id: 278787
        key: d35dae3b-4788-4f1e-ac4e-d6d66cc01ba5
        locale: en-us
        version: 1.0.0
        title: null
        semantic_type: TextAtom
        updated_at: 'Tue May 09 2017 17:45:42 GMT+0000 (UTC)'
        is_public: true
        text: |-
          After the user selects a tea from MenuActivity, they are taken to an OrderActivity where they can customize the tea they have selected. There are 3 spinner setups (for size, milk, and sugar). The user can also change the quantity. The total price is updated according to the size selected and the quantity.

          #### OrderSummaryActivity.java
        instructor_notes: ''
        resources: null
      - id: 278788
        key: f2b4a612-513f-4c2e-8258-377d36dd8515
        locale: en-us
        version: 1.0.0
        title: null
        semantic_type: ImageAtom
        updated_at: 'Tue Mar 07 2017 21:50:37 GMT+0000 (UTC)'
        is_public: true
        url: 'https://d17h27t6h515a5.cloudfront.net/topher/2017/March/58bf2b16_teatime-menuactivity-03072017134916/teatime-menuactivity-03072017134916.png'
        width: 1080
        height: 1920
        caption: ''
        resources: null
        instructor_notes: null
      - id: 278790
        key: 78be1f72-6e78-454c-815e-1c80519fc88f
        locale: en-us
        version: 1.0.0
        title: null
        semantic_type: TextAtom
        updated_at: 'Tue May 09 2017 18:35:03 GMT+0000 (UTC)'
        is_public: true
        text: |
          Once the user hits the “Brew Tea” button in OrderActivity they are taken to the OrderSummaryActivity which displays details about the order just placed. On this screen the user also has the option to share and let their friends know that they are using this cool new app via an email intent.

          #### TeaMenuAdapter.java
          The TeaMenuAdapter is backed by an ArrayList of Tea objects which populate the GridView in MenuActivity.

          Under *app/main/java/com/example/android/teatime/model/* you'll find these files:

          #### Tea.java
          This class represents a tea that the user can select from the menu. It contains a tea name and an associated image.

          In *app/src/**androidTest/java**/com/example/android/teatime* you'll find instrumented test files:

          #### Instrumented Test

          This lesson will focus on **User Interface (UI) Tests** which are a type of **Instrumented Tests**. Instrumented Tests need to be run on a physical device or emulator. There are a number of other types of tests available which we will explore later in this lesson. 
          Instrumented Tests are always located under *module-name/src/androidTest/java/*
        instructor_notes: ''
        resources: null
      - id: 278794
        key: 1b40e2d0-5b2b-40da-9a5b-e40fe1737c37
        locale: en-us
        version: 1.0.0
        title: null
        semantic_type: ImageAtom
        updated_at: 'Tue Mar 07 2017 22:11:33 GMT+0000 (UTC)'
        is_public: true
        url: 'https://d17h27t6h515a5.cloudfront.net/topher/2017/March/58bf2db1_screen-shot-2017-03-07-at-2.01.08-pm/screen-shot-2017-03-07-at-2.01.08-pm.png'
        width: 806
        height: 298
        caption: Instrumented Tests are always found in the androidTest/java folder
        resources: null
        instructor_notes: null
      - id: 278795
        key: 5ccfde0f-daf9-4833-977f-c22df3142c16
        locale: en-us
        version: 1.0.0
        title: null
        semantic_type: TextAtom
        updated_at: 'Tue Mar 07 2017 22:06:02 GMT+0000 (UTC)'
        is_public: true
        text: |-
          You’ll notice that this app contains Views, AdapterViews, and Intents and this is no coincidence. 
          Espresso is helpful for testing:
          * Views
          * AdapterViews
          * Intents
          * Idling Resources

          The last component, Idling Resource, is a new term. Idling Resources are used when testing any asynchronous code, for example long-running database operations that are off the main thread. We will cover testing this in-depth later in the lesson. 
        instructor_notes: ''
        resources: null
      - id: 278797
        key: 6a5a5f57-bf83-4296-9152-b32852d9eb5f
        locale: en-us
        version: 1.0.0
        title: What is the name of the Instrumented Test?
        semantic_type: RadioQuizAtom
        updated_at: 'Tue Mar 07 2017 22:11:20 GMT+0000 (UTC)'
        is_public: true
        question:
          prompt: What is the name of the Instrumented Test?
          correct_feedback: |-
            Instrumented Tests need to be run on a physical device or emulator. 

            We will explore other types of tests such as Unit Tests that run on the Java Virtual Machine of the PC. Don't worry about these details yet. We'll explore it later in this lesson. 
          video_feedback: null
          default_feedback: 'Consider what specific folder Instrumented Tests are always found in. '
          answers:
            - id: a1488924375773
              text: TeaTimeInstrumentedTest
              is_correct: false
              incorrect_feedback: null
            - id: a1488924406330
              text: ExampleInstrumentedTest
              is_correct: true
              incorrect_feedback: null
            - id: a1488924415744
              text: ExampleUnitTest
              is_correct: false
              incorrect_feedback: null
            - id: a1488924420900
              text: There is none yet
              is_correct: false
              incorrect_feedback: null
      - id: 278798
        key: 60ab26dd-6d13-49e7-b470-ce58b4e58f3c
        locale: en-us
        version: 1.0.0
        title: ''
        semantic_type: RadioQuizAtom
        updated_at: 'Tue May 09 2017 17:01:51 GMT+0000 (UTC)'
        is_public: true
        question:
          prompt: The TeaMenuAdapter is used to populate what type of View in the MenuActivity?
          correct_feedback: 'The TeaMenuAdapter is backed by an array populated with tea images and names. '
          video_feedback: null
          default_feedback: 'Review the MenuActivity code and screenshot above to see what type of View is used. '
          answers:
            - id: a1488924727979
              text: RecyclerView
              is_correct: false
              incorrect_feedback: null
            - id: a1488924750229
              text: ListView
              is_correct: false
              incorrect_feedback: null
            - id: a1488924753761
              text: GridView
              is_correct: true
              incorrect_feedback: null
      - id: 278799
        key: 503b4f9f-3719-41b8-bd6e-297f3ed19b77
        locale: en-us
        version: 1.0.0
        title: ''
        semantic_type: RadioQuizAtom
        updated_at: 'Tue Mar 07 2017 22:19:19 GMT+0000 (UTC)'
        is_public: true
        question:
          prompt: How many compile dependencies currently exist in app level build.gradle?
          correct_feedback: 'These compile dependencies are required to compile the production source of the project. Later we will explore other types of dependencies used for testing. '
          video_feedback: null
          default_feedback: 'Make sure you are checking the correct build.gradle file. '
          answers:
            - id: a1488924863513
              text: '0'
              is_correct: false
              incorrect_feedback: null
            - id: a1488924874457
              text: '1'
              is_correct: false
              incorrect_feedback: null
            - id: a1488924876487
              text: '3'
              is_correct: true
              incorrect_feedback: null
            - id: a1488924878492
              text: '4'
              is_correct: false
              incorrect_feedback: null
  - id: 277616
    key: 6d342245-9742-45c0-b758-6c0072e87e55
    locale: en-us
    version: 1.0.0
    title: 'Exercise: Write a Basic Espresso Test'
    semantic_type: Concept
    updated_at: 'Fri Apr 14 2017 19:38:38 GMT+0000 (UTC)'
    is_public: true
    resources: null
    _atoms_ids:
      - 289126
      - 291719
      - 278804
    atoms:
      - id: 289126
        key: 51960eb5-7d74-4b02-80c9-ce7e3a2f7462
        locale: en-us
        version: 1.0.0
        title: 'Exercise: Write a Basic Espresso Test'
        semantic_type: VideoAtom
        updated_at: 'Wed Jun 28 2017 00:27:56 GMT+0000 (UTC)'
        is_public: true
        tags: []
        instructor_notes: ''
        resources: null
        video:
          id: '52516'
          youtube_id: XhDRYv0wWF8
          subtitles:
            - url: 'http://video.udacity-data.com.s3.amazonaws.com/topher/2017/March/58decd57_05-write-a-basic-espresso-test-hs-sc-1/subtitles/lang_en_vs1.srt'
              language_code: en
          transcodings:
            uri_480p_mp4: 'http://video.udacity-data.com.s3.amazonaws.com/topher/2017/March/58decd57_05-write-a-basic-espresso-test-hs-sc-1/05-write-a-basic-espresso-test-hs-sc-1_480p.mp4'
            uri_480p_1000kbps_mp4: 'http://video.udacity-data.com.s3.amazonaws.com/topher/2017/March/58decd57_05-write-a-basic-espresso-test-hs-sc-1/05-write-a-basic-espresso-test-hs-sc-1_480p_1000kbps.mp4'
            uri_480p_ogg: 'http://video.udacity-data.com.s3.amazonaws.com/topher/2017/March/58decd57_05-write-a-basic-espresso-test-hs-sc-1/05-write-a-basic-espresso-test-hs-sc-1_480p.ogg'
            uri_720p_mp4: 'http://video.udacity-data.com.s3.amazonaws.com/topher/2017/March/58decd57_05-write-a-basic-espresso-test-hs-sc-1/05-write-a-basic-espresso-test-hs-sc-1_720p.mp4'
            uri_hls: 'http://video.udacity-data.com.s3.amazonaws.com/topher/2017/March/58decd57_05-write-a-basic-espresso-test-hs-sc-1/hls/playlist.m3u8'
      - id: 291719
        key: ac688a2a-521b-403c-8272-789ff39f80f0
        locale: en-us
        version: 1.0.0
        title: null
        semantic_type: TextAtom
        updated_at: 'Tue May 09 2017 21:24:21 GMT+0000 (UTC)'
        is_public: true
        text: |-
          # Write a Basic Espresso Test

          It's time to write your first Espresso test in TeaTime. We'll start by adding an `OrderActivityBasicTest` which will demo a user clicking on the decrement button. The test will verify that this action properly decreases the quantity and the total cost. 

          Remember to follow the 3 General steps of Espresso View Testing: 
          1. Find the view
          2. Perform action on the view
          3. Check if the view does what you expected

          Also, remember Google’s handy [Espresso Cheat Sheet](https://google.github.io/android-testing-support-library/docs/espresso/cheatsheet/) for possible Matchers, Actions, and Assertions. 

          ### Exercise Code
          **Exercise:** [TESP.01-Exercise-FinishOrderActivityBasicTest](https://github.com/udacity/AdvancedAndroid_TeaTime/tree/TESP.01-Exercise-FinishOrderActivityBasicTest)
        instructor_notes: ''
        resources: null
      - id: 278804
        key: fb431a29-c116-4aaa-a17a-6988b30f43dc
        locale: en-us
        version: 1.0.0
        title: ''
        semantic_type: TaskListAtom
        updated_at: 'Wed Apr 26 2017 05:39:57 GMT+0000 (UTC)'
        is_public: true
        tasks:
          - Add test runner annotation
          - Add rule for single activity testing
          - Complete test to check decrement functionality
          - Add Espresso gradle dependencies
        positive_feedback: |-
          *High five!* First Espresso test done :)

          **Solution:** [[TESP.01-Solution-FinishOrderActivityBasicTest](https://github.com/udacity/AdvancedAndroid_TeaTime/tree/TESP.01-Solution-FinishOrderActivityBasicTest)][[Diff](https://github.com/udacity/AdvancedAndroid_TeaTime/compare/TESP.01-Exercise-FinishOrderActivityBasicTest...TESP.01-Solution-FinishOrderActivityBasicTest?expand=1)]
        video_feedback: null
        description: ''
  - id: 277622
    key: ad932c9c-ca16-4319-a6fa-9e0f29372a14
    locale: en-us
    version: 1.0.0
    title: 'Exercise: Test AdapterViews with Espresso'
    semantic_type: Concept
    updated_at: 'Mon Apr 17 2017 21:53:08 GMT+0000 (UTC)'
    is_public: true
    resources: null
    _atoms_ids:
      - 278853
      - 298297
      - 298301
      - 298310
      - 298312
      - 298316
      - 298319
      - 298322
      - 298326
      - 298329
      - 298331
      - 278855
    atoms:
      - id: 278853
        key: a5d03ad4-3e9d-470e-a98f-658888288625
        locale: en-us
        version: 1.0.0
        title: null
        semantic_type: TextAtom
        updated_at: 'Tue May 09 2017 21:23:47 GMT+0000 (UTC)'
        is_public: true
        text: |-
          # Test AdapterViews with Espresso

          In this exercise you'll finish building the `MenuActivityScreenTest`, which demos a user clicking on a `GridView` item in `MenuActivity`, and opens up the corresponding `OrderActivity`. 

          ### Exercise Code
          **Exercise:** [TESP.02-Exercise-AddMenuActivityScreenTest](https://github.com/udacity/AdvancedAndroid_TeaTime/tree/TESP.02-Exercise-AddMenuActivityScreenTest)

          ___
        instructor_notes: ''
        resources: null
      - id: 298297
        key: 333270bf-2870-4db8-aa8a-7219f5730c6a
        locale: en-us
        version: 1.0.0
        title: null
        semantic_type: ImageAtom
        updated_at: 'Mon Apr 17 2017 21:28:03 GMT+0000 (UTC)'
        is_public: true
        url: 'https://d17h27t6h515a5.cloudfront.net/topher/2017/April/58f532ff_screen-shot-2017-04-17-at-2.26.12-pm/screen-shot-2017-04-17-at-2.26.12-pm.png'
        width: 870
        height: 576
        caption: AdapterViews include ListViews and GridViews
        resources: null
        instructor_notes: null
      - id: 298301
        key: 0b3355b2-da0e-41bc-806c-8bea16857ebe
        locale: en-us
        version: 1.0.0
        title: null
        semantic_type: TextAtom
        updated_at: 'Tue May 09 2017 18:47:30 GMT+0000 (UTC)'
        is_public: true
        text: |-
          While `onView()` can handle most Views in our UI, Espresso does require a different method call when dealing with AdapterView widgets. Since AdapterViews such as *ListView* and *GridView* load data dynamically from an Adapter, only a subset of the contents may be loaded in the current view hierarchy at a time. This means that `onView()` may not be able to find the necessary view. 

          To handle this we need to use `onData()`  which loads the adapter item we are interested in onto the screen before operating on it. 
        instructor_notes: ''
        resources: null
      - id: 298310
        key: 2e879ce5-0fe7-407e-bb08-985901f0c6ed
        locale: en-us
        version: 1.0.0
        title: null
        semantic_type: ImageAtom
        updated_at: 'Mon Apr 17 2017 21:36:07 GMT+0000 (UTC)'
        is_public: true
        url: 'https://d17h27t6h515a5.cloudfront.net/topher/2017/April/58f53542_screen-shot-2017-04-17-at-2.35.26-pm/screen-shot-2017-04-17-at-2.35.26-pm.png'
        width: 956
        height: 738
        caption: ''
        resources: null
        instructor_notes: null
      - id: 298312
        key: 26b31788-d214-49c9-b1ea-73dd19ee1df6
        locale: en-us
        version: 1.0.0
        title: null
        semantic_type: TextAtom
        updated_at: 'Tue May 09 2017 18:48:45 GMT+0000 (UTC)'
        is_public: true
        text: 'To help us further specify the item in the AdapterView we’re interested in, we can use a *DataOption* method such as `inAdapterView()` or `atPosition()`. These methods are highlighted in the cheat sheet below. '
        instructor_notes: ''
        resources: null
      - id: 298316
        key: b0efeecb-7736-4753-8b56-03853a56df84
        locale: en-us
        version: 1.0.0
        title: null
        semantic_type: ImageAtom
        updated_at: 'Mon Apr 17 2017 21:40:30 GMT+0000 (UTC)'
        is_public: true
        url: 'https://d17h27t6h515a5.cloudfront.net/topher/2017/April/58f53648_screen-shot-2017-04-17-at-2.40.12-pm/screen-shot-2017-04-17-at-2.40.12-pm.png'
        width: 1432
        height: 780
        caption: ''
        resources: null
        instructor_notes: null
      - id: 298319
        key: 28f523b2-524f-42f0-b9be-58a99c1efd19
        locale: en-us
        version: 1.0.0
        title: null
        semantic_type: TextAtom
        updated_at: 'Tue May 09 2017 17:11:12 GMT+0000 (UTC)'
        is_public: true
        text: |-
          After that, we *perform* an action and then *check* that we get the desired result on the view that we’re interested in. 

          Notice that how we test Views in AdapterViews is very similar to how we test single Views - *matching, acting, and asserting*. 
        instructor_notes: ''
        resources: null
      - id: 298322
        key: 89295f83-06b9-47a8-9b99-eccfa0ebf83c
        locale: en-us
        version: 1.0.0
        title: null
        semantic_type: ImageAtom
        updated_at: 'Mon Apr 17 2017 21:42:58 GMT+0000 (UTC)'
        is_public: true
        url: 'https://d17h27t6h515a5.cloudfront.net/topher/2017/April/58f536dd_screen-shot-2017-04-17-at-2.42.41-pm/screen-shot-2017-04-17-at-2.42.41-pm.png'
        width: 1450
        height: 728
        caption: ''
        resources: null
        instructor_notes: null
      - id: 298326
        key: 7e17dd3d-850f-4888-971a-283b7f7f237c
        locale: en-us
        version: 1.0.0
        title: null
        semantic_type: TextAtom
        updated_at: 'Mon Apr 17 2017 21:46:17 GMT+0000 (UTC)'
        is_public: true
        text: |-
          As you may have guessed, the perfect place to try this out is in the GridView of MenuActivity of TeaTime!

          One test I’d like to run is clicking on a gridView tea item and checking that it opens up the corresponding tea OrderActivity. 
        instructor_notes: ''
        resources: null
      - id: 298329
        key: ab275577-2b17-4f5b-8fb2-72e1157c3f7e
        locale: en-us
        version: 1.0.0
        title: null
        semantic_type: ImageAtom
        updated_at: 'Mon Apr 17 2017 21:46:55 GMT+0000 (UTC)'
        is_public: true
        url: 'https://d17h27t6h515a5.cloudfront.net/topher/2017/April/58f537c9_screen-shot-2017-04-17-at-2.46.09-pm/screen-shot-2017-04-17-at-2.46.09-pm.png'
        width: 1016
        height: 714
        caption: ''
        resources: null
        instructor_notes: null
      - id: 298331
        key: d8a0978f-d22d-4ed7-b5b8-98df14208ed0
        locale: en-us
        version: 1.0.0
        title: null
        semantic_type: TextAtom
        updated_at: 'Tue May 09 2017 18:54:31 GMT+0000 (UTC)'
        is_public: true
        text: |
          For this exercise, start by downloading the code from [TESP.02-Exercise-AddMenuActivityScreenTest](https://github.com/udacity/AdvancedAndroid_TeaTime/tree/TESP.02-Exercise-AddMenuActivityScreenTest).

          You’ll see that I’ve added the skeleton of MenuActivityScreenTest.java and some TODOs. 

          This time I’ll give you fewer hints, since I want to you to explore how to perform a click action on a gridView item by yourself. Then you’ll check that it opened up the correct OrderActivity by verifying the tea name text view. 

          Check out the resources below if you need a hint about which methods to use in order to specify specific AdapterView items.

          ### Resources
          - Check out the Data Options section of the [Espresso Cheat Sheet](https://google.github.io/android-testing-support-library/docs/espresso/cheatsheet/)
          - See the description of the data option methods in the [DataInteraction documentation](https://developer.android.com/reference/android/support/test/espresso/DataInteraction.html)
        instructor_notes: ''
        resources: null
      - id: 278855
        key: b7591b34-a9f2-405c-beb5-834342989043
        locale: en-us
        version: 1.0.0
        title: ''
        semantic_type: TaskListAtom
        updated_at: 'Tue May 09 2017 18:56:06 GMT+0000 (UTC)'
        is_public: true
        tasks:
          - Add the test runner annotation
          - Add the rule to test a single activity
          - Finish the test that will click on a gridView item and verify that the OrderActivity opens up with the correct tea name
        positive_feedback: |-
          Nice work! We've covered 2 types of Espresso tests so far. Stay tuned for more.

          **Solution:** [[ESP.02-Solution-AddMenuActivityScreenTest](https://github.com/udacity/AdvancedAndroid_TeaTime/tree/TESP.02-Solution-AddMenuActivityScreenTest)][[Diff](https://github.com/udacity/AdvancedAndroid_TeaTime/compare/TESP.02-Exercise-AddMenuActivityScreenTest...TESP.02-Solution-AddMenuActivityScreenTest?expand=1)]
        video_feedback: null
        description: Follow the TODOs to complete this exercise.
  - id: 277624
    key: a5259737-1e94-4b53-9fbf-3c79101436c6
    locale: en-us
    version: 1.0.0
    title: Test Intents with Espresso
    semantic_type: Concept
    updated_at: 'Tue Apr 25 2017 20:01:35 GMT+0000 (UTC)'
    is_public: true
    resources: null
    _atoms_ids:
      - 300433
    atoms:
      - id: 300433
        key: a58fb237-dba1-4e0b-95c7-257956ed464e
        locale: en-us
        version: 1.0.0
        title: Test Intents With Espresso
        semantic_type: VideoAtom
        updated_at: 'Wed Jun 28 2017 00:40:50 GMT+0000 (UTC)'
        is_public: true
        tags: []
        instructor_notes: ''
        resources: null
        video:
          id: '54211'
          youtube_id: XasgA5xq5Mo
          subtitles:
            - url: 'http://video.udacity-data.com.s3.amazonaws.com/topher/2017/April/58ffa8c8_10-test-intents-with-espresso/subtitles/lang_en_vs1.srt'
              language_code: en
          transcodings:
            uri_480p_mp4: 'http://video.udacity-data.com.s3.amazonaws.com/topher/2017/April/58ffa8c8_10-test-intents-with-espresso/10-test-intents-with-espresso_480p.mp4'
            uri_480p_1000kbps_mp4: 'http://video.udacity-data.com.s3.amazonaws.com/topher/2017/April/58ffa8c8_10-test-intents-with-espresso/10-test-intents-with-espresso_480p_1000kbps.mp4'
            uri_480p_ogg: 'http://video.udacity-data.com.s3.amazonaws.com/topher/2017/April/58ffa8c8_10-test-intents-with-espresso/10-test-intents-with-espresso_480p.ogg'
            uri_720p_mp4: 'http://video.udacity-data.com.s3.amazonaws.com/topher/2017/April/58ffa8c8_10-test-intents-with-espresso/10-test-intents-with-espresso_720p.mp4'
            uri_hls: 'http://video.udacity-data.com.s3.amazonaws.com/topher/2017/April/58ffa8c8_10-test-intents-with-espresso/hls/playlist.m3u8'
  - id: 277625
    key: 75ca4757-dd41-4300-b563-0c5af4610b91
    locale: en-us
    version: 1.0.0
    title: Intent Stubbing vs. Intent Verification
    semantic_type: Concept
    updated_at: 'Fri Apr 14 2017 21:55:19 GMT+0000 (UTC)'
    is_public: true
    resources: null
    _atoms_ids:
      - 278922
    atoms:
      - id: 278922
        key: c75bc179-7d4f-467a-a32c-85d2e3033d55
        locale: en-us
        version: 1.0.0
        title: Intent Stubbing vs. Intent Verification
        semantic_type: MatchingQuizAtom
        updated_at: 'Tue May 09 2017 19:00:08 GMT+0000 (UTC)'
        is_public: true
        question:
          complex_prompt:
            text: 'To solidify the two concepts - Intent Stubbing and Intent Verification - and how we can implement them, complete the following drag and drop quiz. Match the correct characteristic to the associated type of Intent Testing. '
          default_feedback: null
          correct_feedback: Good work! Intent Stubbing is for testing intent RESPONSES and Intent Verification is for testing what's SENT.
          video_feedback: null
          concepts_label: Type of Intent Action
          answers_label: Characteristic
          concepts:
            - text: Intent Stubbing Code
              default_concept_feedback: null
              correct_answer:
                id: a1489014246046
                text: '*intending(Matcher<Intent> matcher)*'
              incorrect_feedbacks: []
            - text: Intent Stubbing Description
              default_concept_feedback: null
              correct_answer:
                id: a1489014363381
                text: Using a small piece of code as a fake response to an intent call during a test. The benefit of this is that it gives us consistent results and allows us to test one action at a time
              incorrect_feedbacks: []
            - text: Intent Verification Code
              default_concept_feedback: null
              correct_answer:
                id: a1489014667320
                text: '*intended(Matcher<Intent> matcher, VerificationMode verification)*'
              incorrect_feedbacks: []
            - text: Intent Verification Description
              default_concept_feedback: null
              correct_answer:
                id: a1489014677837
                text: Using a hardcoded matcher to verify that the information we intended to send in an intent is what was sent
              incorrect_feedbacks: []
          answers:
            - id: a1489014363381
              text: Using a small piece of code as a fake response to an intent call during a test. The benefit of this is that it gives us consistent results and allows us to test one action at a time
            - id: a1489014667320
              text: '*intended(Matcher<Intent> matcher, VerificationMode verification)*'
            - id: a1489014677837
              text: Using a hardcoded matcher to verify that the information we intended to send in an intent is what was sent
            - id: a1489014246046
              text: '*intending(Matcher<Intent> matcher)*'
  - id: 277627
    key: f0c53eb6-722d-4558-b317-d4205dc7822d
    locale: en-us
    version: 1.0.0
    title: Intent Stubbing Code Example
    semantic_type: Concept
    updated_at: 'Fri Apr 14 2017 19:39:42 GMT+0000 (UTC)'
    is_public: true
    resources: null
    _atoms_ids:
      - 278928
      - 278929
      - 278931
      - 278932
      - 278939
      - 278940
      - 278946
      - 278947
      - 278954
      - 278956
      - 278959
    atoms:
      - id: 278928
        key: e59a387b-e6af-4716-b8ee-33904bed9cd0
        locale: en-us
        version: 1.0.0
        title: null
        semantic_type: TextAtom
        updated_at: 'Tue May 09 2017 21:19:59 GMT+0000 (UTC)'
        is_public: true
        text: |+
          # Intent Stubbing Code Example

          Let's see an example of Intent Stubbing in practice. Navigate to the [IntentBasicSample code](https://github.com/googlesamples/android-testing/tree/master/ui/espresso/IntentsBasicSample) created by the Google team.  

          ## Analyze DialerActivity
          This project contains a [DialerActivity](https://github.com/googlesamples/android-testing/blob/master/ui/espresso/IntentsBasicSample/app/src/main/java/com/example/android/testing/espresso/BasicSample/DialerActivity.java) where users can enter a phone number.

          When the "Call Number" is pressed, the inputted number is sent to the native Android app using an `ACTION_CALL` Intent.
          There is also a "Pick Number" button which starts a dummy `ContactsActivity` that will be used to demonstrate Intent Stubbing. 


        instructor_notes: ''
        resources: null
      - id: 278929
        key: 0733488e-6019-4454-b1cc-9ccc23a70fef
        locale: en-us
        version: 1.0.0
        title: null
        semantic_type: ImageAtom
        updated_at: 'Thu Mar 09 2017 00:34:56 GMT+0000 (UTC)'
        is_public: true
        url: 'https://d17h27t6h515a5.cloudfront.net/topher/2017/March/58c0a31b_basicsample-dialeractivity-03082017162610/basicsample-dialeractivity-03082017162610.png'
        width: 1080
        height: 1920
        caption: DialerActivity screen
        resources: null
        instructor_notes: null
      - id: 278931
        key: eaf58843-b642-48fb-af21-1fa6400fd4b3
        locale: en-us
        version: 1.0.0
        title: null
        semantic_type: TextAtom
        updated_at: 'Tue May 09 2017 21:20:50 GMT+0000 (UTC)'
        is_public: true
        text: |-
          ## Analyze DialerActivityTest
          The project also contains a [DialerActivityTest](https://github.com/googlesamples/android-testing/blob/master/ui/espresso/IntentsBasicSample/app/src/androidTest/java/com/example/android/testing/espresso/BasicSample/DialerActivityTest.java) file. 

          Let's break this test down.

          ### `@RunWith`

          This test runs with `AndroidJUnit4` which we've seen before:
          ```java
          @RunWith(AndroidJUnit4.class)
          ```

          ### `@Rule` 
          Instead of the `ActivityTestRule` that we've seen before, this test uses the  [IntentsTestRule](https://developer.android.com/reference/android/support/test/espresso/intent/rule/IntentsTestRule.html). This rule is an extension of the `ActivityTestRule`, which initializes Intents before each Espresso test (`@Test`) is run and releases the Intent after each test is run. The associated activity is terminated after each test. 
        instructor_notes: ''
        resources: null
      - id: 278932
        key: 848977a0-4d62-43d9-981c-f4111f271fb3
        locale: en-us
        version: 1.0.0
        title: null
        semantic_type: ImageAtom
        updated_at: 'Thu Mar 09 2017 00:49:07 GMT+0000 (UTC)'
        is_public: true
        url: 'https://d17h27t6h515a5.cloudfront.net/topher/2017/March/58c0a67e_screen-shot-2017-03-08-at-4.48.49-pm/screen-shot-2017-03-08-at-4.48.49-pm.png'
        width: 1160
        height: 136
        caption: ''
        resources: null
        instructor_notes: null
      - id: 278939
        key: 0a3ffc96-f07e-412d-b76e-a9272d7af05b
        locale: en-us
        version: 1.0.0
        title: null
        semantic_type: TextAtom
        updated_at: 'Tue May 09 2017 21:21:23 GMT+0000 (UTC)'
        is_public: true
        text: |
          ### `@Before` - `stubAllExternalIntents()`
          As mentioned in the comment in the code snippet below, by default Espresso Intent does not stub any Intents; instead, stubbing must be set up each time a test is run. The method `stubAllExternalIntents()` makes sure all external Intents are blocked. 
        instructor_notes: ''
        resources: null
      - id: 278940
        key: ed5bc412-15ae-457d-9a75-2a7f76572f77
        locale: en-us
        version: 1.0.0
        title: null
        semantic_type: ImageAtom
        updated_at: 'Thu Mar 09 2017 01:01:35 GMT+0000 (UTC)'
        is_public: true
        url: 'https://d17h27t6h515a5.cloudfront.net/topher/2017/March/58c0a96b_screen-shot-2017-03-08-at-5.01.05-pm/screen-shot-2017-03-08-at-5.01.05-pm.png'
        width: 1438
        height: 264
        caption: ''
        resources: null
        instructor_notes: null
      - id: 278946
        key: 9e8d94e1-dec7-42e3-9292-b8df1b68b36c
        locale: en-us
        version: 1.0.0
        title: null
        semantic_type: TextAtom
        updated_at: 'Tue May 09 2017 21:22:39 GMT+0000 (UTC)'
        is_public: true
        text: |-
          It uses the `intending()` method associated with stubbing and takes `not(isInternal())` as its `IntentMatcher` parameter. [isInternal()][1] matches an intent if its package is the same as the target package for the instrumentation test, therefore `not(isInternal())` checks that the intent's package does not match the target package for the test. If that's the case respond with:

          ```java
          new ActivityResult(Activity.RESULT_OK, null)
          ```

          `ActivityResult(int resultCode, Intent resultData)` has 2 parameters. 
          - `resultCode` - Is the code sent back to the original activity. `RESULT_OK` indicates the operation was successful. 
          - `resultData` - Is the data to send back to the original activity. `null` indicates no data is sent back.

          ### `@Before` - `grantPhonePermission()`
          Intended for Android M+, ensures permission to use the phone is granted before running the DialerActivityTest. 

          [1]: https://developer.android.com/reference/android/support/test/espresso/intent/matcher/IntentMatchers.html#isInternal()
        instructor_notes: ''
        resources: null
      - id: 278947
        key: a76b2112-74fa-4d5e-b53e-bf1a7d05f31a
        locale: en-us
        version: 1.0.0
        title: null
        semantic_type: ImageAtom
        updated_at: 'Thu Mar 09 2017 01:22:34 GMT+0000 (UTC)'
        is_public: true
        url: 'https://d17h27t6h515a5.cloudfront.net/topher/2017/March/58c0ae54_screen-shot-2017-03-08-at-5.20.26-pm/screen-shot-2017-03-08-at-5.20.26-pm.png'
        width: 1192
        height: 362
        caption: ''
        resources: null
        instructor_notes: null
      - id: 278954
        key: 96b65a99-7258-4e00-8fbe-fccf82ac6530
        locale: en-us
        version: 1.0.0
        title: null
        semantic_type: TextAtom
        updated_at: 'Thu Mar 09 2017 02:33:29 GMT+0000 (UTC)'
        is_public: true
        text: |-
          ### @Test - pickContactButton_click_SelectsPhoneNumber()
          This test mocks a user clicking the "Contact Button" in the DialerActivity, an intent to the ContactsActivity is then stubbed to return a hard-coded VALID_PHONE_NUMBER, and the finally the test checks that the phone number sent back is displayed in the UI.

          The intent is stubbed here:
        instructor_notes: ''
        resources: null
      - id: 278956
        key: f6b7439a-7c48-44c7-aad7-e7d9ccd42ac6
        locale: en-us
        version: 1.0.0
        title: null
        semantic_type: ImageAtom
        updated_at: 'Thu Mar 09 2017 01:52:05 GMT+0000 (UTC)'
        is_public: true
        url: 'https://d17h27t6h515a5.cloudfront.net/topher/2017/March/58c0b53b_screen-shot-2017-03-08-at-5.49.43-pm/screen-shot-2017-03-08-at-5.49.43-pm.png'
        width: 1082
        height: 134
        caption: ''
        resources: null
        instructor_notes: null
      - id: 278959
        key: 4ccc9562-4e0a-461d-bf17-0c8b5f77faf8
        locale: en-us
        version: 1.0.0
        title: null
        semantic_type: TextAtom
        updated_at: 'Tue May 09 2017 19:44:28 GMT+0000 (UTC)'
        is_public: true
        text: |-
          *hasComponent()* can match an intent by class name, package name or short class name. Here we match by ShortClassName for the ContactsActivity. 
          When matched, respond with:

          ```java
          new ActivityResult(Activity.RESULT_OK, ContactsActivity.createResultData(VALID_PHONE_NUMBER))
          ```

          *ActivityResult(int resultCode, Intent resultData)* has 2 parameters. 
          - *resultCode* - the code sent back to the original activity. *RESULT_OK* indicates the operation was successful. 
          - *resultData* - the data to send back to the original activity. In this case [ContactsActivity.createResultData(VALID_PHONE_NUMBER)](https://github.com/googlesamples/android-testing/blob/master/ui/espresso/IntentsBasicSample/app/src/main/java/com/example/android/testing/espresso/BasicSample/ContactsActivity.java) creates a resultData object containing the phone number that will be sent back to the DialerActivity. 

          ### Summary
          The Intent Stubbing test, *pickContactButton_click_SelectsPhoneNumber()* stubs the intent that is sent when the user clicks the "Contact Button" by passing a hard-coded phone number, VALID_PHONE_NUMBER.
        instructor_notes: ''
        resources: null
  - id: 277630
    key: a909598a-3dd2-4c11-b298-d0baeaaaa874
    locale: en-us
    version: 1.0.0
    title: Intent Verification Code Example
    semantic_type: Concept
    updated_at: 'Tue Apr 11 2017 19:25:02 GMT+0000 (UTC)'
    is_public: true
    resources: null
    _atoms_ids:
      - 278961
      - 278964
      - 278965
      - 278963
      - 278966
      - 278967
      - 278968
    atoms:
      - id: 278961
        key: bbf33fd6-2093-4766-a57b-e1a3dbd40a3c
        locale: en-us
        version: 1.0.0
        title: null
        semantic_type: TextAtom
        updated_at: 'Tue May 09 2017 21:18:12 GMT+0000 (UTC)'
        is_public: true
        text: |+
          # Intent Verification Code Example

          Now let's see Intent Verification in practice. Navigate again to the [IntentBasicSample code](https://github.com/googlesamples/android-testing/tree/master/ui/espresso/IntentsBasicSample) created by the Google team.  

          (See the previous concept for an explanation of the [DialerActivity](https://github.com/googlesamples/android-testing/blob/master/ui/espresso/IntentsBasicSample/app/src/main/java/com/example/android/testing/espresso/BasicSample/DialerActivity.java) and the `@Rule` and `@Before` components of [DialerActivityTest](https://github.com/googlesamples/android-testing/blob/master/ui/espresso/IntentsBasicSample/app/src/androidTest/java/com/example/android/testing/espresso/BasicSample/DialerActivityTest.java).)

        instructor_notes: ''
        resources: null
      - id: 278964
        key: 218b98af-5832-4ada-a716-db033435dc32
        locale: en-us
        version: 1.0.0
        title: null
        semantic_type: ImageAtom
        updated_at: 'Thu Mar 09 2017 02:46:08 GMT+0000 (UTC)'
        is_public: true
        url: 'https://d17h27t6h515a5.cloudfront.net/topher/2017/March/58c0c1df_basicsample-dialeractivity-03082017162610/basicsample-dialeractivity-03082017162610.png'
        width: 1080
        height: 1920
        caption: DialerActivity screen
        resources: null
        instructor_notes: null
      - id: 278965
        key: a37f95b6-e583-4f5c-b9f2-53c364839060
        locale: en-us
        version: 1.0.0
        title: null
        semantic_type: TextAtom
        updated_at: 'Tue May 09 2017 21:19:06 GMT+0000 (UTC)'
        is_public: true
        text: |-
          ### @Test - typeNumber_ValidInput_InitiatesCall()
          This test mocks typing a phone number into the EditText field in the `DialerActivity` and verifies that the intent to the dialer was sent with the correct action, phone number, and package.

          This part of the code simulates typing the phone number into the `DialerActivity`: 
        instructor_notes: ''
        resources: null
      - id: 278963
        key: 69d70842-c12c-40f3-86c5-17eb59a85b28
        locale: en-us
        version: 1.0.0
        title: null
        semantic_type: ImageAtom
        updated_at: 'Thu Mar 09 2017 02:44:14 GMT+0000 (UTC)'
        is_public: true
        url: 'https://d17h27t6h515a5.cloudfront.net/topher/2017/March/58c0c172_screen-shot-2017-03-08-at-6.43.50-pm/screen-shot-2017-03-08-at-6.43.50-pm.png'
        width: 1306
        height: 252
        caption: ''
        resources: null
        instructor_notes: null
      - id: 278966
        key: eb99d5e0-aaf9-4e55-bc17-26c79ee3107b
        locale: en-us
        version: 1.0.0
        title: null
        semantic_type: TextAtom
        updated_at: 'Thu Mar 09 2017 02:51:10 GMT+0000 (UTC)'
        is_public: true
        text: 'This portion of the method verifies the intent to the dialer has the correct action, data, and package: '
        instructor_notes: ''
        resources: null
      - id: 278967
        key: 7635e68b-955d-4aea-9d7e-6f647ebc5833
        locale: en-us
        version: 1.0.0
        title: null
        semantic_type: ImageAtom
        updated_at: 'Thu Mar 09 2017 02:51:24 GMT+0000 (UTC)'
        is_public: true
        url: 'https://d17h27t6h515a5.cloudfront.net/topher/2017/March/58c0c328_screen-shot-2017-03-08-at-6.48.07-pm/screen-shot-2017-03-08-at-6.48.07-pm.png'
        width: 1352
        height: 258
        caption: ''
        resources: null
        instructor_notes: null
      - id: 278968
        key: 42f7e0d8-4be7-4882-b803-6ab0a325b2c6
        locale: en-us
        version: 1.0.0
        title: null
        semantic_type: TextAtom
        updated_at: 'Tue May 09 2017 21:19:24 GMT+0000 (UTC)'
        is_public: true
        text: |-
          ### Summary

          The Intent Verification test, `typeNumber_ValidInput_InitiatesCall()`, verifies the intent that is sent contains the correct information (e.g. action, data, package). 
        instructor_notes: ''
        resources: null
  - id: 278723
    key: 8272d3fd-a963-499b-b752-b84834287003
    locale: en-us
    version: 1.0.0
    title: 'Exercise: Add Intent Test in TeaTime'
    semantic_type: Concept
    updated_at: 'Mon Apr 17 2017 21:12:07 GMT+0000 (UTC)'
    is_public: true
    resources: null
    _atoms_ids:
      - 298284
      - 287555
    atoms:
      - id: 298284
        key: 14a0218c-3d3a-4bf9-b06e-473ab7ec6b5f
        locale: en-us
        version: 1.0.0
        title: null
        semantic_type: TextAtom
        updated_at: 'Tue May 09 2017 21:17:12 GMT+0000 (UTC)'
        is_public: true
        text: |-
          # Add Intent Test in TeaTime

          In this exercise your task is to finish writing the `OrderSummaryActivityTest`.  `OrderSummaryActivityTest` will test the email intent that is sent from `OrderSummaryActivity`. 

          I’ll leave it up to you to decide whether this is a case for intent stubbing or intent verification. 


          ### Exercise Code
          **Exercise:** [TESP.03-Exercise-AddOrderSummaryActivityTest](https://github.com/udacity/AdvancedAndroid_TeaTime/tree/TESP.03-Exercise-AddOrderSummaryActivityTest)
        instructor_notes: ''
        resources: null
      - id: 287555
        key: 8e8330dd-c81a-43d4-b7ab-27d0d7b6e282
        locale: en-us
        version: 1.0.0
        title: ''
        semantic_type: TaskListAtom
        updated_at: 'Tue May 09 2017 20:08:21 GMT+0000 (UTC)'
        is_public: true
        tasks:
          - Specify AndroidJUnitRunner as the test runner
          - Add the rule to use Espresso-intents APIs in functional UI tests
          - For each test finish the method that runs before it and that stubs all external intents (so that all external intents are blocked)
          - Finish the method that verifies the email intent
          - Add all required build dependencies
        positive_feedback: |-
          Hopefully testing Intents in Espresso wasn't too Intense :)

          **Solution:** [[TESP.03-Solution-AddOrderSummaryActivityTest](https://github.com/udacity/AdvancedAndroid_TeaTime/tree/TESP.03-Solution-AddOrderSummaryActivityTest)][[Diff](https://github.com/udacity/AdvancedAndroid_TeaTime/compare/TESP.03-Exercise-AddOrderSummaryActivityTest...TESP.03-Solution-AddOrderSummaryActivityTest?expand=1)]
        video_feedback: null
        description: 'Follow the TODOs to complete this exercise:'
  - id: 278724
    key: 08c90b8c-bc42-4a5f-b670-d678aa15337a
    locale: en-us
    version: 1.0.0
    title: Introduction to Espresso Idling Resources
    semantic_type: Concept
    updated_at: 'Tue Apr 25 2017 20:02:03 GMT+0000 (UTC)'
    is_public: true
    resources: null
    _atoms_ids:
      - 300434
    atoms:
      - id: 300434
        key: 7b02d322-d14f-4b01-acba-907be563fd11
        locale: en-us
        version: 1.0.0
        title: Introduction To Expresso Idling Resource
        semantic_type: VideoAtom
        updated_at: 'Wed Jun 28 2017 00:40:50 GMT+0000 (UTC)'
        is_public: true
        tags: []
        instructor_notes: ''
        resources: null
        video:
          id: '54212'
          youtube_id: pkZiBXGgSDQ
          subtitles:
            - url: 'http://video.udacity-data.com.s3.amazonaws.com/topher/2017/April/58ffa8cb_16-introduction-to-expresso-idling-resource-v1/subtitles/lang_en_vs1.srt'
              language_code: en
          transcodings:
            uri_480p_mp4: 'http://video.udacity-data.com.s3.amazonaws.com/topher/2017/April/58ffa8cb_16-introduction-to-expresso-idling-resource-v1/16-introduction-to-expresso-idling-resource-v1_480p.mp4'
            uri_480p_1000kbps_mp4: 'http://video.udacity-data.com.s3.amazonaws.com/topher/2017/April/58ffa8cb_16-introduction-to-expresso-idling-resource-v1/16-introduction-to-expresso-idling-resource-v1_480p_1000kbps.mp4'
            uri_480p_ogg: 'http://video.udacity-data.com.s3.amazonaws.com/topher/2017/April/58ffa8cb_16-introduction-to-expresso-idling-resource-v1/16-introduction-to-expresso-idling-resource-v1_480p.ogg'
            uri_720p_mp4: 'http://video.udacity-data.com.s3.amazonaws.com/topher/2017/April/58ffa8cb_16-introduction-to-expresso-idling-resource-v1/16-introduction-to-expresso-idling-resource-v1_720p.mp4'
            uri_hls: 'http://video.udacity-data.com.s3.amazonaws.com/topher/2017/April/58ffa8cb_16-introduction-to-expresso-idling-resource-v1/hls/playlist.m3u8'
  - id: 278725
    key: f355478b-c714-4423-9be7-ce1d9d1bacc3
    locale: en-us
    version: 1.0.0
    title: When to Use Idling Resources
    semantic_type: Concept
    updated_at: 'Fri Apr 14 2017 21:55:09 GMT+0000 (UTC)'
    is_public: true
    resources: null
    _atoms_ids:
      - 278969
    atoms:
      - id: 278969
        key: 63189227-847a-40c7-8f38-4163636c0d15
        locale: en-us
        version: 1.0.0
        title: When to Use Idling Resources
        semantic_type: CheckboxQuizAtom
        updated_at: 'Tue May 09 2017 20:18:59 GMT+0000 (UTC)'
        is_public: true
        question:
          prompt: |
            Select all the situations in which we should implement Idling Resources when testing the app with Espresso
          correct_feedback: |-
            The first situation of a photo-altering app that uses an IntentService is a prime example of when to use IdlingResources. Services such as IntentService that retrieve and return information asynchronously from what’s happening on the main thread will require IdlingResources to be set up, otherwise the UI test might continue testing even when the Broadcast hasn’t returned the processed images yet. 

            In the second situation, when the user opens the app and selects a menu item, there is likely a loading time delay. In order to avoid the test failing if it encounters this delay, we need to register an idling resource so Espresso knows to wait until the app is “idle” before proceeding with the test.

             In the third app, it might be tempting to think that processing a large bill might be a long-running operation that requires setting up idling when Espresso testing; however, this process likely won’t happen asynchronously and Espresso can handle this without us needing to setup Idling Resources

            In the last app, since authenticating a user’s login information will happen off the device and in a background thread, we’ll need to create and register Idling Resources to have to not run into issues when testing with Espresso. 
          video_feedback: null
          default_feedback: Idling Resources are used in situations where asynchronous background work happens during test execution. This involves doing work on a separate thread or queue.
          answers:
            - id: a1489028011385
              text: ' A photo-altering app uses an IntentService to download and process images and returns the result to the activity via a Broadcast.'
              is_correct: true
              incorrect_feedback: null
            - id: a1489028049961
              text: 'A smoothie shop is constantly changing the menu in their mobile ordering app. When the user opens the app to order, it downloads an image and description for each menu item. '
              is_correct: true
              incorrect_feedback: null
            - id: a1489028050826
              text: 'A calculator app that allows a user to divide a bill amongst friends who shared a meal. It takes the total meal cost and number of people sharing the meal, who ordered what, processes, and returns how much each individual should contribute. '
              is_correct: false
              incorrect_feedback: null
            - id: a1489028069465
              text: 'In order to log into a banking app, users must enter their username and password, information that needs to be authenticated via an external client. A response of whether or not the request was successful is sent back to the user’s device.'
              is_correct: true
              incorrect_feedback: null
  - id: 278726
    key: d08f4f11-b8ff-4913-9766-5fb610a59de7
    locale: en-us
    version: 1.0.0
    title: Idling Resource Code Sample - Part 1
    semantic_type: Concept
    updated_at: 'Fri Apr 14 2017 19:40:21 GMT+0000 (UTC)'
    is_public: true
    resources: null
    _atoms_ids:
      - 279002
      - 279003
      - 279005
      - 279006
      - 279007
      - 279008
      - 279015
      - 279016
      - 279014
    atoms:
      - id: 279002
        key: c40beb92-0406-458f-ad1b-fd0bd914c002
        locale: en-us
        version: 1.0.0
        title: null
        semantic_type: TextAtom
        updated_at: 'Tue May 09 2017 20:24:28 GMT+0000 (UTC)'
        is_public: true
        text: |-
          # Idling Resource Code Sample - Part 1

          The Tea shop that I’m building the TeaTime app for will actually have a lot more than the 6 types of tea that we’re currently have in the ArrayList. The owner is quite the tea enthusiast, constantly importing new teas and adding them to her menu. 

          This means that when users open up TeaTime, it’ll need to download the latest menu images and description. 

          Hmm sounds suspiciously like the smoothie scenario we just saw in the previous quiz. Not planned at all. I promise :)

          However before we dive into implementing IdlingResource, let’s see a simple example of how to set this up. 

          ## Basic Idling Resource Example App

          The Android Testing team created a Basic Idling Resource app sample.
          I recommend opening the code from the link below and exploring the files along with me.

          **[Find Code Here](https://github.com/googlesamples/android-testing/tree/master/ui/espresso/IdlingResourceSample)**

          Here’s what the app looks like when it runs:
        instructor_notes: ''
        resources: null
      - id: 279003
        key: b129077f-ca20-4a86-9464-fc081e48e72b
        locale: en-us
        version: 1.0.0
        title: null
        semantic_type: ImageAtom
        updated_at: 'Thu Mar 09 2017 19:35:20 GMT+0000 (UTC)'
        is_public: true
        url: 'https://d17h27t6h515a5.cloudfront.net/topher/2017/March/58c19e8c_screen-shot-2017-03-09-at-10.27.06-am/screen-shot-2017-03-09-at-10.27.06-am.png'
        width: 836
        height: 372
        caption: Type in EditText field > Click button > Delay message > TextView displays typed message
        resources: null
        instructor_notes: null
      - id: 279005
        key: a99933b0-63e7-4909-8f40-3d0eacb1f476
        locale: en-us
        version: 1.0.0
        title: null
        semantic_type: TextAtom
        updated_at: 'Tue May 09 2017 21:15:17 GMT+0000 (UTC)'
        is_public: true
        text: |-
          ## Code Walk-Through

          There are 3 java files - `SimpleIdlingResource.java`, `MainActivity.java`, and `MessageDelayer.java`. 

          ### SimpleIdlingResource.java

          Let’s start with [SimpleIdlingResource.java](https://github.com/googlesamples/android-testing/blob/master/ui/espresso/IdlingResourceSample/app/src/main/java/com/example/android/testing/espresso/IdlingResourceSample/IdlingResource/SimpleIdlingResource.java)

          As the comment on the top of the file states, this is a very simple implementation of the [IdlingResource interface](https://developer.android.com/reference/android/support/test/espresso/IdlingResource.html):
        instructor_notes: ''
        resources: null
      - id: 279006
        key: be0640b7-72f9-4bd8-9fe7-e6213ac58820
        locale: en-us
        version: 1.0.0
        title: null
        semantic_type: ImageAtom
        updated_at: 'Thu Mar 09 2017 18:35:26 GMT+0000 (UTC)'
        is_public: true
        url: 'https://d17h27t6h515a5.cloudfront.net/topher/2017/March/58c1a06a_screen-shot-2017-03-09-at-10.34.31-am/screen-shot-2017-03-09-at-10.34.31-am.png'
        width: 467
        height: 50
        caption: ''
        resources: null
        instructor_notes: null
      - id: 279007
        key: 414f15af-960c-49d9-b42a-f9a159b76a55
        locale: en-us
        version: 1.0.0
        title: null
        semantic_type: TextAtom
        updated_at: 'Tue May 09 2017 20:43:23 GMT+0000 (UTC)'
        is_public: true
        text: 'Because it is an interface, we can see from the [Developer doc](https://developer.android.com/reference/android/support/test/espresso/IdlingResource.html#nestedclassesl) that we''re required to complete the following 3 methods: '
        instructor_notes: ''
        resources: null
      - id: 279008
        key: fc9496d3-c204-4b05-a4b2-cae87dd95e51
        locale: en-us
        version: 1.0.0
        title: null
        semantic_type: ImageAtom
        updated_at: 'Thu Mar 09 2017 18:37:28 GMT+0000 (UTC)'
        is_public: true
        url: 'https://d17h27t6h515a5.cloudfront.net/topher/2017/March/58c1a0e2_screen-shot-2017-03-09-at-10.36.44-am/screen-shot-2017-03-09-at-10.36.44-am.png'
        width: 931
        height: 218
        caption: ''
        resources: null
        instructor_notes: null
      - id: 279015
        key: e45aab10-0187-4d23-9c33-e4d575089170
        locale: en-us
        version: 1.0.0
        title: null
        semantic_type: TextAtom
        updated_at: 'Tue May 09 2017 20:44:43 GMT+0000 (UTC)'
        is_public: true
        text: 'These methods are implemented here: '
        instructor_notes: ''
        resources: null
      - id: 279016
        key: d961849b-b7c2-42ee-b185-096c1d480eb1
        locale: en-us
        version: 1.0.0
        title: null
        semantic_type: ImageAtom
        updated_at: 'Thu Mar 09 2017 18:47:18 GMT+0000 (UTC)'
        is_public: true
        url: 'https://d17h27t6h515a5.cloudfront.net/topher/2017/March/58c1a32b_screen-shot-2017-03-09-at-10.46.33-am/screen-shot-2017-03-09-at-10.46.33-am.png'
        width: 642
        height: 422
        caption: ''
        resources: null
        instructor_notes: null
      - id: 279014
        key: 2ae0c95d-c0fd-4f1e-b301-8a6671cbc433
        locale: en-us
        version: 1.0.0
        title: null
        semantic_type: TextAtom
        updated_at: 'Thu Jun 08 2017 18:31:26 GMT+0000 (UTC)'
        is_public: true
        text: |-
          In the code above we also initiate an [AtomicBoolean](https://developer.android.com/reference/java/util/concurrent/atomic/AtomicBoolean.html) object to control the state of idleness. This class provides us with a `boolean` variable that can be read and written to automatically. `AtomicBoolean`s are used when multiple threads need to check and change the boolean. This happens to be perfect for our situation.

          Remember that *if idle is false* there are pending operations in the background and any testing operations should be paused. 
          *If idle is true* all is clear and testing operations can continue. 

          ## Summary
          Implementing the `IdlingResource` interface is straight forward: it requires completing the 3 required methods. We also created an instance of  [AtomicBoolean](https://developer.android.com/reference/java/util/concurrent/atomic/AtomicBoolean.html) in order to control idleness across multiple threads.

          Next we'll discuss `MainActivity` where we will use the `IdlingResource`.

          ---

          ## Learn More About:
          - [IdlingResource Interface](https://developer.android.com/reference/android/support/test/espresso/IdlingResource.html)

          - [Espresso Idling Resource](https://google.github.io/android-testing-support-library/docs/espresso/idling-resource/)
        instructor_notes: ''
        resources: null
  - id: 278727
    key: 1449718b-df48-4789-a152-4e52f0093006
    locale: en-us
    version: 1.0.0
    title: Idling Resource Code Sample - Part 2
    semantic_type: Concept
    updated_at: 'Tue Apr 11 2017 19:25:15 GMT+0000 (UTC)'
    is_public: true
    resources: null
    _atoms_ids:
      - 279024
      - 279023
      - 279017
      - 279020
      - 279021
      - 279025
      - 279026
      - 279028
      - 279029
      - 279030
      - 279031
      - 279032
      - 279033
      - 279034
      - 279058
      - 279071
      - 279075
      - 279061
      - 279095
    atoms:
      - id: 279024
        key: a0fff2ed-4bd1-48e0-938a-7fc907601f26
        locale: en-us
        version: 1.0.0
        title: null
        semantic_type: TextAtom
        updated_at: 'Tue May 09 2017 20:50:59 GMT+0000 (UTC)'
        is_public: true
        text: |-
          # Idling Resource Code Sample - Part 2

          I recommend opening the code from the link below and exploring the files along with me.

          **[Find Code Here](https://github.com/googlesamples/android-testing/tree/master/ui/espresso/IdlingResourceSample)**

          Here’s what the app looks like when it runs:
        instructor_notes: ''
        resources: null
      - id: 279023
        key: 09361bf3-fe56-427a-8aa1-e6ec0eba4d7c
        locale: en-us
        version: 1.0.0
        title: null
        semantic_type: ImageAtom
        updated_at: 'Thu Mar 09 2017 19:35:28 GMT+0000 (UTC)'
        is_public: true
        url: 'https://d17h27t6h515a5.cloudfront.net/topher/2017/March/58c1ae65_screen-shot-2017-03-09-at-10.27.06-am/screen-shot-2017-03-09-at-10.27.06-am.png'
        width: 836
        height: 372
        caption: Type in EditText field > Click button > Delay message > TextView displays typed message
        resources: null
        instructor_notes: null
      - id: 279017
        key: 593dff61-f564-4415-8431-3b611a0e6553
        locale: en-us
        version: 1.0.0
        title: null
        semantic_type: TextAtom
        updated_at: 'Tue May 09 2017 21:07:20 GMT+0000 (UTC)'
        is_public: true
        text: |-
          ### MainActivity.java
          Navigate to [MainAcitivity.java](https://github.com/googlesamples/android-testing/blob/master/ui/espresso/IdlingResourceSample/app/src/main/java/com/example/android/testing/espresso/IdlingResourceSample/MainActivity.java).  In the `MainActivity` class we get a text `String` from the user and display it after a delay.

          `MainActivity` extends from the `Activity` class and implements both [View.onClickListener](https://developer.android.com/reference/android/view/View.OnClickListener.html) (created by the Android framework) and [Message.Delayer.DelayerCallback](https://github.com/googlesamples/android-testing/blob/master/ui/espresso/IdlingResourceSample/app/src/main/java/com/example/android/testing/espresso/IdlingResourceSample/MessageDelayer.java) (created in this project).
        instructor_notes: ''
        resources: null
      - id: 279020
        key: 6457af0c-ba06-4c62-a9ce-18b95863402a
        locale: en-us
        version: 1.0.0
        title: null
        semantic_type: ImageAtom
        updated_at: 'Thu Mar 09 2017 19:28:46 GMT+0000 (UTC)'
        is_public: true
        url: 'https://d17h27t6h515a5.cloudfront.net/topher/2017/March/58c1aceb_screen-shot-2017-03-09-at-11.28.14-am/screen-shot-2017-03-09-at-11.28.14-am.png'
        width: 1214
        height: 202
        caption: ''
        resources: null
        instructor_notes: null
      - id: 279021
        key: d13cac7a-e2ec-4013-b996-f7422e2dd95a
        locale: en-us
        version: 1.0.0
        title: null
        semantic_type: TextAtom
        updated_at: 'Tue May 09 2017 21:02:07 GMT+0000 (UTC)'
        is_public: true
        text: |-
          Next we declare the `TextView` and `EditText` view which are setup in `onCreate()`. 

          We also declare a private variable called *mIdlingResource* of type `SimpleIdlingResource`. Notice that it has an annotation *@Nullable* which indicates that this variable will be `null` in production. This is because this setup with `IdlingResource` is only used for testing, so when the project is run in production, `IdlingResource` can be `null`. 
        instructor_notes: ''
        resources: null
      - id: 279025
        key: 08089cc5-2b2a-4c5b-99d0-5669cffc9432
        locale: en-us
        version: 1.0.0
        title: null
        semantic_type: ImageAtom
        updated_at: 'Thu Mar 09 2017 22:21:03 GMT+0000 (UTC)'
        is_public: true
        url: 'https://d17h27t6h515a5.cloudfront.net/topher/2017/March/58c1aee3_screen-shot-2017-03-09-at-11.36.36-am/screen-shot-2017-03-09-at-11.36.36-am.png'
        width: 1170
        height: 802
        caption: MainActivity.java - Declare variables and onCreate()
        resources: null
        instructor_notes: null
      - id: 279026
        key: e0f3abc2-0d2c-4149-841d-4ca5f5668dc6
        locale: en-us
        version: 1.0.0
        title: null
        semantic_type: TextAtom
        updated_at: 'Tue May 09 2017 21:03:06 GMT+0000 (UTC)'
        is_public: true
        text: |
          When the `changeTextBt` is clicked, `onClick()` retrieves the text the user typed in the EditText view, sets a temporary waiting message, and then submits the user-entered EditText value to the `processMessage()` method of  [MessageDelayer.java](https://github.com/googlesamples/android-testing/blob/master/ui/espresso/IdlingResourceSample/app/src/main/java/com/example/android/testing/espresso/IdlingResourceSample/MessageDelayer.java). 
        instructor_notes: ''
        resources: null
      - id: 279028
        key: 92362867-624a-48f8-a9f5-8ea8f297d37f
        locale: en-us
        version: 1.0.0
        title: null
        semantic_type: ImageAtom
        updated_at: 'Thu Mar 09 2017 22:21:17 GMT+0000 (UTC)'
        is_public: true
        url: 'https://d17h27t6h515a5.cloudfront.net/topher/2017/March/58c1b352_screen-shot-2017-03-09-at-11.55.46-am/screen-shot-2017-03-09-at-11.55.46-am.png'
        width: 1130
        height: 486
        caption: MainActivity.java onClick() method
        resources: null
        instructor_notes: null
      - id: 279029
        key: a1226813-3cec-461e-a515-242ec0ade308
        locale: en-us
        version: 1.0.0
        title: null
        semantic_type: TextAtom
        updated_at: 'Tue May 09 2017 21:03:54 GMT+0000 (UTC)'
        is_public: true
        text: |-
          ### MessageDelayer.java
          This class is not part of the Android framework. It was created for this project. It takes a `String` and returns it after a delay via a callback. It executes a long-running operation on a different thread that will cause problems with Espresso if `IdlingResource` is not implemented and registered. 

          The `processMessage()` method takes a `String` (the one that the user typed into the `EditText field`), and returns it after the delay time we setup in `DELAY_MILLIS`. The `String` is returned via the callback in the `onDone` method. 
        instructor_notes: ''
        resources: null
      - id: 279030
        key: d5190b1a-627d-49e4-9e3e-374105b5e4f2
        locale: en-us
        version: 1.0.0
        title: null
        semantic_type: ImageAtom
        updated_at: 'Thu Mar 09 2017 22:21:37 GMT+0000 (UTC)'
        is_public: true
        url: 'https://d17h27t6h515a5.cloudfront.net/topher/2017/March/58c1b3ab_screen-shot-2017-03-09-at-11.56.49-am/screen-shot-2017-03-09-at-11.56.49-am.png'
        width: 1462
        height: 1048
        caption: MessageDelayer.java processMessage() method
        resources: null
        instructor_notes: null
      - id: 279031
        key: 63246a40-44ae-4a7b-8aa5-34f5e3b453de
        locale: en-us
        version: 1.0.0
        title: null
        semantic_type: TextAtom
        updated_at: 'Tue May 09 2017 21:06:28 GMT+0000 (UTC)'
        is_public: true
        text: |+
          `processMessage()` has 3 parameters -  the message, the activity to return back to in the callback, and the `IdlingResource`. 

          The `if` statement checks whether or not `IdlingResource` is `null`. If it isn’t we can go ahead and set `idle` to `false`. Remember that `idle` means:
          - No UI events in the current message queue
          - No more tasks in the default AsyncTask thread pool

          So if `idle` is `false` there are tasks or events that are happening and any testing should be on halt until these processes finish.

          With `idle` set as `false` we create a handler and run the method `postDelayed()`. 

          What exactly is a `Handler` and what’s the purpose of `postDelayed()`?

          ### Handler
          If we look in the [Developer documentation](https://developer.android.com/reference/android/os/Handler.html), we can see that there are 2 main uses for a Handler: 

        instructor_notes: ''
        resources: null
      - id: 279032
        key: 8e345eb4-ee99-47be-bc75-68d86275e455
        locale: en-us
        version: 1.0.0
        title: null
        semantic_type: ImageAtom
        updated_at: 'Thu Mar 09 2017 22:21:47 GMT+0000 (UTC)'
        is_public: true
        url: 'https://d17h27t6h515a5.cloudfront.net/topher/2017/March/58c1b497_screen-shot-2017-03-09-at-12.01.07-pm/screen-shot-2017-03-09-at-12.01.07-pm.png'
        width: 1556
        height: 118
        caption: Developer doc for Handler class
        resources: null
        instructor_notes: null
      - id: 279033
        key: 9f67777e-1348-464e-8051-c878a5f79697
        locale: en-us
        version: 1.0.0
        title: null
        semantic_type: TextAtom
        updated_at: 'Tue May 09 2017 21:08:56 GMT+0000 (UTC)'
        is_public: true
        text: Further down in the code we see that `postDelayed()` adds a `Runnable` to a message queue and it will run after a specified amount of time.
        instructor_notes: ''
        resources: null
      - id: 279034
        key: 09474f79-5a13-400c-b25d-af14755b405c
        locale: en-us
        version: 1.0.0
        title: null
        semantic_type: ImageAtom
        updated_at: 'Thu Mar 09 2017 22:22:05 GMT+0000 (UTC)'
        is_public: true
        url: 'https://d17h27t6h515a5.cloudfront.net/topher/2017/March/58c1b4f8_screen-shot-2017-03-09-at-12.02.49-pm/screen-shot-2017-03-09-at-12.02.49-pm.png'
        width: 1574
        height: 336
        caption: Developer doc for postDelayed() method in Handler class
        resources: null
        instructor_notes: null
      - id: 279058
        key: 1c754868-003e-44c4-9cf4-dfde316776dd
        locale: en-us
        version: 1.0.0
        title: null
        semantic_type: TextAtom
        updated_at: 'Tue May 09 2017 21:09:51 GMT+0000 (UTC)'
        is_public: true
        text: |
          The first parameter of `postDelayed()` is the Runnable that will be run once the delay time is up. So what do we expect to run? 
        instructor_notes: ''
        resources: null
      - id: 279071
        key: 471bb00b-3bf5-40fe-88e7-30656e292bbd
        locale: en-us
        version: 1.0.0
        title: null
        semantic_type: ImageAtom
        updated_at: 'Thu Mar 09 2017 22:31:05 GMT+0000 (UTC)'
        is_public: true
        url: 'https://d17h27t6h515a5.cloudfront.net/topher/2017/March/58c1d761_screen-shot-2017-03-09-at-2.27.40-pm/screen-shot-2017-03-09-at-2.27.40-pm.png'
        width: 874
        height: 544
        caption: handler.postDelayed() has 2 parameters - a Runnable and a time delay
        resources: null
        instructor_notes: null
      - id: 279075
        key: de3ab45b-85d1-4578-81d4-7db7a4559da1
        locale: en-us
        version: 1.0.0
        title: null
        semantic_type: TextAtom
        updated_at: 'Tue May 09 2017 21:12:04 GMT+0000 (UTC)'
        is_public: true
        text: |-
          The first action of the `Runnable` is to check the callback we received in `processMessage()` (i.e. which activity we should return to after the delay). We return to that activity’s `onDone()` method and return the message variable. 

          Then we check that `idlingResource` is not `null`.  If it's not `null` we set its state to `true`. Remember that if the app is *idle* it means that Espresso gets the green light and continues any action in the test that was queued. 

          The second parameter, delay time, is set to the constant `DELAY_MILLIS` in `MessageDelayer.java`: 
        instructor_notes: ''
        resources: null
      - id: 279061
        key: e05a46af-687a-40b7-9830-e2ea0b6f64b1
        locale: en-us
        version: 1.0.0
        title: null
        semantic_type: ImageAtom
        updated_at: 'Thu Mar 09 2017 22:22:22 GMT+0000 (UTC)'
        is_public: true
        url: 'https://d17h27t6h515a5.cloudfront.net/topher/2017/March/58c1d2b9_screen-shot-2017-03-09-at-2.08.27-pm/screen-shot-2017-03-09-at-2.08.27-pm.png'
        width: 822
        height: 38
        caption: Delay time set in MessageDelayer.java
        resources: null
        instructor_notes: null
      - id: 279095
        key: fb27a4e1-6252-4cbd-9085-50a4600b05e4
        locale: en-us
        version: 1.0.0
        title: null
        semantic_type: TextAtom
        updated_at: 'Thu Jun 08 2017 18:32:05 GMT+0000 (UTC)'
        is_public: true
        text: |-
          ## Summary
          Let's take a pause and recap what we've uncovered so far. 

          When the `changeTextBt` is clicked, `onClick()` in `MainActivity` triggers `MessageDelayer.processMessage()`. 

          `processMessage()` sets the `IdlingResource` to ` false`, then creates a `Handler` which contains a Runnable that will be run after a pre-determined time delay, `DELAY_MILLIS`.
          The Runnable that will be executed after the delay: 

          1) Returns the `String` entered by the user via a callback to the calling activity (e.g. `MainActivity`)

          2) Sets the `IdlingResource` to `true`

          ---

          ### Learn More About:
          [@Nullable](https://developer.android.com/reference/android/support/annotation/Nullable.html)

          [Handler](https://developer.android.com/reference/android/os/Handler.html)

          [Runnable](https://developer.android.com/reference/java/lang/Runnable.html)

          [Espresso Idling Resource](https://google.github.io/android-testing-support-library/docs/espresso/idling-resource/)
        instructor_notes: ''
        resources: null
  - id: 278728
    key: 68c3d675-4547-4ef9-b495-adef2267a650
    locale: en-us
    version: 1.0.0
    title: Basic Idling Resource Code Sample
    semantic_type: Concept
    updated_at: 'Thu Jun 08 2017 18:35:03 GMT+0000 (UTC)'
    is_public: true
    resources: null
    _atoms_ids:
      - 328550
      - 279102
    atoms:
      - id: 328550
        key: b49062df-6e97-4d3f-87ab-52ab0fb85027
        locale: en-us
        version: 1.0.0
        title: null
        semantic_type: TextAtom
        updated_at: 'Thu Jun 08 2017 18:35:02 GMT+0000 (UTC)'
        is_public: true
        text: '*High-five.* We just went through a lot of code to understand in that Idling Resources sample. To double-check your understanding, complete the following quiz. '
        instructor_notes: ''
        resources: null
      - id: 279102
        key: fa926a62-a90c-4d79-adaf-46c2004308cd
        locale: en-us
        version: 1.0.0
        title: ''
        semantic_type: CheckboxQuizAtom
        updated_at: 'Tue May 09 2017 21:44:37 GMT+0000 (UTC)'
        is_public: true
        question:
          prompt: |
            Select all the statements that are true of the [BasicIdlingResourceSample](https://github.com/googlesamples/android-testing/tree/master/ui/espresso/IdlingResourceSample) project we just looked at:
          correct_feedback: |-
            Great job keeping track of all these components!

            Options 2 is false. Espresso will wait until the app is idle, so when the state of `idlingResource` is `true`, there are no more events in the message queue and all AsyncTasks have completed before moving to the next test operation.

            Option 3 is false. In this example because `DelayerCallback` is an interface, any class that implements it must override the `onDone` method which will return a  text String. 
          video_feedback: null
          default_feedback: |-
            What does it mean to be "idle"?

            Because `MainActivity` implements the interface `DelayerCallback`, look there for the lifecycle method that needs to be overridden. 
          answers:
            - id: a1489099735299
              text: 'The `MainActivity` implements the `MessageDelayer.DelayerCallback` which is triggered in the `onClick()` method. '
              is_correct: true
              incorrect_feedback: When is MessageDelayer.DelayerCallback triggered?
            - id: a1489100087261
              text: 'Espresso will wait until the state of `idlingResource` is `false` before moving to the next test operation. '
              is_correct: false
              incorrect_feedback: What does it mean to be "idle"?
            - id: a1489100094511
              text: 'In this example, callback notifies the caller (the activity that called it) via `onResume`.'
              is_correct: false
              incorrect_feedback: 'Because MainActivity implements the interface DelayerCallback, go there to find the lifecycle method that will need to be overridden. '
            - id: a1489100120122
              text: '`MainActivity` is notified asynchronously that the time delay, `DELAY_MILLIS`, is up by a handler which executes a Runnable that returns back a message in the method `onDone()`. '
              is_correct: true
              incorrect_feedback: Review what happens in handler.postDelayed()
  - id: 278729
    key: 7e8095be-b018-4749-b349-014f2bf44f32
    locale: en-us
    version: 1.0.0
    title: Return via Callback in MainActivity
    semantic_type: Concept
    updated_at: 'Thu Jun 08 2017 18:42:57 GMT+0000 (UTC)'
    is_public: true
    resources: null
    _atoms_ids:
      - 328551
      - 279145
      - 279143
      - 279146
      - 279152
      - 279153
      - 279160
    atoms:
      - id: 328551
        key: 2e82860a-2d8f-41bd-a0ac-61f73f07f81f
        locale: en-us
        version: 1.0.0
        title: null
        semantic_type: TextAtom
        updated_at: 'Thu Jun 08 2017 18:45:33 GMT+0000 (UTC)'
        is_public: true
        text: |
          # Return via Callback in MainActivity

          Before the quiz, we left off at the end of `handler.postDelayed()`  in [MessageDelayer.java](https://github.com/googlesamples/android-testing/blob/master/ui/espresso/IdlingResourceSample/app/src/main/java/com/example/android/testing/espresso/IdlingResourceSample/MessageDelayer.java), which runs a Runnable after a time delay.
        instructor_notes: ''
        resources: null
      - id: 279145
        key: 3eee7afd-39f1-4277-adae-918b94318a17
        locale: en-us
        version: 1.0.0
        title: null
        semantic_type: ImageAtom
        updated_at: 'Fri Mar 10 2017 18:08:19 GMT+0000 (UTC)'
        is_public: true
        url: 'https://d17h27t6h515a5.cloudfront.net/topher/2017/March/58c2eb51_screen-shot-2017-03-09-at-2.27.40-pm/screen-shot-2017-03-09-at-2.27.40-pm.png'
        width: 874
        height: 544
        caption: handler.postDelayed() in MessageDelayer.java executes a Runnable after the amount of time set by DELAY_MILLIS
        resources: null
        instructor_notes: null
      - id: 279143
        key: a28500fe-0aff-41ca-bfce-204a5cefe8cd
        locale: en-us
        version: 1.0.0
        title: null
        semantic_type: TextAtom
        updated_at: 'Thu Jun 08 2017 18:43:48 GMT+0000 (UTC)'
        is_public: true
        text: 'Now, let’s look more closely into what happens when the *callback* is executed. '
        instructor_notes: ''
        resources: null
      - id: 279146
        key: 242f5a64-3609-4e74-a5f1-a279f446f0b4
        locale: en-us
        version: 1.0.0
        title: null
        semantic_type: ImageAtom
        updated_at: 'Fri Mar 10 2017 18:09:21 GMT+0000 (UTC)'
        is_public: true
        url: 'https://d17h27t6h515a5.cloudfront.net/topher/2017/March/58c2ebb0_screen-shot-2017-03-09-at-2.26.42-pm/screen-shot-2017-03-09-at-2.26.42-pm.png'
        width: 574
        height: 190
        caption: The Runnable executes a callback
        resources: null
        instructor_notes: null
      - id: 279152
        key: 1234b7d7-eeb6-4b8d-9d35-0613a658ebbd
        locale: en-us
        version: 1.0.0
        title: null
        semantic_type: TextAtom
        updated_at: 'Fri Mar 10 2017 18:11:10 GMT+0000 (UTC)'
        is_public: true
        text: |-
          This method call indicates that we need go to the *onDone()* implemented in the callback activity, which in this case is [MainActivity](https://github.com/googlesamples/android-testing/blob/master/ui/espresso/IdlingResourceSample/app/src/main/java/com/example/android/testing/espresso/IdlingResourceSample/MainActivity.java).  

          Going back to [MainActivity.java](https://github.com/googlesamples/android-testing/blob/master/ui/espresso/IdlingResourceSample/app/src/main/java/com/example/android/testing/espresso/IdlingResourceSample/MainActivity.java) in line 72 we find our implementation of *onDone()* in which we set the TextView to the text the user had typed in EditText
        instructor_notes: ''
        resources: null
      - id: 279153
        key: 44e4c23c-a85f-4052-90c6-dded4d0901a2
        locale: en-us
        version: 1.0.0
        title: null
        semantic_type: ImageAtom
        updated_at: 'Fri Mar 10 2017 18:12:18 GMT+0000 (UTC)'
        is_public: true
        url: 'https://d17h27t6h515a5.cloudfront.net/topher/2017/March/58c2ec60_screen-shot-2017-03-10-at-10.11.25-am/screen-shot-2017-03-10-at-10.11.25-am.png'
        width: 972
        height: 204
        caption: ''
        resources: null
        instructor_notes: null
      - id: 279160
        key: a26ba23a-b96b-4ae9-95be-7f205de5e0ae
        locale: en-us
        version: 1.0.0
        title: null
        semantic_type: TextAtom
        updated_at: 'Wed May 10 2017 18:17:22 GMT+0000 (UTC)'
        is_public: true
        text: |
          To round out the rest of `MainActivity`, there's the method `getIdlingResource()`, which has the annotations `@VisibleForTesting` and `@NonNull`, so it's only called during a test, and its value can’t be `null`. 
          The method returns a new instance of [SimpleIdlingResource](https://github.com/googlesamples/android-testing/blob/master/ui/espresso/IdlingResourceSample/app/src/main/java/com/example/android/testing/espresso/IdlingResourceSample/IdlingResource/SimpleIdlingResource.java). 

          ## Summary
          To summarize all the new classes and connections in this specific example: 

          1. Implement the `IdlingResource` interface ([SimpleIdlingResource.java](https://github.com/googlesamples/android-testing/blob/master/ui/espresso/IdlingResourceSample/app/src/main/java/com/example/android/testing/espresso/IdlingResourceSample/IdlingResource/SimpleIdlingResource.java))

          2. Create a callback interface ([MessageDelayer.java](https://github.com/googlesamples/android-testing/blob/master/ui/espresso/IdlingResourceSample/app/src/main/java/com/example/android/testing/espresso/IdlingResourceSample/MessageDelayer.java)) where the actual asynchronous task will occur

          3. Set the state of `IdlingResource` to `false` when the task is running, and then back to `true` when the task is done

          4. Have the delayer notify the activity that the process is complete via a callback ([MainActivity.onDone](https://github.com/googlesamples/android-testing/blob/master/ui/espresso/IdlingResourceSample/app/src/main/java/com/example/android/testing/espresso/IdlingResourceSample/MainActivity.java))
        instructor_notes: ''
        resources: null
  - id: 278730
    key: 336ba5f1-9fdb-4596-9b3e-6cc195e0391f
    locale: en-us
    version: 1.0.0
    title: Add Idling Resource Test in Sample App
    semantic_type: Concept
    updated_at: 'Thu Jun 08 2017 18:36:23 GMT+0000 (UTC)'
    is_public: true
    resources: null
    _atoms_ids:
      - 289130
    atoms:
      - id: 289130
        key: e0e53b59-e542-40ab-9eed-df2170137a5c
        locale: en-us
        version: 1.0.0
        title: Add Idling Resource Test in Sample App
        semantic_type: VideoAtom
        updated_at: 'Wed Jun 28 2017 00:41:01 GMT+0000 (UTC)'
        is_public: true
        tags: []
        instructor_notes: ''
        resources: null
        video:
          id: '52522'
          youtube_id: 0cYsfEG0soE
          subtitles:
            - url: 'http://video.udacity-data.com.s3.amazonaws.com/topher/2017/March/58decd80_espresso-22-add-idling-resourse-test-in-sample-app/subtitles/lang_en_vs1.srt'
              language_code: en
          transcodings:
            uri_480p_mp4: 'http://video.udacity-data.com.s3.amazonaws.com/topher/2017/March/58decd80_espresso-22-add-idling-resourse-test-in-sample-app/espresso-22-add-idling-resourse-test-in-sample-app_480p.mp4'
            uri_480p_1000kbps_mp4: 'http://video.udacity-data.com.s3.amazonaws.com/topher/2017/March/58decd80_espresso-22-add-idling-resourse-test-in-sample-app/espresso-22-add-idling-resourse-test-in-sample-app_480p_1000kbps.mp4'
            uri_480p_ogg: 'http://video.udacity-data.com.s3.amazonaws.com/topher/2017/March/58decd80_espresso-22-add-idling-resourse-test-in-sample-app/espresso-22-add-idling-resourse-test-in-sample-app_480p.ogg'
            uri_720p_mp4: 'http://video.udacity-data.com.s3.amazonaws.com/topher/2017/March/58decd80_espresso-22-add-idling-resourse-test-in-sample-app/espresso-22-add-idling-resourse-test-in-sample-app_720p.mp4'
            uri_hls: 'http://video.udacity-data.com.s3.amazonaws.com/topher/2017/March/58decd80_espresso-22-add-idling-resourse-test-in-sample-app/hls/playlist.m3u8'
  - id: 278731
    key: 03471cfe-9f6a-489b-8de8-5f4bd7c1104b
    locale: en-us
    version: 1.0.0
    title: 'Exercise: Add IdlingResourceActivityTest in TeaTime'
    semantic_type: Concept
    updated_at: 'Mon Apr 17 2017 21:18:36 GMT+0000 (UTC)'
    is_public: true
    resources: null
    _atoms_ids:
      - 289131
      - 298286
      - 279173
    atoms:
      - id: 289131
        key: 0e4c7839-6bfe-4e00-8d32-a92060eb49be
        locale: en-us
        version: 1.0.0
        title: 'Exercise: Add IdlingResourceActivityTest in TeaTime'
        semantic_type: VideoAtom
        updated_at: 'Wed Jun 28 2017 00:40:56 GMT+0000 (UTC)'
        is_public: true
        tags: []
        instructor_notes: ''
        resources: null
        video:
          id: '52523'
          youtube_id: hnN8bVR5Go8
          subtitles:
            - url: 'http://video.udacity-data.com.s3.amazonaws.com/topher/2017/March/58decd86_espresso-23-add-idling-resourse-activity-test-in-tea-time/subtitles/lang_en_vs1.srt'
              language_code: en
          transcodings:
            uri_480p_mp4: 'http://video.udacity-data.com.s3.amazonaws.com/topher/2017/March/58decd86_espresso-23-add-idling-resourse-activity-test-in-tea-time/espresso-23-add-idling-resourse-activity-test-in-tea-time_480p.mp4'
            uri_480p_1000kbps_mp4: 'http://video.udacity-data.com.s3.amazonaws.com/topher/2017/March/58decd86_espresso-23-add-idling-resourse-activity-test-in-tea-time/espresso-23-add-idling-resourse-activity-test-in-tea-time_480p_1000kbps.mp4'
            uri_480p_ogg: 'http://video.udacity-data.com.s3.amazonaws.com/topher/2017/March/58decd86_espresso-23-add-idling-resourse-activity-test-in-tea-time/espresso-23-add-idling-resourse-activity-test-in-tea-time_480p.ogg'
            uri_720p_mp4: 'http://video.udacity-data.com.s3.amazonaws.com/topher/2017/March/58decd86_espresso-23-add-idling-resourse-activity-test-in-tea-time/espresso-23-add-idling-resourse-activity-test-in-tea-time_720p.mp4'
            uri_hls: 'http://video.udacity-data.com.s3.amazonaws.com/topher/2017/March/58decd86_espresso-23-add-idling-resourse-activity-test-in-tea-time/hls/playlist.m3u8'
      - id: 298286
        key: c0120d7e-bbe6-48f0-b80f-d6f9dd29a05c
        locale: en-us
        version: 1.0.0
        title: null
        semantic_type: TextAtom
        updated_at: 'Tue May 09 2017 21:51:15 GMT+0000 (UTC)'
        is_public: true
        text: |-
          # Add `IdlingResourceActivityTest` in TeaTime

          In this exercise you will implement the `IdlingResourceActivityTest`. We will create a mock scenario in the app that simulates a time delay when downloading menu images and descriptions into the `MenuActivity`. 

          To help you get started I’ve added the `SimpleIdlingResource` class which is an implementation of `IdlingResource` for you to use.

          You will need to modify `MenuActivity` to properly implement the interface `ImageDownloader` which is a callback interface. Refer back to the previous concepts if you need a hint. 

          When the callback finishes executing, it will return the arraylist of Tea objects with the images and tea names back to the MenuActivity. 


          ### Exercise Code
          **Exercise:** [TESP.04-Exercise-AddIdlingResourceMenuActivityTest](https://github.com/udacity/AdvancedAndroid_TeaTime/tree/TESP.04-Exercise-AddIdlingResourceMenuActivityTest)
        instructor_notes: ''
        resources: null
      - id: 279173
        key: a516821a-aa38-47a7-90a9-307b6accd8a0
        locale: en-us
        version: 1.0.0
        title: ''
        semantic_type: TaskListAtom
        updated_at: 'Tue May 09 2017 21:52:36 GMT+0000 (UTC)'
        is_public: true
        tasks:
          - Implement `ImageDownloader.DelayerCallback` for `MenuActivity`
          - Add a `SimpleIdlingResource` variable
          - Create a method that returns the `IdlingResource` variable
          - Get the `IdlingResource` variable and call `downloadImage` from `ImageDownloader`
          - Override `onDone` to return an `ArrayList` of Tea objects via the callback
          - Register the `IdlingResource`
          - Test that the Tea objects appear in the `gridView`
          - Unregister the `IdlingResource`
          - Add the correct gradle dependency
        positive_feedback: |-
          Nice job connecting all the pieces!

          **Solution:** [[TESP.04-Solution-AddIdlingResourceMenuActivityTest](https://github.com/udacity/AdvancedAndroid_TeaTime/tree/TESP.04-Solution-AddIdlingResourceMenuActivityTest)][[Diff](https://github.com/udacity/AdvancedAndroid_TeaTime/compare/TESP.04-Exercise-AddIdlingResourceMenuActivityTest...TESP.04-Solution-AddIdlingResourceMenuActivityTest?expand=11)]
        video_feedback: null
        description: 'Follow the TODOs to complete this exercise:'
  - id: 278732
    key: 04019f59-6a1e-4e36-a29c-258ce4d71629
    locale: en-us
    version: 1.0.0
    title: Explore Espresso Further
    semantic_type: Concept
    updated_at: 'Tue Apr 11 2017 19:25:27 GMT+0000 (UTC)'
    is_public: true
    resources: null
    _atoms_ids:
      - 279176
    atoms:
      - id: 279176
        key: 7b88af08-1b1a-4b38-89d6-18e0e9d6294d
        locale: en-us
        version: 1.0.0
        title: null
        semantic_type: TextAtom
        updated_at: 'Tue May 09 2017 21:56:54 GMT+0000 (UTC)'
        is_public: true
        text: |-
          # Explore Espresso Further

          Espresso helps us test:
          - Views
          - AdapterViews
          - Intents
          - Idling Resources
          - Espresso Web (not covered in this lesson)
          - RecyclerViews  (not covered in this lesson)

          Phew, we covered A LOT of Espresso. There are some additional components that we didn’t discuss:

          - **[Espresso Web](https://google.github.io/android-testing-support-library/docs/espresso/web/)** - An API for writing automated tests for apps that contain one or more WebViews. Espresso Web reduce the boilerplate code needed to interact with these WebViews.

          - **[Espresso for RecylcerViews](https://google.github.io/android-testing-support-library/docs/espresso/lists/#recyclerviews)** - Espresso testing for RecyclerViews works different from testing AdapterViews. It doesn’t use onData; instead, has actions that scroll to positions or perform actions on items.

          ### Espresso Test Recorder
          Android Studio also has a an [Espresso Test Recorder](https://developer.android.com/studio/test/espresso-test-recorder.html) which allows you to create UI tests by simply recording your interactions on a device and the Test Recorder will autogenerate the test code for you!

          The tests are written using the same  Espresso Testing framework that we just covered. At the time of creating this content there are certain limitations to the Test Recorder (e.g. it can't yet handle `IdlingResources`, it has limited number of assertions available). However, armed with the knowledge of how to write your own Espresso tests from scratch, you’ll be better equipped to understand, modify, and update any auto-generated tests if you do decide to use the Test Recorder.

          Here are some helpful resources that can help you if you need to implement these in the future:

          - [Espresso Web](https://google.github.io/android-testing-support-library/docs/espresso/web/) - Examples  [Here](https://github.com/googlesamples/android-testing/tree/master/ui/espresso/WebBasicSample) and [Here](https://google.github.io/android-testing-support-library/docs/espresso/web/index.html) 
          - [Espresso for RecylcerViews](https://google.github.io/android-testing-support-library/docs/espresso/lists/#recyclerviews) - Example [here](https://google.github.io/android-testing-support-library/docs/espresso/lists/index.html#recyclerviews)
          - Using the [Espresso Test Recorder](https://developer.android.com/studio/test/espresso-test-recorder.html)
        instructor_notes: ''
        resources: null
  - id: 278733
    key: 3183715d-7805-4a77-a817-5c2b52b8a7e8
    locale: en-us
    version: 1.0.0
    title: The Wider World of Testing
    semantic_type: Concept
    updated_at: 'Tue Apr 11 2017 19:25:30 GMT+0000 (UTC)'
    is_public: true
    resources: null
    _atoms_ids:
      - 279179
      - 279240
      - 279193
      - 279239
      - 279274
      - 279266
      - 279258
    atoms:
      - id: 279179
        key: 7b43a193-bc4b-417e-a8ea-90047300ff02
        locale: en-us
        version: 1.0.0
        title: null
        semantic_type: TextAtom
        updated_at: 'Tue Apr 18 2017 20:53:05 GMT+0000 (UTC)'
        is_public: true
        text: |-
          # The Wider World of Testing

          ## Instrumented Unit Tests

          We just covered *User Interface Tests* which are a type of *Instrumented Unit Tests*. These are tests that must be run on an Android device or emulator because they depend on the Android framework.

          For example, in a calculator app, checking that the correct operation triggers when a user clicks on the UI requires the Android framework. 

          Instrumented tests run using the AndroidJUnitRunner which controls launching the app and running UI tests on it. 

          As we've seen, Instrumented Tests live under* module-name/src/androidTest/java/*
        instructor_notes: ''
        resources: null
      - id: 279240
        key: f31a818a-2978-40b8-9ab4-5657ca6346bb
        locale: en-us
        version: 1.0.0
        title: null
        semantic_type: ImageAtom
        updated_at: 'Fri Mar 10 2017 21:37:58 GMT+0000 (UTC)'
        is_public: true
        url: 'https://d17h27t6h515a5.cloudfront.net/topher/2017/March/58c31c9c_screen-shot-2017-03-10-at-1.37.15-pm/screen-shot-2017-03-10-at-1.37.15-pm.png'
        width: 507
        height: 45
        caption: ''
        resources: null
        instructor_notes: null
      - id: 279193
        key: d3811313-8853-4171-b272-09043da9d04a
        locale: en-us
        version: 1.0.0
        title: null
        semantic_type: TextAtom
        updated_at: 'Tue May 09 2017 21:58:44 GMT+0000 (UTC)'
        is_public: true
        text: |-
          ## Local Unit Tests

          There are other tests such as *Local Unit Tests* which you may have seen included in projects such as the Sunshine app. Local Unit Tests are Unit tests that are only run on the local Java Virtual Machine and don’t necessarily depend on the Android framework. 

          For example, say you have a class in a Calculator Android project that is used for the calculation operations. Testing these calculation methods is not dependent on the Android framework. 

          Instead, you’ll use the JUnit testing framework for Java to just test that local test. 

          Local Unit tests live in the *module-name/src/test/java/* of the project folders.
        instructor_notes: ''
        resources: null
      - id: 279239
        key: 5ad267bf-cc62-42c4-879f-90af1e41e8d8
        locale: en-us
        version: 1.0.0
        title: null
        semantic_type: ImageAtom
        updated_at: 'Fri Mar 10 2017 21:43:00 GMT+0000 (UTC)'
        is_public: true
        url: 'https://d17h27t6h515a5.cloudfront.net/topher/2017/March/58c31bbf_screen-shot-2017-03-10-at-1.33.35-pm/screen-shot-2017-03-10-at-1.33.35-pm.png'
        width: 1018
        height: 88
        caption: ''
        resources: null
        instructor_notes: null
      - id: 279274
        key: 22a06947-112c-4057-97e2-f23f06ffc7b0
        locale: en-us
        version: 1.0.0
        title: null
        semantic_type: ImageAtom
        updated_at: 'Fri Mar 10 2017 22:18:32 GMT+0000 (UTC)'
        is_public: true
        url: 'https://d17h27t6h515a5.cloudfront.net/topher/2017/March/58c32587_screen-shot-2017-03-10-at-2.15.16-pm/screen-shot-2017-03-10-at-2.15.16-pm.png'
        width: 836
        height: 374
        caption: 'Image from: Android Developers https://developer.android.com/training/testing/start/index.html'
        resources: null
        instructor_notes: null
      - id: 279266
        key: 5d838c1c-2557-4044-bbcd-9071ef0c27cd
        locale: en-us
        version: 1.0.0
        title: null
        semantic_type: TextAtom
        updated_at: 'Fri Mar 10 2017 22:11:36 GMT+0000 (UTC)'
        is_public: true
        text: |-
          ## JUnit
          [JUnit](http://junit.org/junit4/) is a framework used to test discrete pieces of code (usually methods). 

          Android provides JUnit testing support via the [AndroidJUnit Test Runner](https://developer.android.com/topic/libraries/testing-support-library/index.html#ajur-junit). 
        instructor_notes: ''
        resources: null
      - id: 279258
        key: 105a2fe7-b0be-434f-9a4c-820f17017a99
        locale: en-us
        version: 1.0.0
        title: null
        semantic_type: TextAtom
        updated_at: 'Fri Mar 10 2017 22:14:49 GMT+0000 (UTC)'
        is_public: true
        text: |-
          ## Android Testing Support Library

          Espresso is just one test automation tool provided by the Android Testing Support Library. This Library also includes AndroidJUnitRunner and UI Automator. 

          - [AndroidJUnit](https://developer.android.com/topic/libraries/testing-support-library/index.html#AndroidJUnitRunner) - A test runner that runs JUnit style tests on Android devices. When used in Espresso tests, it controls launching the app and running UI tests.
          - [Espresso](https://developer.android.com/topic/libraries/testing-support-library/index.html#Espresso) - Framework for functional UI Testing
          - [UI Automator](https://developer.android.com/topic/libraries/testing-support-library/index.html#UIAutomator) - Framework for cross-app functional UI testing between the system and installed apps

          ## Learn More
          - [Explore Testing Types](https://developer.android.com/training/testing/start/index.html)
          - [Android Testing Support Library](https://developer.android.com/topic/libraries/testing-support-library/index.html#ajur-junit)
        instructor_notes: ''
        resources: null
  - id: 278734
    key: 19278172-7e08-4c3e-9e96-f89331635208
    locale: en-us
    version: 1.0.0
    title: Espresso Outro
    semantic_type: Concept
    updated_at: 'Mon Jun 12 2017 22:57:30 GMT+0000 (UTC)'
    is_public: true
    resources: null
    _atoms_ids:
      - 330479
    atoms:
      - id: 330479
        key: 85bd86a4-32d8-49ed-a888-e1270c804c44
        locale: en-us
        version: 1.0.0
        title: Espresso Outro
        semantic_type: VideoAtom
        updated_at: 'Wed Jun 28 2017 00:39:25 GMT+0000 (UTC)'
        is_public: true
        tags: []
        instructor_notes: ''
        resources: null
        video:
          id: '58106'
          youtube_id: 2yx0TEq0MNM
          subtitles:
            - url: 'https://s3.amazonaws.com/video.udacity-data.com/topher/2017/June/593f1c15_26-outro-hs-1/subtitles/lang_en_vs1.srt'
              language_code: en
          transcodings:
            uri_480p_mp4: 'http://video.udacity-data.com.s3.amazonaws.com/topher/2017/June/593f1c15_26-outro-hs-1/26-outro-hs-1_480p.mp4'
            uri_480p_1000kbps_mp4: 'http://video.udacity-data.com.s3.amazonaws.com/topher/2017/June/593f1c15_26-outro-hs-1/26-outro-hs-1_480p_1000kbps.mp4'
            uri_480p_ogg: 'http://video.udacity-data.com.s3.amazonaws.com/topher/2017/June/593f1c15_26-outro-hs-1/26-outro-hs-1_480p.ogg'
            uri_720p_mp4: 'http://video.udacity-data.com.s3.amazonaws.com/topher/2017/June/593f1c15_26-outro-hs-1/26-outro-hs-1_720p.mp4'
            uri_hls: 'http://video.udacity-data.com.s3.amazonaws.com/topher/2017/June/593f1c15_26-outro-hs-1/hls/playlist.m3u8'
