id: 339107
key: 280d5ccf-6440-4d27-97d1-d9f6118359bc
locale: zh-cn
version: 1.0.0
title: Review a Repo's History
semantic_type: Lesson
updated_at: 'Fri Jun 23 2017 07:35:00 GMT+0000 (UTC)'
is_public: true
image:
  url: 'https://d17h27t6h515a5.cloudfront.net/topher/2017/April/58fa7637_lesson-teal/lesson-teal.png'
  width: 500
  height: 500
video: null
summary: Knowing how to review an existing Git repository's history of commits is extremely important. You'll learn how to do just that in this lesson.
lesson_type: Classroom
duration: 120
is_project_lesson: false
_concepts_ids:
  - 339078
  - 339079
  - 339080
  - 339081
  - 339082
  - 339084
  - 339083
_project_id: null
concepts:
  - id: 339078
    key: 212f2bac-e7e2-4ca9-b93e-91a9e57926dd
    locale: zh-cn
    version: 1.0.0
    title: Intro
    semantic_type: Concept
    updated_at: 'Fri Jun 23 2017 07:34:59 GMT+0000 (UTC)'
    is_public: true
    resources: null
    _atoms_ids:
      - 338801
    atoms:
      - id: 338801
        key: 878b87fa-c1b2-46e2-af3f-b68b27b57e4c
        locale: zh-cn
        version: 1.0.0
        title: Gitfinal L3 01 A Repository'S History - Intro
        semantic_type: VideoAtom
        updated_at: 'Wed Jun 28 2017 00:37:12 GMT+0000 (UTC)'
        is_public: true
        tags: []
        instructor_notes: ''
        resources: null
        video:
          id: '51661'
          youtube_id: UBmg3syQS0E
          subtitles: null
          transcodings:
            uri_480p_mp4: 'http://video.udacity-data.com.s3.amazonaws.com/topher/2017/March/58cc8177_gitfinal-l3-01-a-repositorys-history-intro/gitfinal-l3-01-a-repositorys-history-intro_480p.mp4'
            uri_480p_1000kbps_mp4: 'http://video.udacity-data.com.s3.amazonaws.com/topher/2017/March/58cc8177_gitfinal-l3-01-a-repositorys-history-intro/gitfinal-l3-01-a-repositorys-history-intro_480p_1000kbps.mp4'
            uri_480p_ogg: 'http://video.udacity-data.com.s3.amazonaws.com/topher/2017/March/58cc8177_gitfinal-l3-01-a-repositorys-history-intro/gitfinal-l3-01-a-repositorys-history-intro_480p.ogg'
            uri_720p_mp4: 'http://video.udacity-data.com.s3.amazonaws.com/topher/2017/March/58cc8177_gitfinal-l3-01-a-repositorys-history-intro/gitfinal-l3-01-a-repositorys-history-intro_720p.mp4'
            uri_hls: 'http://video.udacity-data.com.s3.amazonaws.com/topher/2017/March/58cc8177_gitfinal-l3-01-a-repositorys-history-intro/hls/playlist.m3u8'
  - id: 339079
    key: ee7a6ad0-b3b6-42b4-9823-a79f7c6d0f27
    locale: zh-cn
    version: 1.0.0
    title: Displaying A Repository's Commits
    semantic_type: Concept
    updated_at: 'Fri Jun 23 2017 07:34:59 GMT+0000 (UTC)'
    is_public: true
    resources: null
    _atoms_ids:
      - 338802
      - 338803
      - 338804
      - 338805
      - 338806
      - 338807
      - 338808
      - 338809
      - 338810
      - 338811
      - 338812
      - 338813
      - 338814
      - 338815
      - 338816
      - 338817
      - 338818
    atoms:
      - id: 338802
        key: 71d14157-98ee-4b4e-98e9-be7233e5a42d
        locale: zh-cn
        version: 1.0.0
        title: null
        semantic_type: TextAtom
        updated_at: 'Fri Jun 23 2017 07:34:58 GMT+0000 (UTC)'
        is_public: true
        text: |-
          > TIP: In lesson 2 you used `git clone` to clone the blog project. This is the project we'll be using in this lesson. If you skipped cloning the project in the previous lesson, then run the following command to get the project:

          > ```bash
          $ git clone https://github.com/udacity/course-git-blog-project
          ```

          > Don't forget to `cd` into the project after you've cloned it.

          > Got questions about this, check out the [Clone An Existing Repo concept](https://classroom.udacity.com/courses/ud123/lessons/437a88fc-15f5-48b8-a6a5-0cf3347e6183/concepts/59082be0-c1af-4839-8ae5-0a182dc5bfe8#) or ask it in the [forums](https://discussions.udacity.com/c/nd001-git-github)!
        instructor_notes: ''
        resources: null
      - id: 338803
        key: da48d463-aff4-4aa8-9408-7bd77b471ff1
        locale: zh-cn
        version: 1.0.0
        title: 'First Things, First'
        semantic_type: RadioQuizAtom
        updated_at: 'Fri Jun 23 2017 07:34:58 GMT+0000 (UTC)'
        is_public: true
        question:
          prompt: 'After you’ve cloned the blog project repository, navigate to the project’s directory using the command line. Once you’re located inside the blog project, what is the very first thing you should do in a Git repository?'
          correct_feedback: You should _always_ run the `git status` command. Especially when returning to a project after a period of time.
          video_feedback: null
          default_feedback: 'Good guess, but another choice might be better!'
          answers:
            - id: a1486769275063
              text: run the `git status` command
              is_correct: true
              incorrect_feedback: null
            - id: a1486769282496
              text: open the project in a code editor
              is_correct: false
              incorrect_feedback: 'This is a good 2nd step. But when working with a Git repo, there''s a specific Git command that you should run, first!'
            - id: a1486769283048
              text: decide what new feature to work on
              is_correct: false
              incorrect_feedback: 'This is a good idea! But when working with a Git repo, there''s a specific Git command that you should run, first!'
      - id: 338804
        key: 92c7b02d-43d5-40c6-a649-a872041fb2da
        locale: zh-cn
        version: 1.0.0
        title: null
        semantic_type: ImageAtom
        updated_at: 'Fri Jun 23 2017 07:34:58 GMT+0000 (UTC)'
        is_public: true
        url: 'https://d17h27t6h515a5.cloudfront.net/topher/2017/February/589e4d46_ud123-l3-git-status-output/ud123-l3-git-status-output.png'
        width: 1756
        height: 1398
        caption: _The Terminal application showing the output of the `git status` command._
        resources: null
        instructor_notes: null
      - id: 338805
        key: 28ebdfe8-e4cf-4fba-bac8-0748a0066c6a
        locale: zh-cn
        version: 1.0.0
        title: null
        semantic_type: TextAtom
        updated_at: 'Fri Jun 23 2017 07:34:58 GMT+0000 (UTC)'
        is_public: true
        text: |-
          ## Git Status & Opening The Project

          You can see that `git status` tells us that there's "nothing to commit, working directory clean". That means we're good to go ahead and check out the project!

          So open the project in your favorite code editor. If you haven't yet, take a minute or two to look at the project – look over the CSS and the JavaScript files, but look particularly at the HTML file. 
        instructor_notes: ''
        resources: null
      - id: 338806
        key: 86ab129a-6958-4eca-a7f4-8c308be23b4a
        locale: zh-cn
        version: 1.0.0
        title: null
        semantic_type: ImageAtom
        updated_at: 'Fri Jun 23 2017 07:34:58 GMT+0000 (UTC)'
        is_public: true
        url: 'https://d17h27t6h515a5.cloudfront.net/topher/2017/February/589e4d9d_ud123-l3-project-in-editor/ud123-l3-project-in-editor.png'
        width: 2986
        height: 1754
        caption: _The course's Blog project open in a code editor. The `index.html` file is being displayed._
        resources: null
        instructor_notes: null
      - id: 338807
        key: e093342f-8503-46e9-bbf3-df50ad6873c0
        locale: zh-cn
        version: 1.0.0
        title: When Was The Heading Added?
        semantic_type: RadioQuizAtom
        updated_at: 'Fri Jun 23 2017 07:34:58 GMT+0000 (UTC)'
        is_public: true
        question:
          prompt: |-
            In the `index.html` file, take a look at the `<h1>Expedition</h1>` heading around line 15.

            Based on what you can see here when was that heading added?
          correct_feedback: That's it! There's no way to tell just by looking at the code.
          video_feedback: null
          default_feedback: null
          answers:
            - id: a1486769594727
              text: 'It was added on a Tuesday. Yeah, a Tuesday.'
              is_correct: false
              incorrect_feedback: 'Nope, it wasn''t a Tuesday.'
            - id: a1486769626903
              text: 3 weeks ago
              is_correct: false
              incorrect_feedback: 'Wrong! Try again :-)'
            - id: a1486769627713
              text: ¯\\_(ツ)_/¯ I can't tell that by looking at the code.
              is_correct: true
              incorrect_feedback: null
      - id: 338808
        key: b38e46e0-de3f-4e1c-9d22-6e456d97f097
        locale: zh-cn
        version: 1.0.0
        title: Who Added The Heading?
        semantic_type: RadioQuizAtom
        updated_at: 'Fri Jun 23 2017 07:34:58 GMT+0000 (UTC)'
        is_public: true
        question:
          prompt: 'Ok, so we''re not quite sure _when_ the heading was added. How about an easier question - _who_ added this heading? Again, what can you tell from just looking at the code?'
          correct_feedback: 'Yep! This is the right answer. You can guess and _assume_ that I added the heading, but you can''t know for sure just by looking at the code.'
          video_feedback: null
          default_feedback: null
          answers:
            - id: a1486769793801
              text: Richard did!
              is_correct: false
              incorrect_feedback: 'Just because I created the course, are you _absolutely sure_ that *I* added the heading?'
            - id: a1486769810745
              text: No clue
              is_correct: true
              incorrect_feedback: null
      - id: 338809
        key: e8dd4903-7b47-4128-b2c0-d29d833df458
        locale: zh-cn
        version: 1.0.0
        title: null
        semantic_type: TextAtom
        updated_at: 'Fri Jun 23 2017 07:34:58 GMT+0000 (UTC)'
        is_public: true
        text: |-
          ## The Git Log Command

          Finding the answers to these questions is exactly what `git log` can do for us! Instead of explaining everything that it can do for us, let's experience it! Go ahead and run the `git log` command in the terminal:

          ```bash
          $ git log
          ```

          The terminal should display the following screen.
        instructor_notes: ''
        resources: null
      - id: 338810
        key: 131ad097-d950-4beb-bfc9-268bc10d4ff9
        locale: zh-cn
        version: 1.0.0
        title: null
        semantic_type: ImageAtom
        updated_at: 'Fri Jun 23 2017 07:34:58 GMT+0000 (UTC)'
        is_public: true
        url: 'https://d17h27t6h515a5.cloudfront.net/topher/2017/February/589e4f6a_ud123-l3-git-log-output/ud123-l3-git-log-output.png'
        width: 1756
        height: 1398
        caption: _The Terminal application showing the output of the `git log` command._
        resources: null
        instructor_notes: null
      - id: 338811
        key: d4f294dd-7f9b-418b-9afc-d66650b1f57d
        locale: zh-cn
        version: 1.0.0
        title: Nd016 WebND Ud123 Gitcourse BETAMOJITO L3 11 Git Log Output Explained
        semantic_type: VideoAtom
        updated_at: 'Wed Jun 28 2017 00:37:11 GMT+0000 (UTC)'
        is_public: true
        tags: []
        instructor_notes: ''
        resources: null
        video:
          id: '51029'
          youtube_id: xJfurQcVYfo
          subtitles: null
          transcodings:
            uri_480p_mp4: 'http://video.udacity-data.com.s3.amazonaws.com/topher/2017/March/58b9dbfe_nd016-webnd-ud123-gitcourse-betamojito-l3-11-git-log-output-explained/nd016-webnd-ud123-gitcourse-betamojito-l3-11-git-log-output-explained_480p.mp4'
            uri_480p_1000kbps_mp4: 'http://video.udacity-data.com.s3.amazonaws.com/topher/2017/March/58b9dbfe_nd016-webnd-ud123-gitcourse-betamojito-l3-11-git-log-output-explained/nd016-webnd-ud123-gitcourse-betamojito-l3-11-git-log-output-explained_480p_1000kbps.mp4'
            uri_480p_ogg: 'http://video.udacity-data.com.s3.amazonaws.com/topher/2017/March/58b9dbfe_nd016-webnd-ud123-gitcourse-betamojito-l3-11-git-log-output-explained/nd016-webnd-ud123-gitcourse-betamojito-l3-11-git-log-output-explained_480p.ogg'
            uri_720p_mp4: 'http://video.udacity-data.com.s3.amazonaws.com/topher/2017/March/58b9dbfe_nd016-webnd-ud123-gitcourse-betamojito-l3-11-git-log-output-explained/nd016-webnd-ud123-gitcourse-betamojito-l3-11-git-log-output-explained_720p.mp4'
            uri_hls: 'http://video.udacity-data.com.s3.amazonaws.com/topher/2017/March/58b9dbfe_nd016-webnd-ud123-gitcourse-betamojito-l3-11-git-log-output-explained/hls/playlist.m3u8'
      - id: 338812
        key: eb768f79-dd19-4c3d-a580-fbb2a224e6dd
        locale: zh-cn
        version: 1.0.0
        title: null
        semantic_type: TextAtom
        updated_at: 'Fri Jun 23 2017 07:34:58 GMT+0000 (UTC)'
        is_public: true
        text: |-
          ## Navigating The Log

          If you're not used to a pager on the command line, navigating in <a href="https://en.wikipedia.org/wiki/Less_(Unix)" target="_blank">Less</a> can be a bit odd. Here are some helpful keys:

          * to scroll **down**, press
            * `j` or  `↓` to move _down_ one line at a time
            * `d` to move by half the page screen
            * `f` to move by a whole page screen
          * to scroll **up**, press
            * `k` or `↑` to move _up_ one line at a time
            * `u` to move by half the page screen
            * `b` to move by a whole page screen
          * press `q` to **quit** out of the log (returns to the regular command prompt)
        instructor_notes: ''
        resources: null
      - id: 338813
        key: 45b32f03-9bab-47c2-a5c8-2484188c2efb
        locale: zh-cn
        version: 1.0.0
        title: null
        semantic_type: TextAtom
        updated_at: 'Fri Jun 23 2017 07:34:58 GMT+0000 (UTC)'
        is_public: true
        text: Git records _a ton_ of information when a commit is made. See if you can use `git log` to answer the following questions!
        instructor_notes: ''
        resources: null
      - id: 338814
        key: fe6d1537-f0a9-4a4a-a3ba-030190f415ed
        locale: zh-cn
        version: 1.0.0
        title: Who Made The Commit?
        semantic_type: RadioQuizAtom
        updated_at: 'Fri Jun 23 2017 07:34:58 GMT+0000 (UTC)'
        is_public: true
        question:
          prompt: Use `git log` to find the commit that has a SHA that starts with `f9720a`. Who made the commit?
          correct_feedback: 'Yep! I made all of the commits, so you could''ve guessed on this one ;-)'
          video_feedback: null
          default_feedback: That's not right! Review the output that `git log` displays to answer this question.
          answers:
            - id: a1486770186155
              text: James Parkes
              is_correct: false
              incorrect_feedback: null
            - id: a1486770215935
              text: Richard Kalehoff
              is_correct: true
              incorrect_feedback: null
            - id: a1486770216498
              text: Colt Steele
              is_correct: false
              incorrect_feedback: null
            - id: a1486770217058
              text: Julia Van Cleve
              is_correct: false
              incorrect_feedback: null
            - id: a1486770217623
              text: Godzilla McFiddlebrunches
              is_correct: false
              incorrect_feedback: He tried to help!
      - id: 338815
        key: 891a7cac-9424-4c13-8a1b-04d4c15d961e
        locale: zh-cn
        version: 1.0.0
        title: What Is The Message?
        semantic_type: ValidatedQuizAtom
        updated_at: 'Fri Jun 23 2017 07:34:58 GMT+0000 (UTC)'
        is_public: true
        question:
          prompt: Use `git log` to find the commit with the SHA that starts with `8aa6668`. What is the message for that commit?
          default_feedback: 'That doesn''t look right. When looking at the output of `git log`, first it''s commit''s SHA, then the author, then the date, and _then_ the message. So find the correct SHA, and look a few lines below it.'
          correct_feedback: That's right! Great job!
          video_feedback: null
          matchers:
            - semantic_type: RegexMatcher
              is_correct: true
              expression: \s*Convert social links from text to images\s*
              expression_description: null
              flags: ''
              incorrect_feedback: null
      - id: 338816
        key: e42b6260-1a65-438a-8bbc-dbd8d54f030f
        locale: zh-cn
        version: 1.0.0
        title: When Was The Commit Made?
        semantic_type: RadioQuizAtom
        updated_at: 'Fri Jun 23 2017 07:34:58 GMT+0000 (UTC)'
        is_public: true
        question:
          prompt: Use `git log` to find the commit with the SHA that starts with `f9720a9`. When was that commit made?
          correct_feedback: "That's it! Great job! \uD83D\uDC4D\uD83C\uDFFC"
          video_feedback: null
          default_feedback: 'That doesn''t look right. When looking at the output of `git log`, first it''s the commit''s SHA, then the author, _then_ the date. So find the correct SHA, and look a couple lines below it.'
          answers:
            - id: a1486770633648
              text: 'Mon Dec 5 10:25:22 2016'
              is_correct: false
              incorrect_feedback: null
            - id: a1486770644087
              text: 'Mon Dec 5 10:11:51 2016'
              is_correct: true
              incorrect_feedback: null
            - id: a1486770644615
              text: 'Sat Dec 3 16:09:00 2016'
              is_correct: false
              incorrect_feedback: null
            - id: a1486770645166
              text: 'Fri Dec 2 16:58:27 2016'
              is_correct: false
              incorrect_feedback: null
      - id: 338817
        key: d4b7fbe2-3907-4465-bf3e-aa02c8ebe5b7
        locale: zh-cn
        version: 1.0.0
        title: What Is The SHA?
        semantic_type: ValidatedQuizAtom
        updated_at: 'Fri Jun 23 2017 07:34:58 GMT+0000 (UTC)'
        is_public: true
        question:
          prompt: Use `git log` to find the commit that has the message `Set article timestamp color`. Which commit belongs to that SHA? Provide the first 7 characters of the SHA.
          default_feedback: 'That doesn''t look right. When looking at the output of `git log`, first it''s commit''s SHA, then the author, then the date, _then_ the message. So find the message and look a few lines above it.'
          correct_feedback: That's it!
          video_feedback: null
          matchers:
            - semantic_type: RegexMatcher
              is_correct: true
              expression: ^5de135a$
              expression_description: null
              flags: ''
              incorrect_feedback: null
      - id: 338818
        key: 851aca9d-60eb-4c16-95e7-27461898ed82
        locale: zh-cn
        version: 1.0.0
        title: null
        semantic_type: TextAtom
        updated_at: 'Fri Jun 23 2017 07:34:58 GMT+0000 (UTC)'
        is_public: true
        text: |-
          ## Git Log Recap

          Fantastic job! Do you feel your Git-power growing? 

          Let's do a quick recap of the `git log` command. The `git log` command is used to display all of the commits of a repository.

          ```bash
          $ git log
          ```

          By _default_, this command displays:

          * the SHA
          * the author
          * the date
          * and the message

          ...of every commit in the repository. I stress the "By default" part of what Git displays because the `git log` command can display a lot more information than just this. 

          Git uses the command line pager, Less, to page through all of the information. The important keys for Less are:

          * to scroll down by a line, use `j` or `↓` 
          * to scroll up by a line, use `k` or `↑` 
          * to scroll down by a page, use the spacebar or the Page Down button
          * to scroll up by a page, use `b` or the Page Up button
          * to quit, use `q` 

          We'll increase our `git log`-wielding abilities in the next lesson when we look at displaying more info.

          Why wait?!? Click the link to move to the next lesson!
        instructor_notes: ''
        resources: null
  - id: 339080
    key: aff71bac-d552-4498-aee2-f26cf30f5e52
    locale: zh-cn
    version: 1.0.0
    title: Changing How Git Log Displays Information
    semantic_type: Concept
    updated_at: 'Fri Jun 23 2017 07:34:59 GMT+0000 (UTC)'
    is_public: true
    resources: null
    _atoms_ids:
      - 338819
      - 338820
      - 338821
      - 338822
      - 338823
      - 338824
      - 338825
      - 338826
      - 338827
      - 338828
    atoms:
      - id: 338819
        key: 76abb929-8657-47ce-ba30-4a311f62e323
        locale: zh-cn
        version: 1.0.0
        title: null
        semantic_type: TextAtom
        updated_at: 'Fri Jun 23 2017 07:34:58 GMT+0000 (UTC)'
        is_public: true
        text: |-
          You made it all this way - congrats on getting this far! Seriously! Learning Git is a challenging undertaking. I applaud you on your perseverance.

          Take a look at this output from running `git log`:
        instructor_notes: ''
        resources: null
      - id: 338820
        key: 1b6ca2f1-b1a7-4219-9eb4-aea43db96811
        locale: zh-cn
        version: 1.0.0
        title: null
        semantic_type: ImageAtom
        updated_at: 'Fri Jun 23 2017 07:34:58 GMT+0000 (UTC)'
        is_public: true
        url: 'https://d17h27t6h515a5.cloudfront.net/topher/2017/February/589e4f6a_ud123-l3-git-log-output/ud123-l3-git-log-output.png'
        width: 1756
        height: 1398
        caption: _The Terminal application showing the output from running `git log`._
        resources: null
        instructor_notes: null
      - id: 338821
        key: 42bd1825-eb16-4f1f-b047-4f85d5818ed5
        locale: zh-cn
        version: 1.0.0
        title: null
        semantic_type: TextAtom
        updated_at: 'Fri Jun 23 2017 07:34:58 GMT+0000 (UTC)'
        is_public: true
        text: |-
          We've been looking closely at all the detailed information that `git log` displays. But now, take a step back and look at all of the information as a whole.

          Let's think about some of these questions:

          * **the SHA** - `git log` will display the complete SHA for every single commit. Each SHA is unique, so we don't really need to see the _entire_ SHA. We could get by perfectly fine with knowing just the first 6-8 characters. Wouldn't it be great if we could save some space and show just the first 5 or so characters of the SHA?
          * **the author** - the `git log` output displays the commit author for _every single commit_! It could be different for other repositories that have multiple people collaborating together, but for this one, there's only one person making all of the commits, so the commit author will be identical for all of them. Do we need to see the author for each one? What if we wanted to hide that information?
          * **the date** - By default, `git log` will display the date for each commit. But do we really care about the commit's date? Knowing the date might be important occasionally, but typically knowing the date isn't vitally important and can be ignored in a lot of cases. Is there a way we could hide that to save space?
          * **the commit message** - this is one of the most important parts of a commit message...we usually always want to see this

          What could we do here to not waste a lot of space and make the output smaller? We can use a **flag**.
        instructor_notes: ''
        resources: null
      - id: 338822
        key: 4a4ef9c5-e38e-4aeb-974f-147938b67505
        locale: zh-cn
        version: 1.0.0
        title: null
        semantic_type: TextAtom
        updated_at: 'Fri Jun 23 2017 07:34:58 GMT+0000 (UTC)'
        is_public: true
        text: |-
          > TIP: This isn't a course on the command line, but a flag is used to alter how a program functions. For example, the `ls` command will list all of the files in the current directory. The `ls` command has a `-l` flag (i.e. `ls -l`) that runs the same `ls` command but alters how it works; it now displays the information in the _long_ format (the `-l` for _long_).

          > Flags can be used to alter how a program functions and/or what is displayed. To learn more about command line programs and flags, check out our course [Linux Command Line Basics](https://www.udacity.com/course/linux-command-line-basics--ud595). 
        instructor_notes: ''
        resources: null
      - id: 338823
        key: 0970acdc-babb-4213-96c8-46654d3d8502
        locale: zh-cn
        version: 1.0.0
        title: null
        semantic_type: TextAtom
        updated_at: 'Fri Jun 23 2017 07:34:58 GMT+0000 (UTC)'
        is_public: true
        text: |-
          ## git log --oneline

          The `git log` command has a flag that can be used to alter how it displays the repository's information. That flag is `--oneline`:

          ```bash
          $ git log --oneline
          ```

          Check out how different the output is!
        instructor_notes: ''
        resources: null
      - id: 338824
        key: c3436d25-85d3-4b19-b077-18196f3178eb
        locale: zh-cn
        version: 1.0.0
        title: null
        semantic_type: ImageAtom
        updated_at: 'Fri Jun 23 2017 07:34:58 GMT+0000 (UTC)'
        is_public: true
        url: 'https://d17h27t6h515a5.cloudfront.net/topher/2017/February/589e545c_ud123-l3-git-log-vs-git-log-oneline/ud123-l3-git-log-vs-git-log-oneline.png'
        width: 3184
        height: 1172
        caption: _Two Terminal applications side-by-side. The left one shows the result of the `git log` command with all of the information while the right one shows the result of the `git log --oneline` command with just the short SHA and the commit message._
        resources: null
        instructor_notes: null
      - id: 338825
        key: c7d5fa94-9d24-4184-9d4b-7103f705d323
        locale: zh-cn
        version: 1.0.0
        title: Nd016 WebND Ud123 Gitcourse BETAMOJITO L3 25 Git Log Vs Git Log --Oneline Walkthru
        semantic_type: VideoAtom
        updated_at: 'Wed Jun 28 2017 00:37:11 GMT+0000 (UTC)'
        is_public: true
        tags: []
        instructor_notes: ''
        resources: null
        video:
          id: '51030'
          youtube_id: rn6v_QgYFnU
          subtitles: null
          transcodings:
            uri_480p_mp4: 'http://video.udacity-data.com.s3.amazonaws.com/topher/2017/March/58b9dc01_nd016-webnd-ud123-gitcourse-betamojito-l3-25-git-log-vs-git-log-oneline-walkthru/nd016-webnd-ud123-gitcourse-betamojito-l3-25-git-log-vs-git-log-oneline-walkthru_480p.mp4'
            uri_480p_1000kbps_mp4: 'http://video.udacity-data.com.s3.amazonaws.com/topher/2017/March/58b9dc01_nd016-webnd-ud123-gitcourse-betamojito-l3-25-git-log-vs-git-log-oneline-walkthru/nd016-webnd-ud123-gitcourse-betamojito-l3-25-git-log-vs-git-log-oneline-walkthru_480p_1000kbps.mp4'
            uri_480p_ogg: 'http://video.udacity-data.com.s3.amazonaws.com/topher/2017/March/58b9dc01_nd016-webnd-ud123-gitcourse-betamojito-l3-25-git-log-vs-git-log-oneline-walkthru/nd016-webnd-ud123-gitcourse-betamojito-l3-25-git-log-vs-git-log-oneline-walkthru_480p.ogg'
            uri_720p_mp4: 'http://video.udacity-data.com.s3.amazonaws.com/topher/2017/March/58b9dc01_nd016-webnd-ud123-gitcourse-betamojito-l3-25-git-log-vs-git-log-oneline-walkthru/nd016-webnd-ud123-gitcourse-betamojito-l3-25-git-log-vs-git-log-oneline-walkthru_720p.mp4'
            uri_hls: 'http://video.udacity-data.com.s3.amazonaws.com/topher/2017/March/58b9dc01_nd016-webnd-ud123-gitcourse-betamojito-l3-25-git-log-vs-git-log-oneline-walkthru/hls/playlist.m3u8'
      - id: 338826
        key: e177a603-0dd1-4c2e-a3bc-4bcf547e0278
        locale: zh-cn
        version: 1.0.0
        title: Quitting git log --oneline
        semantic_type: RadioQuizAtom
        updated_at: 'Fri Jun 23 2017 07:34:58 GMT+0000 (UTC)'
        is_public: true
        question:
          prompt: You're deep in the weeds of the `git log --oneline` command and want to get out of the `git log --oneline` output and return to the regular command prompt. What do you press on the keyboard to return to the regular command prompt?
          correct_feedback: 'That''s it! Remember, the `q` key gets out of the `git log` view. We''re still using `git log` but are just passing a flag to change how the information is displayed. So the `q` key still works and returns the terminal to the command prompt.'
          video_feedback: null
          default_feedback: 'Did you try this out in your terminal? Did it actually quit out of the `git log --oneline` view and take you back to the command prompt? It didn''t work for me, so try another one instead.'
          answers:
            - id: a1486771373266
              text: the `esc` key
              is_correct: false
              incorrect_feedback: null
            - id: a1486771380667
              text: the `q` key
              is_correct: true
              incorrect_feedback: null
            - id: a1486771381172
              text: the `ctrl` + `c` keys
              is_correct: false
              incorrect_feedback: null
            - id: a1486771381724
              text: the `ctrl` + `d` keys
              is_correct: false
              incorrect_feedback: null
      - id: 338827
        key: b419d687-5144-45bd-8f93-4869e6de515b
        locale: zh-cn
        version: 1.0.0
        title: Nd016 WebND Ud123 Gitcourse BETAMOJITO L3 27 Confession Corner
        semantic_type: VideoAtom
        updated_at: 'Wed Jun 28 2017 00:37:11 GMT+0000 (UTC)'
        is_public: true
        tags: []
        instructor_notes: ''
        resources: null
        video:
          id: '51031'
          youtube_id: xtsugblSwrU
          subtitles: null
          transcodings:
            uri_480p_mp4: 'http://video.udacity-data.com.s3.amazonaws.com/topher/2017/March/58b9dc0b_nd016-webnd-ud123-gitcourse-betamojito-l3-27-confession-corner/nd016-webnd-ud123-gitcourse-betamojito-l3-27-confession-corner_480p.mp4'
            uri_480p_1000kbps_mp4: 'http://video.udacity-data.com.s3.amazonaws.com/topher/2017/March/58b9dc0b_nd016-webnd-ud123-gitcourse-betamojito-l3-27-confession-corner/nd016-webnd-ud123-gitcourse-betamojito-l3-27-confession-corner_480p_1000kbps.mp4'
            uri_480p_ogg: 'http://video.udacity-data.com.s3.amazonaws.com/topher/2017/March/58b9dc0b_nd016-webnd-ud123-gitcourse-betamojito-l3-27-confession-corner/nd016-webnd-ud123-gitcourse-betamojito-l3-27-confession-corner_480p.ogg'
            uri_720p_mp4: 'http://video.udacity-data.com.s3.amazonaws.com/topher/2017/March/58b9dc0b_nd016-webnd-ud123-gitcourse-betamojito-l3-27-confession-corner/nd016-webnd-ud123-gitcourse-betamojito-l3-27-confession-corner_720p.mp4'
            uri_hls: 'http://video.udacity-data.com.s3.amazonaws.com/topher/2017/March/58b9dc0b_nd016-webnd-ud123-gitcourse-betamojito-l3-27-confession-corner/hls/playlist.m3u8'
      - id: 338828
        key: c0a914df-1239-4426-ad11-ae4e39adb544
        locale: zh-cn
        version: 1.0.0
        title: null
        semantic_type: TextAtom
        updated_at: 'Fri Jun 23 2017 07:34:58 GMT+0000 (UTC)'
        is_public: true
        text: |
          ## git log --oneline Recap

          To recap, the `--oneline` flag is used to alter how `git log` displays information:

          ```bash
          $ git log --oneline
          ```

          This command:

          * lists one commit per line
          * shows the first 7 characters of the commit's SHA
          * shows the commit's message
        instructor_notes: ''
        resources: null
  - id: 339081
    key: 7e127ca9-7d0a-414d-ad30-708d60248a96
    locale: zh-cn
    version: 1.0.0
    title: Viewing Modified Files
    semantic_type: Concept
    updated_at: 'Fri Jun 23 2017 07:34:59 GMT+0000 (UTC)'
    is_public: true
    resources: null
    _atoms_ids:
      - 338829
      - 338830
      - 338831
      - 338832
      - 338833
      - 338834
      - 338835
      - 338836
      - 338837
    atoms:
      - id: 338829
        key: c6f0d410-fdb6-43e0-a8a9-941966320a6f
        locale: zh-cn
        version: 1.0.0
        title: null
        semantic_type: TextAtom
        updated_at: 'Fri Jun 23 2017 07:34:58 GMT+0000 (UTC)'
        is_public: true
        text: We just looked at the `--oneline` flag to show one commit per line. That's great for getting an overview of the repository. But what if we want to dig in a little to see what file or files were changed by a commit?
        instructor_notes: ''
        resources: null
      - id: 338830
        key: 8c6788e5-c723-429c-ab78-44737b275230
        locale: zh-cn
        version: 1.0.0
        title: What file or files are modified?
        semantic_type: RadioQuizAtom
        updated_at: 'Fri Jun 23 2017 07:34:58 GMT+0000 (UTC)'
        is_public: true
        question:
          prompt: |-
            If you look in the repository at commit `a3dc99a`, it has the message "Center content on page".

            What file or files were changed in this commit?
          correct_feedback: 'That''s right! This is one reason why a good, descriptive commit message is so important. But even with the commit message, we still don''t know for sure what file or files were modified in this commit.'
          video_feedback: null
          default_feedback: 'Possibly, but can you be _100% sure_ that''s correct or are you assuming?'
          answers:
            - id: a1487108530016
              text: An HTML file
              is_correct: false
              incorrect_feedback: null
            - id: a1487108538219
              text: A CSS file
              is_correct: false
              incorrect_feedback: null
            - id: a1487108539480
              text: A JavaScript file
              is_correct: false
              incorrect_feedback: null
            - id: a1487108540121
              text: An HTML and CSS file
              is_correct: false
              incorrect_feedback: null
            - id: a1487108553870
              text: An HTML and JS file
              is_correct: false
              incorrect_feedback: null
            - id: a1487108557818
              text: There's no way to know for sure
              is_correct: true
              incorrect_feedback: null
      - id: 338831
        key: c8197f5b-5507-4bc5-9f08-bc84e187e8d0
        locale: zh-cn
        version: 1.0.0
        title: null
        semantic_type: TextAtom
        updated_at: 'Fri Jun 23 2017 07:34:58 GMT+0000 (UTC)'
        is_public: true
        text: |-
          ## `git log --stat` Intro

          The `git log` command has a flag that can be used to display the files that have been changed in the commit, as well as the number of lines that have been added or deleted. The flag is `--stat` ("stat" is short for "statistics"):

          ```bash
          $ git log --stat
          ```

          Run this command and check out what it displays.
        instructor_notes: ''
        resources: null
      - id: 338832
        key: 6ffe4710-7def-498f-8a96-c0306bb4bee7
        locale: zh-cn
        version: 1.0.0
        title: null
        semantic_type: ImageAtom
        updated_at: 'Fri Jun 23 2017 07:34:58 GMT+0000 (UTC)'
        is_public: true
        url: 'https://d17h27t6h515a5.cloudfront.net/topher/2017/February/58a37bff_ud123-l3-git-log-vs-git-log-stat/ud123-l3-git-log-vs-git-log-stat.png'
        width: 3262
        height: 1172
        caption: _Two Terminal applications side-by-side. The left one shows the result of the `git log` command with all of the information while the right one shows the result of the `git log --stat` command which lists the files that were changed as well as the number of added/removed lines._
        resources: null
        instructor_notes: null
      - id: 338833
        key: 60246956-94ea-42e9-823c-8ddc9d379aa1
        locale: zh-cn
        version: 1.0.0
        title: Nd016 WebND Ud123 Gitcourse BETAMOJITO L3 33 Git Log Vs Git Log --Stat Walkthru
        semantic_type: VideoAtom
        updated_at: 'Wed Jun 28 2017 00:37:11 GMT+0000 (UTC)'
        is_public: true
        tags: []
        instructor_notes: ''
        resources: null
        video:
          id: '51032'
          youtube_id: aOICKP_9xiY
          subtitles: null
          transcodings:
            uri_480p_mp4: 'http://video.udacity-data.com.s3.amazonaws.com/topher/2017/March/58b9dc0e_nd016-webnd-ud123-gitcourse-betamojito-l3-33-git-log-vs-git-log-stat-walkthru/nd016-webnd-ud123-gitcourse-betamojito-l3-33-git-log-vs-git-log-stat-walkthru_480p.mp4'
            uri_480p_1000kbps_mp4: 'http://video.udacity-data.com.s3.amazonaws.com/topher/2017/March/58b9dc0e_nd016-webnd-ud123-gitcourse-betamojito-l3-33-git-log-vs-git-log-stat-walkthru/nd016-webnd-ud123-gitcourse-betamojito-l3-33-git-log-vs-git-log-stat-walkthru_480p_1000kbps.mp4'
            uri_480p_ogg: 'http://video.udacity-data.com.s3.amazonaws.com/topher/2017/March/58b9dc0e_nd016-webnd-ud123-gitcourse-betamojito-l3-33-git-log-vs-git-log-stat-walkthru/nd016-webnd-ud123-gitcourse-betamojito-l3-33-git-log-vs-git-log-stat-walkthru_480p.ogg'
            uri_720p_mp4: 'http://video.udacity-data.com.s3.amazonaws.com/topher/2017/March/58b9dc0e_nd016-webnd-ud123-gitcourse-betamojito-l3-33-git-log-vs-git-log-stat-walkthru/nd016-webnd-ud123-gitcourse-betamojito-l3-33-git-log-vs-git-log-stat-walkthru_720p.mp4'
            uri_hls: 'http://video.udacity-data.com.s3.amazonaws.com/topher/2017/March/58b9dc0e_nd016-webnd-ud123-gitcourse-betamojito-l3-33-git-log-vs-git-log-stat-walkthru/hls/playlist.m3u8'
      - id: 338834
        key: 8006dcd2-bdc4-464c-9077-445d5cb90bda
        locale: zh-cn
        version: 1.0.0
        title: How Many Files Were Modified?
        semantic_type: RadioQuizAtom
        updated_at: 'Fri Jun 23 2017 07:34:58 GMT+0000 (UTC)'
        is_public: true
        question:
          prompt: 'Using what you''ve learned so far about `git log` and its flags, how many files were modified in the commit with the SHA `6f04ddd`?'
          correct_feedback: You got it! Great work!
          video_feedback: null
          default_feedback: Hmm. You sure about that one? It doesn't look right to me. Try running `git log --oneline` to locate the correct commit. Then use `git log --stat` to figure out how many files were modified.
          answers:
            - id: a1487109181976
              text: 1 file
              is_correct: false
              incorrect_feedback: null
            - id: a1487109223453
              text: 2 files
              is_correct: true
              incorrect_feedback: null
            - id: a1487109224094
              text: 9 files
              is_correct: false
              incorrect_feedback: null
            - id: a1487109224679
              text: 10 files
              is_correct: false
              incorrect_feedback: null
      - id: 338835
        key: 61916961-9113-4b2e-8f04-6cf95e7c8749
        locale: zh-cn
        version: 1.0.0
        title: How Many Files Were Modified 2?
        semantic_type: RadioQuizAtom
        updated_at: 'Fri Jun 23 2017 07:34:58 GMT+0000 (UTC)'
        is_public: true
        question:
          prompt: 'You did so well with the first one, so here''s another! How many files were modified in the commit with the SHA `8d3ea36`?'
          correct_feedback: 'Fantastic! You''re becoming quite the `git log`ing ninja, aren''t you!'
          video_feedback: null
          default_feedback: Hmm. You sure about that one? It doesn't look right to me. Try running `git log --oneline` to locate the correct commit. Then use `git log --stat` to figure out how many files were modified.
          answers:
            - id: a1487109281528
              text: 1 file
              is_correct: false
              incorrect_feedback: null
            - id: a1487109308820
              text: 2 files
              is_correct: true
              incorrect_feedback: null
            - id: a1487109309404
              text: 3 files
              is_correct: false
              incorrect_feedback: null
            - id: a1487109309921
              text: 5 files
              is_correct: false
              incorrect_feedback: null
      - id: 338836
        key: ccdd02b1-d354-44a3-836d-3570c05bd988
        locale: zh-cn
        version: 1.0.0
        title: How Many Lines Were Modified?
        semantic_type: RadioQuizAtom
        updated_at: 'Fri Jun 23 2017 07:34:58 GMT+0000 (UTC)'
        is_public: true
        question:
          prompt: Now it's time to look at the other info the `--stat` flag displays. How many lines of code were _deleted_ in `index.html` in the commit with the SHA `8d3ea36`?
          correct_feedback: "Woohoo! Awesome sleuthing! \uD83D\uDC4D\uD83C\uDFFC"
          video_feedback: null
          default_feedback: 'This is the same commit as the previous quiz. If you couldn''t find it, run the `git log --stat` command, scroll through the output until you find the right commit, then look at the line that starts with `index.html`.'
          answers:
            - id: a1487109347932
              text: 2 lines
              is_correct: false
              incorrect_feedback: null
            - id: a1487109411994
              text: 4 lines
              is_correct: true
              incorrect_feedback: null
            - id: a1487109412646
              text: 9 lines
              is_correct: false
              incorrect_feedback: null
            - id: a1487109413141
              text: 13 lines
              is_correct: false
              incorrect_feedback: null
            - id: a1487109414638
              text: 28 lines
              is_correct: false
              incorrect_feedback: null
      - id: 338837
        key: 619e02b3-dd4f-4e4f-b32a-5e3a583362ca
        locale: zh-cn
        version: 1.0.0
        title: null
        semantic_type: TextAtom
        updated_at: 'Fri Jun 23 2017 07:34:58 GMT+0000 (UTC)'
        is_public: true
        text: |
          ## `git log --stat` Recap

          To recap, the `--stat` flag is used to alter how `git log` displays information:

          ```bash
          $ git log --stat
          ```

          This command:

          * displays the file(s) that have been modified
          * displays the number of lines that have been added/removed
          * displays a summary line with the total number of modified files and lines that have been added/removed
        instructor_notes: ''
        resources: null
  - id: 339082
    key: dac0d8d4-e9a0-4b6e-bf65-f2d8e7a434c8
    locale: zh-cn
    version: 1.0.0
    title: Viewing File Changes
    semantic_type: Concept
    updated_at: 'Fri Jun 23 2017 07:34:59 GMT+0000 (UTC)'
    is_public: true
    resources: null
    _atoms_ids:
      - 338838
      - 338839
      - 338840
      - 338841
      - 338842
      - 338843
      - 338844
      - 338845
      - 338846
      - 338847
      - 338848
      - 338849
      - 338850
    atoms:
      - id: 338838
        key: 3292dd03-d14b-4984-94fd-3bd073855db9
        locale: zh-cn
        version: 1.0.0
        title: null
        semantic_type: TextAtom
        updated_at: 'Fri Jun 23 2017 07:34:58 GMT+0000 (UTC)'
        is_public: true
        text: |-
          ## Viewing Changes

          We know that `git log` will show us the commits in a repository, and if we add the `--stat` flag, we can see what files were modified and how many lines of code were added or removed. Wouldn't it be awesome if we could see exactly _what those changes were_?

          If this isn't the best part of a version control system, I don't know what is! Being able to see the exact changes that were made to a file is incredibly important! Being able to say, "oh, ok, so this commit adds 5 pixels of border-radius to the button!".

          For example, in the blog project, the commit `a3dc99a` has the message "center content on page" and modifies the CSS file by adding 5 lines. What are those five lines that were added? How can we figure out what those 5 lines are?
        instructor_notes: ''
        resources: null
      - id: 338839
        key: 32b1e1b6-df3b-488c-ba99-a46b21be1199
        locale: zh-cn
        version: 1.0.0
        title: null
        semantic_type: ImageAtom
        updated_at: 'Fri Jun 23 2017 07:34:58 GMT+0000 (UTC)'
        is_public: true
        url: 'https://d17h27t6h515a5.cloudfront.net/topher/2017/February/58a37ded_ud123-l3-git-log-stat/ud123-l3-git-log-stat.gif'
        width: 1036
        height: 588
        caption: _The Terminal application. The command `git log --stat` is run. It displays commits and zooms in on the first commit's stats showing the CSS file with 5 lines added._
        resources: null
        instructor_notes: null
      - id: 338840
        key: 921dcb3a-ceb8-4c97-ad33-494a200528ea
        locale: zh-cn
        version: 1.0.0
        title: null
        semantic_type: TextAtom
        updated_at: 'Fri Jun 23 2017 07:34:58 GMT+0000 (UTC)'
        is_public: true
        text: |-
          ## `git log -p`

          The `git log` command has a flag that can be used to display the actual changes made to a file. The flag is `--patch` which can be shortened to just `-p`:

          ```bash
          $ git log -p
          ```

          Run this command and check out what it displays.
        instructor_notes: ''
        resources: null
      - id: 338841
        key: f75d11d1-3b06-411d-a136-3feaf7ab62e4
        locale: zh-cn
        version: 1.0.0
        title: null
        semantic_type: ImageAtom
        updated_at: 'Fri Jun 23 2017 07:34:58 GMT+0000 (UTC)'
        is_public: true
        url: 'https://d17h27t6h515a5.cloudfront.net/topher/2017/February/58a37ea6_ud123-l3-git-log-p/ud123-l3-git-log-p.png'
        width: 848
        height: 738
        caption: _The Terminal application showing the output of the `git log -p` command. Note - the colors in your terminal might differ._
        resources: null
        instructor_notes: null
      - id: 338842
        key: 28601f12-f51e-4187-aa7f-42bf141a1dc8
        locale: zh-cn
        version: 1.0.0
        title: Nd016 WebND Ud123 Gitcourse BETAMOJITO L3 42 Git Log -P Output Walkthru
        semantic_type: VideoAtom
        updated_at: 'Wed Jun 28 2017 00:37:11 GMT+0000 (UTC)'
        is_public: true
        tags: []
        instructor_notes: ''
        resources: null
        video:
          id: '51034'
          youtube_id: A8Kwocr-K8c
          subtitles: null
          transcodings:
            uri_480p_mp4: 'http://video.udacity-data.com.s3.amazonaws.com/topher/2017/March/58b9dc17_nd016-webnd-ud123-gitcourse-betamojito-l3-42-git-log-p-output-walkthru/nd016-webnd-ud123-gitcourse-betamojito-l3-42-git-log-p-output-walkthru_480p.mp4'
            uri_480p_1000kbps_mp4: 'http://video.udacity-data.com.s3.amazonaws.com/topher/2017/March/58b9dc17_nd016-webnd-ud123-gitcourse-betamojito-l3-42-git-log-p-output-walkthru/nd016-webnd-ud123-gitcourse-betamojito-l3-42-git-log-p-output-walkthru_480p_1000kbps.mp4'
            uri_480p_ogg: 'http://video.udacity-data.com.s3.amazonaws.com/topher/2017/March/58b9dc17_nd016-webnd-ud123-gitcourse-betamojito-l3-42-git-log-p-output-walkthru/nd016-webnd-ud123-gitcourse-betamojito-l3-42-git-log-p-output-walkthru_480p.ogg'
            uri_720p_mp4: 'http://video.udacity-data.com.s3.amazonaws.com/topher/2017/March/58b9dc17_nd016-webnd-ud123-gitcourse-betamojito-l3-42-git-log-p-output-walkthru/nd016-webnd-ud123-gitcourse-betamojito-l3-42-git-log-p-output-walkthru_720p.mp4'
            uri_hls: 'http://video.udacity-data.com.s3.amazonaws.com/topher/2017/March/58b9dc17_nd016-webnd-ud123-gitcourse-betamojito-l3-42-git-log-p-output-walkthru/hls/playlist.m3u8'
      - id: 338843
        key: aa74d1b2-bb34-474c-9417-483de85e389b
        locale: zh-cn
        version: 1.0.0
        title: null
        semantic_type: ImageAtom
        updated_at: 'Fri Jun 23 2017 07:34:58 GMT+0000 (UTC)'
        is_public: true
        url: 'https://d17h27t6h515a5.cloudfront.net/topher/2017/February/58a37f65_ud123-l3-git-log-p-lines-removed-annotated/ud123-l3-git-log-p-lines-removed-annotated.png'
        width: 2262
        height: 1342
        caption: _The Terminal application showing the output of the `git log -p` command. Check below for a detailed description of the output._
        resources: null
        instructor_notes: null
      - id: 338844
        key: be8fee72-8d37-4a86-80a1-f4ad347b9b61
        locale: zh-cn
        version: 1.0.0
        title: null
        semantic_type: TextAtom
        updated_at: 'Fri Jun 23 2017 07:34:58 GMT+0000 (UTC)'
        is_public: true
        text: "## Annotated `git log -p` Output\n\nUsing the image above, let's do a quick recap of the `git log -p` output:\n\n* \uD83D\uDD35  - the file that is being displayed\n* \uD83D\uDD36  - the hash of the first version of the file and the hash of the second version of the file\n    * not usually important, so it's safe to ignore\n* ❤️  - the old version and current version of the file \n* \uD83D\uDD0D  - the lines where the file is added and how many lines there are\n    * `-15,83` indicates that the old version (represented by the `-`) started at line 15 and that the file had 83 lines\n    * `+15,85` indicates that the current version (represented by the `+`) starts at line 15 and that there are now 85 lines...these 85 lines are shown in the patch below\n* ✏️  - the actual changes made in the commit\n    * lines that are red and start with a minus (`-`) were in the original version of the file but have been removed by the commit\n    * lines that are green and start with a plus (`+`) are new lines that have been added in the commit\n\n## Further Research\n\n* [Generating patches with -p](https://git-scm.com/docs/git-diff#_generating_patches_with_p) from the Git docs"
        instructor_notes: ''
        resources: null
      - id: 338845
        key: 3e3d803f-260a-4a3d-8f4d-3663368cea44
        locale: zh-cn
        version: 1.0.0
        title: Edits Start Where?
        semantic_type: RadioQuizAtom
        updated_at: 'Fri Jun 23 2017 07:34:58 GMT+0000 (UTC)'
        is_public: true
        question:
          prompt: |-
            Using what you've learned so far about `git log`'s `-p` flag, look at the commit with the SHA `50d835d`. What line number in `app.css` should you start looking at to see what has been changed?

            Tip - don't forget that while looking at the `git log` output, the `d` key will scroll _down_ by half a page while the `u` key will scroll _up_ half a page.
          correct_feedback: 'You''re really rockin'' this whole `git log`ging thing, aren''t you!'
          video_feedback: null
          default_feedback: 'Sorry, that''s not right. To see where the edits start in a file, you need to use the `git log -p`. Run that command, locate the correct commit, and look in the patch output.'
          answers:
            - id: a1487110111347
              text: line 63
              is_correct: false
              incorrect_feedback: null
            - id: a1487110189938
              text: line 89
              is_correct: false
              incorrect_feedback: null
            - id: a1487110190411
              text: line 127
              is_correct: true
              incorrect_feedback: null
            - id: a1487110190940
              text: line 155
              is_correct: false
              incorrect_feedback: null
      - id: 338846
        key: 7ab48bda-0c37-4627-bbfe-e86ebb8a1227
        locale: zh-cn
        version: 1.0.0
        title: What Was Added?
        semantic_type: RadioQuizAtom
        updated_at: 'Fri Jun 23 2017 07:34:58 GMT+0000 (UTC)'
        is_public: true
        question:
          prompt: 'Using `git log` and any of its flags, what code was added in by commit `4a60beb`?'
          correct_feedback: 'That''s the one, awesome work!'
          video_feedback: null
          default_feedback: 'That doesn''t seem right. To see what code was actually added or removed, you''ll need to use `git log`''s `-p` flag. Give that a shot and see what you can find.'
          answers:
            - id: a1487110238309
              text: 'color: #352d2d;'
              is_correct: false
              incorrect_feedback: null
            - id: a1487110269522
              text: 'color: #250808;'
              is_correct: false
              incorrect_feedback: null
            - id: a1487110270006
              text: 'color: #333333;'
              is_correct: false
              incorrect_feedback: null
            - id: a1487110270558
              text: 'color: #2e3d49;'
              is_correct: true
              incorrect_feedback: null
      - id: 338847
        key: 6f4d9018-84a3-4089-bc56-d3bf336d518f
        locale: zh-cn
        version: 1.0.0
        title: Combine Flags?
        semantic_type: RadioQuizAtom
        updated_at: 'Fri Jun 23 2017 07:34:58 GMT+0000 (UTC)'
        is_public: true
        question:
          prompt: |-
            `git log --stat` and `git log -p` are both really helpful commands. Wouldn't it be great if we could have both of their output at the same time? Hmmm…

            What happens when `git log -p --stat` is run?
          correct_feedback: 'That''s right; you can combine flags! `git log -p --stat` will display the stats info above the patch info. Actually, the order doesn''t matter; `git log --stat -p` will also show the stats info above the patch info.'
          video_feedback: null
          default_feedback: That doesn't look right to me. Try running `git log -p --stat` on the Terminal and pick the option that best matches its output.
          answers:
            - id: a1487110311845
              text: it displays only the patch information
              is_correct: false
              incorrect_feedback: null
            - id: a1487110335977
              text: it displays only the stats
              is_correct: false
              incorrect_feedback: null
            - id: a1487110336517
              text: it displays both with the patch info above the stats info
              is_correct: false
              incorrect_feedback: null
            - id: a1487110338181
              text: it displays both with the stats info above the patch info
              is_correct: true
              incorrect_feedback: null
      - id: 338848
        key: 78f027f5-38ae-4e0c-b481-38673253b5b5
        locale: zh-cn
        version: 1.0.0
        title: null
        semantic_type: TextAtom
        updated_at: 'Fri Jun 23 2017 07:34:58 GMT+0000 (UTC)'
        is_public: true
        text: 'In the video above, we looked at a commit that indents a lot of code. The patch output shows all of those lines as having been removed and then added again at their new level of indentation. Showing all of the indent changes makes it hard to tell what was actually added, though.'
        instructor_notes: ''
        resources: null
      - id: 338849
        key: ac22d92f-5a31-4b46-8ad7-1b871a596d5a
        locale: zh-cn
        version: 1.0.0
        title: Whitespace Changes?
        semantic_type: RadioQuizAtom
        updated_at: 'Fri Jun 23 2017 07:34:58 GMT+0000 (UTC)'
        is_public: true
        question:
          prompt: 'What does the `-w` flag do to the patch information? For help, check [this Git docs page](https://git-scm.com/docs/git-diff).'
          correct_feedback: 'That''s right! `git log -p -w` will show the patch information, but will not highlight lines where _only_ whitespace changes have occurred.'
          video_feedback: null
          default_feedback: 'Did you try running `git log -p -w` to if this actually happened? For help, check out [this page in the documentation](https://git-scm.com/docs/git-diff#git-diff--w).'
          answers:
            - id: a1487110387340
              text: it displays non-whitespace characters in blinking text
              is_correct: false
              incorrect_feedback: null
            - id: a1487110448546
              text: it displays non-whitespace changes in bold
              is_correct: false
              incorrect_feedback: null
            - id: a1487110449199
              text: it ignores whitespace changes
              is_correct: true
              incorrect_feedback: null
            - id: a1487110449773
              text: it shows a separate patch area with just new/removed content
              is_correct: false
              incorrect_feedback: null
      - id: 338850
        key: 93f5ff9a-4a48-4969-8212-126d11a59f3b
        locale: zh-cn
        version: 1.0.0
        title: null
        semantic_type: TextAtom
        updated_at: 'Fri Jun 23 2017 07:34:58 GMT+0000 (UTC)'
        is_public: true
        text: |
          ## `git log -p` Recap

          To recap, the `-p` flag (which is the same as the `--patch` flag)  is used to alter how `git log` displays information:

          ```bash
          $ git log -p
          ```

          This command adds the following to the default output:

          * displays the files that have been modified
          * displays the location of the lines that have been added/removed
          * displays the actual changes that have been made
        instructor_notes: ''
        resources: null
  - id: 339084
    key: ad11f6f3-9138-4a41-a089-d6a3b77e99ff
    locale: zh-cn
    version: 1.0.0
    title: Viewing A Specific Commit
    semantic_type: Concept
    updated_at: 'Fri Jun 23 2017 07:34:59 GMT+0000 (UTC)'
    is_public: true
    resources: null
    _atoms_ids:
      - 338851
      - 338852
      - 338853
      - 338854
      - 338855
      - 338856
    atoms:
      - id: 338851
        key: c9a073a7-5180-4afd-a16b-df3c2315e581
        locale: zh-cn
        version: 1.0.0
        title: null
        semantic_type: TextAtom
        updated_at: 'Fri Jun 23 2017 07:34:58 GMT+0000 (UTC)'
        is_public: true
        text: |-
          ## Too Much Scrolling

          The last few quizzes in the previous section had you scrolling and scrolling through the patch output just to get to the right commit so you could see _its_ info. Wouldn't it be super handy if you could just display a specific commit's details without worrying about all of the others in the repo?

          There are actually two ways to do this!

          * providing the SHA of the commit you want to see to `git log`
          * use a new command `git show`

          They're both pretty simple, but let's look at the `git log` way and then we'll look at `git show`.
        instructor_notes: ''
        resources: null
      - id: 338852
        key: 4001b979-8dad-41a7-b72a-9b1e675804bd
        locale: zh-cn
        version: 1.0.0
        title: null
        semantic_type: TextAtom
        updated_at: 'Fri Jun 23 2017 07:34:58 GMT+0000 (UTC)'
        is_public: true
        text: |-
          You already know how to "log" information with:

          * `git log`
          * `git log --oneline`
          * `git log --stat`
          * `git log -p`

          But did you know, you can supply the SHA of a commit as the final argument for all of these commands? For example:

          ```bash
          $ git log -p fdf5493
          ```

          By supplying a SHA, the `git log -p` command will _start at that commit_! No need to scroll through everything! Keep in mind that it will _also_ show all of the commits that were made _prior_ to the supplied SHA.
        instructor_notes: ''
        resources: null
      - id: 338853
        key: 251aeb19-0f37-409f-9fc6-52964bc9641f
        locale: zh-cn
        version: 1.0.0
        title: null
        semantic_type: TextAtom
        updated_at: 'Fri Jun 23 2017 07:34:58 GMT+0000 (UTC)'
        is_public: true
        text: |-
          ## New Command: `git show`

          The other command that shows a specific commit is `git show`:

          ```bash
          $ git show
          ```

          Running it like the example above will only display the most recent commit. Typically, a SHA is provided as a final argument:

          ```bash
          $ git show fdf5493
          ```

          ### What does `git show` do? 

          The `git show` command will show _only one commit_. So don't get alarmed when you can't find any other commits - it only shows one. The output of the `git show` command is exactly the same as the `git log -p` command. So by default, `git show` displays:

          * the commit
          * the author
          * the date
          * the commit message
          * the patch information

          However, `git show` can be combined with most of the other flags we've looked at:

          * `--stat` - to show the how many files were changed and the number of lines that were added/removed
          * `-p` or `--patch` - this the default, but if `--stat` is used, the patch won't display, so pass `-p` to add it again
          * `-w` - to ignore changes to whitespace

          You are now among the `git log`ging elite! Try your hand at a few quizzes.
        instructor_notes: ''
        resources: null
      - id: 338854
        key: 14cb4e22-2beb-4537-9945-64c4370b9d0e
        locale: zh-cn
        version: 1.0.0
        title: How Many Rulesets Were Added?
        semantic_type: RadioQuizAtom
        updated_at: 'Fri Jun 23 2017 07:34:58 GMT+0000 (UTC)'
        is_public: true
        question:
          prompt: How many rulesets are added to the CSS by commit `8d3ea36`?
          correct_feedback: 'That''s right! Both `.read-more` and `.read-more::after` were added.'
          video_feedback: null
          default_feedback: That doesn't look right to me. Try using `git show` and give it the SHA to figure this out!
          answers:
            - id: a1487110787892
              text: '1'
              is_correct: false
              incorrect_feedback: null
            - id: a1487110808550
              text: '2'
              is_correct: true
              incorrect_feedback: null
            - id: a1487110809077
              text: '3'
              is_correct: false
              incorrect_feedback: null
            - id: a1487110809652
              text: '4'
              is_correct: false
              incorrect_feedback: null
      - id: 338855
        key: aa1d7f8d-90aa-4a0a-86a5-8c71abd04527
        locale: zh-cn
        version: 1.0.0
        title: How Many Files Were Changed?
        semantic_type: RadioQuizAtom
        updated_at: 'Fri Jun 23 2017 07:34:58 GMT+0000 (UTC)'
        is_public: true
        question:
          prompt: There's a commit with the message "Convert social links from text to images". How many files were changed by this commit?
          correct_feedback: 'Fantastic job! I first used `git log --oneline` to find the SHA of the commit, then I used `git log --stat` with the SHA to find the right info.'
          video_feedback: null
          default_feedback: 'Nope, that''s not it. Try using `git log --oneline` to find the SHA of the commit in question. Then pass the SHA to either `git log --stat` or `git show --stat`.'
          answers:
            - id: a1487110847131
              text: 2 files
              is_correct: false
              incorrect_feedback: null
            - id: a1487110875411
              text: 4 files
              is_correct: false
              incorrect_feedback: null
            - id: a1487110875971
              text: 5 files
              is_correct: true
              incorrect_feedback: null
            - id: a1487110876477
              text: 9 files
              is_correct: false
              incorrect_feedback: null
      - id: 338856
        key: f4b22660-11ec-451f-aabc-deb833b75f99
        locale: zh-cn
        version: 1.0.0
        title: What Level Heading Was Added?
        semantic_type: RadioQuizAtom
        updated_at: 'Fri Jun 23 2017 07:34:58 GMT+0000 (UTC)'
        is_public: true
        question:
          prompt: Look at commit `fdf5493`. What's the first HTML heading element that's added by this commit?
          correct_feedback: Great work!
          video_feedback: null
          default_feedback: That's not looking right to me. How about using `git show` or `git log -p`?
          answers:
            - id: a1487110913238
              text: an `<h1>`
              is_correct: false
              incorrect_feedback: null
            - id: a1487110947175
              text: an `<h2>`
              is_correct: true
              incorrect_feedback: null
            - id: a1487110947679
              text: an `<h3>`
              is_correct: false
              incorrect_feedback: null
            - id: a1487110948187
              text: an `<h4>`
              is_correct: false
              incorrect_feedback: null
  - id: 339083
    key: b1ffc3a7-a460-4e3d-ab03-393f774552b2
    locale: zh-cn
    version: 1.0.0
    title: Outro
    semantic_type: Concept
    updated_at: 'Fri Jun 23 2017 07:34:59 GMT+0000 (UTC)'
    is_public: true
    resources: null
    _atoms_ids:
      - 338857
    atoms:
      - id: 338857
        key: a0dfb764-9a09-4d7f-bab9-4313a1e88ae3
        locale: zh-cn
        version: 1.0.0
        title: Nd016 WebND Ud123 Gitcourse BETAMOJITO L3 56 A Repository'S History - Outro
        semantic_type: VideoAtom
        updated_at: 'Wed Jun 28 2017 00:37:11 GMT+0000 (UTC)'
        is_public: true
        tags: []
        instructor_notes: ''
        resources: null
        video:
          id: '51036'
          youtube_id: 9rUf2HbdAd8
          subtitles: null
          transcodings:
            uri_480p_mp4: 'http://video.udacity-data.com.s3.amazonaws.com/topher/2017/March/58b9dc1b_nd016-webnd-ud123-gitcourse-betamojito-l3-56-a-repositorys-history-outro/nd016-webnd-ud123-gitcourse-betamojito-l3-56-a-repositorys-history-outro_480p.mp4'
            uri_480p_1000kbps_mp4: 'http://video.udacity-data.com.s3.amazonaws.com/topher/2017/March/58b9dc1b_nd016-webnd-ud123-gitcourse-betamojito-l3-56-a-repositorys-history-outro/nd016-webnd-ud123-gitcourse-betamojito-l3-56-a-repositorys-history-outro_480p_1000kbps.mp4'
            uri_480p_ogg: 'http://video.udacity-data.com.s3.amazonaws.com/topher/2017/March/58b9dc1b_nd016-webnd-ud123-gitcourse-betamojito-l3-56-a-repositorys-history-outro/nd016-webnd-ud123-gitcourse-betamojito-l3-56-a-repositorys-history-outro_480p.ogg'
            uri_720p_mp4: 'http://video.udacity-data.com.s3.amazonaws.com/topher/2017/March/58b9dc1b_nd016-webnd-ud123-gitcourse-betamojito-l3-56-a-repositorys-history-outro/nd016-webnd-ud123-gitcourse-betamojito-l3-56-a-repositorys-history-outro_720p.mp4'
            uri_hls: 'http://video.udacity-data.com.s3.amazonaws.com/topher/2017/March/58b9dc1b_nd016-webnd-ud123-gitcourse-betamojito-l3-56-a-repositorys-history-outro/hls/playlist.m3u8'
