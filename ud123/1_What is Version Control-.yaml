id: 339105
key: 1b369991-f1ca-4d6a-ba8f-e8318d76322f
locale: zh-cn
version: 1.0.0
title: What is Version Control?
semantic_type: Lesson
updated_at: 'Fri Jun 23 2017 07:34:59 GMT+0000 (UTC)'
is_public: true
image:
  url: 'https://d17h27t6h515a5.cloudfront.net/topher/2017/April/58fa7637_lesson-teal/lesson-teal.png'
  width: 500
  height: 500
video: null
summary: 'Version control is an incredibly important part of a professional programmer''s life. In this lesson, you''ll learn about the benefits of version control and install the version control tool Git!'
lesson_type: Classroom
duration: 75
is_project_lesson: false
_concepts_ids:
  - 339067
  - 339068
  - 339069
  - 339070
  - 339075
  - 339071
_project_id: null
concepts:
  - id: 339067
    key: 06b0775b-b703-45ca-9935-939487706728
    locale: zh-cn
    version: 1.0.0
    title: What is Version Control
    semantic_type: Concept
    updated_at: 'Fri Jun 23 2017 07:34:59 GMT+0000 (UTC)'
    is_public: true
    resources: null
    _atoms_ids:
      - 338731
      - 338732
      - 338733
      - 338734
      - 338735
    atoms:
      - id: 338731
        key: aeacb2a2-ea5d-4ece-aaa5-f7d66b95d2da
        locale: zh-cn
        version: 1.0.0
        title: Gitfinal L1 01 Welcome
        semantic_type: VideoAtom
        updated_at: 'Wed Jun 28 2017 00:37:15 GMT+0000 (UTC)'
        is_public: true
        tags: []
        instructor_notes: ''
        resources: null
        video:
          id: '51669'
          youtube_id: lbR82UD5F0c
          subtitles: null
          transcodings:
            uri_480p_mp4: 'http://video.udacity-data.com.s3.amazonaws.com/topher/2017/March/58cca62c_gitfinal-l1-01-welcome/gitfinal-l1-01-welcome_480p.mp4'
            uri_480p_1000kbps_mp4: 'http://video.udacity-data.com.s3.amazonaws.com/topher/2017/March/58cca62c_gitfinal-l1-01-welcome/gitfinal-l1-01-welcome_480p_1000kbps.mp4'
            uri_480p_ogg: 'http://video.udacity-data.com.s3.amazonaws.com/topher/2017/March/58cca62c_gitfinal-l1-01-welcome/gitfinal-l1-01-welcome_480p.ogg'
            uri_720p_mp4: 'http://video.udacity-data.com.s3.amazonaws.com/topher/2017/March/58cca62c_gitfinal-l1-01-welcome/gitfinal-l1-01-welcome_720p.mp4'
            uri_hls: 'http://video.udacity-data.com.s3.amazonaws.com/topher/2017/March/58cca62c_gitfinal-l1-01-welcome/hls/playlist.m3u8'
      - id: 338732
        key: 4a347c1c-0515-4cbd-83e3-fab564aec592
        locale: zh-cn
        version: 1.0.0
        title: null
        semantic_type: TextAtom
        updated_at: 'Fri Jun 23 2017 07:34:58 GMT+0000 (UTC)'
        is_public: true
        text: |-
          I just said "version control". Now since you're in this course, you might already know a bit about version control. But if you don't, a handy trick I've learned is to try reading the words in reverse - so "version control" would become "control version"! So a Version Control System is just software that helps you control (or manage) the different versions...of something (typically source code).

          ### Further Research
          [Version Control on Wikipedia](https://en.wikipedia.org/wiki/Version_control)
        instructor_notes: ''
        resources: null
      - id: 338733
        key: 9ed8aa88-4de3-4fbb-a27f-95d55820e159
        locale: zh-cn
        version: 1.0.0
        title: Gitfinal L1 03 Version Control Systems
        semantic_type: VideoAtom
        updated_at: 'Wed Jun 28 2017 00:37:13 GMT+0000 (UTC)'
        is_public: true
        tags: []
        instructor_notes: ''
        resources: null
        video:
          id: '51663'
          youtube_id: b7TjsVoTo3Q
          subtitles:
            - url: 'https://s3.amazonaws.com/video.udacity-data.com/topher/2017/March/58cc81ac_gitfinal-l1-03-version-control-systems/subtitles/lang_en_vs1.srt'
              language_code: en
          transcodings:
            uri_480p_mp4: 'http://video.udacity-data.com.s3.amazonaws.com/topher/2017/March/58cc81ac_gitfinal-l1-03-version-control-systems/gitfinal-l1-03-version-control-systems_480p.mp4'
            uri_480p_1000kbps_mp4: 'http://video.udacity-data.com.s3.amazonaws.com/topher/2017/March/58cc81ac_gitfinal-l1-03-version-control-systems/gitfinal-l1-03-version-control-systems_480p_1000kbps.mp4'
            uri_480p_ogg: 'http://video.udacity-data.com.s3.amazonaws.com/topher/2017/March/58cc81ac_gitfinal-l1-03-version-control-systems/gitfinal-l1-03-version-control-systems_480p.ogg'
            uri_720p_mp4: 'http://video.udacity-data.com.s3.amazonaws.com/topher/2017/March/58cc81ac_gitfinal-l1-03-version-control-systems/gitfinal-l1-03-version-control-systems_720p.mp4'
            uri_hls: 'http://video.udacity-data.com.s3.amazonaws.com/topher/2017/March/58cc81ac_gitfinal-l1-03-version-control-systems/hls/playlist.m3u8'
      - id: 338734
        key: 78def38a-3b8e-425a-8870-c85cb694651f
        locale: zh-cn
        version: 1.0.0
        title: null
        semantic_type: TextAtom
        updated_at: 'Fri Jun 23 2017 07:34:58 GMT+0000 (UTC)'
        is_public: true
        text: |-
          ## VCS Info

          There are [a number of Version Control Systems out there](https://en.wikipedia.org/wiki/List_of_version_control_software). This alone should prove that version control is incredibly important. Three of the most popular version control systems are:
          * [Git](https://git-scm.com/)
          * [Subversion](https://subversion.apache.org/)
          * [Mercurial](https://www.mercurial-scm.org/)

          There are two main types of version control system models:
          * the *centralized model* - all users connect to a central, master repository
          * the *distributed model* - each user has the entire repository on their computer

          ### Further Research
          * [Centralized vs. DVCS from the Atlassian Blog](http://blogs.atlassian.com/2012/02/version-control-centralized-dvcs/)
          * [Distributed version control on Wikipedia](https://en.wikipedia.org/wiki/Distributed_version_control)
        instructor_notes: ''
        resources: null
      - id: 338735
        key: c17d1879-aed5-4310-a2f3-2a54e68b6154
        locale: zh-cn
        version: 1.0.0
        title: null
        semantic_type: TextAtom
        updated_at: 'Fri Jun 23 2017 07:34:58 GMT+0000 (UTC)'
        is_public: true
        text: |-
          ## Recap

          Remember that the main point of a version control system is to help you maintain a detailed history of the project as well as the ability to work on different versions of it. Having a detailed history of a project is important because it lets you see the progress of the project over time. If needed, you can also jump back to any point in the project to recover data or files.

          In this course, we'll be using Git which is a distributed version control system. You might be surprised to discover that you're already using version control all the time!
        instructor_notes: ''
        resources: null
  - id: 339068
    key: 68d60539-7530-4c25-b038-41c81bc677c2
    locale: zh-cn
    version: 1.0.0
    title: Version Control In Daily Use
    semantic_type: Concept
    updated_at: 'Fri Jun 23 2017 07:34:59 GMT+0000 (UTC)'
    is_public: true
    resources: null
    _atoms_ids:
      - 338736
      - 338737
      - 338738
      - 338739
      - 338740
      - 338741
      - 338742
    atoms:
      - id: 338736
        key: 791549b8-e4ae-4a5c-a52e-9bbce0f66698
        locale: zh-cn
        version: 1.0.0
        title: null
        semantic_type: TextAtom
        updated_at: 'Fri Jun 23 2017 07:34:58 GMT+0000 (UTC)'
        is_public: true
        text: "## Version Control Is Everywhere\n\nMy job revolves around working with documents. I create new documents all the time, I fill them with information (hopefully informative information!) and then edit...edit...edit! Is your job like this? Perhaps it's not documents of text, but you're probably working with data in some form or another that changes over time.\n\nNow you might not think that you're using version control when working with documents, and you'd be right...sort of. You're not _actively_ maintaining different versions of a document as you write it. But that doesn't mean there aren't different versions of the document. The computer is keeping track of the different versions for you!\n\nDon't believe me? Aside from pondering your propensity towards doubting, let's prove I'm right:\n\n* open up your favorite text editor/code editor\n* type some content (how about \"version control is dull!\")\n* change one of the words in you wrote (e.g. change \"dull\" to \"life-changing awesome\")\n* now (here it comesâ€¦!) press `cmd` + `z` or `ctrl` + `z`\n\n\uD83D\uDCA5 Version control in action! (See?...told you I wasn't lying) I bet you use the \"undo\" command all the time. I know that I sure do!\n\nPractically every application I've ever used has an undo feature. You can think of this as a form of version control, but it's a rather limited form of version control. Let's look at a more powerful form by checking out a Google Docs document."
        instructor_notes: ''
        resources: null
      - id: 338737
        key: f340e851-4988-4b0b-994a-6691a2793d65
        locale: zh-cn
        version: 1.0.0
        title: null
        semantic_type: ImageAtom
        updated_at: 'Fri Jun 23 2017 07:34:58 GMT+0000 (UTC)'
        is_public: true
        url: 'https://d17h27t6h515a5.cloudfront.net/topher/2017/February/58a75370_ud123-l1-git-course-outline/ud123-l1-git-course-outline.png'
        width: 2350
        height: 1612
        caption: _The Google Doc outline for this Git Course._
        resources: null
        instructor_notes: null
      - id: 338738
        key: 0d824c71-5b73-45cd-987a-fdfc7c93e672
        locale: zh-cn
        version: 1.0.0
        title: null
        semantic_type: TextAtom
        updated_at: 'Fri Jun 23 2017 07:34:58 GMT+0000 (UTC)'
        is_public: true
        text: 'If you''ve ever written in a Google doc, have you noticed the small gray text at the top that tells you about the status of the document? Ever noticed that as you type, it''s actively saving the document? Then, when you finish typing, it tells you that the document has saved.'
        instructor_notes: ''
        resources: null
      - id: 338739
        key: 4905e8cf-e0d0-43b9-8989-c702b5f86f5b
        locale: zh-cn
        version: 1.0.0
        title: null
        semantic_type: ImageAtom
        updated_at: 'Fri Jun 23 2017 07:34:58 GMT+0000 (UTC)'
        is_public: true
        url: 'https://d17h27t6h515a5.cloudfront.net/topher/2017/February/58a757b5_ud123-l1-google-docs-saving-progress/ud123-l1-google-docs-saving-progress.gif'
        width: 1064
        height: 696
        caption: '_Status of a Google Docs document. The status says "Savingâ€¦" while the document is being edited, and changes to "All changes saved in Drive" after the content is saved._'
        resources: null
        instructor_notes: null
      - id: 338740
        key: c849f345-eae7-4775-8597-255ef7d1fcef
        locale: zh-cn
        version: 1.0.0
        title: null
        semantic_type: TextAtom
        updated_at: 'Fri Jun 23 2017 07:34:58 GMT+0000 (UTC)'
        is_public: true
        text: |-
          The _real_ question is, did you know that is a link that you can click on? Wanna see for yourself? Try it out in one of your own Google Docs.

          Clicking on the link takes you to a "Revision history" page. (Ooo! Did you notice the word "revision"? The word "version" is a synonym for "revision"!)
        instructor_notes: ''
        resources: null
      - id: 338741
        key: 5ba91ff9-f3e4-4844-9aa9-2af3be2878db
        locale: zh-cn
        version: 1.0.0
        title: Nd016 WebND Ud123 Gitcourse BETAMOJITO L1 11 Google Docs Revision History Walkthrough
        semantic_type: VideoAtom
        updated_at: 'Wed Jun 28 2017 00:37:13 GMT+0000 (UTC)'
        is_public: true
        tags: []
        instructor_notes: ''
        resources: null
        video:
          id: '51017'
          youtube_id: GcvvbdKEchk
          subtitles:
            - url: 'https://s3.amazonaws.com/video.udacity-data.com/topher/2017/March/58b9dbb9_nd016-webnd-ud123-gitcourse-betamojito-l1-11-google-docs-revision-history-walkthrough/subtitles/lang_en_vs1.srt'
              language_code: en
          transcodings:
            uri_480p_mp4: 'http://video.udacity-data.com.s3.amazonaws.com/topher/2017/March/58b9dbb9_nd016-webnd-ud123-gitcourse-betamojito-l1-11-google-docs-revision-history-walkthrough/nd016-webnd-ud123-gitcourse-betamojito-l1-11-google-docs-revision-history-walkthrough_480p.mp4'
            uri_480p_1000kbps_mp4: 'http://video.udacity-data.com.s3.amazonaws.com/topher/2017/March/58b9dbb9_nd016-webnd-ud123-gitcourse-betamojito-l1-11-google-docs-revision-history-walkthrough/nd016-webnd-ud123-gitcourse-betamojito-l1-11-google-docs-revision-history-walkthrough_480p_1000kbps.mp4'
            uri_480p_ogg: 'http://video.udacity-data.com.s3.amazonaws.com/topher/2017/March/58b9dbb9_nd016-webnd-ud123-gitcourse-betamojito-l1-11-google-docs-revision-history-walkthrough/nd016-webnd-ud123-gitcourse-betamojito-l1-11-google-docs-revision-history-walkthrough_480p.ogg'
            uri_720p_mp4: 'http://video.udacity-data.com.s3.amazonaws.com/topher/2017/March/58b9dbb9_nd016-webnd-ud123-gitcourse-betamojito-l1-11-google-docs-revision-history-walkthrough/nd016-webnd-ud123-gitcourse-betamojito-l1-11-google-docs-revision-history-walkthrough_720p.mp4'
            uri_hls: 'http://video.udacity-data.com.s3.amazonaws.com/topher/2017/March/58b9dbb9_nd016-webnd-ud123-gitcourse-betamojito-l1-11-google-docs-revision-history-walkthrough/hls/playlist.m3u8'
      - id: 338742
        key: 1b2ee49b-20e2-46ae-b63b-28b3adcb436a
        locale: zh-cn
        version: 1.0.0
        title: null
        semantic_type: TextAtom
        updated_at: 'Fri Jun 23 2017 07:34:58 GMT+0000 (UTC)'
        is_public: true
        text: |-
          ## Revision History Isn't Powerful Enough 

          Google Docs' Revision history page is incredibly powerful! I've used it on several occasions to salvage text that I'd written at one point, erased, and then realized I actually _did_ want to keep.

          But for all its ability, it's not as powerful as we'd like. What's it missing? A few that I can think of are:
          * the ability to label a change
          * the ability to give a detailed explanation of why a change was made
          * the ability to move between different versions of the same document
          * the ability to undo change A, make edit B, then get back change A without affecting edit B

          The version control tool, Git, can do all of those things - _and more_!!! (bet you didn't see _that_ coming!) So have I sold you yet on the awesomeness that is Git? I hope so, cause we're about to dive into it in the next section. 
        instructor_notes: ''
        resources: null
  - id: 339069
    key: 5f703930-a95e-47f0-a56b-702ed3a93741
    locale: zh-cn
    version: 1.0.0
    title: Git and Version Control Terminology
    semantic_type: Concept
    updated_at: 'Fri Jun 23 2017 07:34:59 GMT+0000 (UTC)'
    is_public: true
    resources:
      files:
        - name: Git Terms PDF
          uri: 'https://d17h27t6h515a5.cloudfront.net/topher/2017/March/58d31eb5_ud123-git-keyterms/ud123-git-keyterms.pdf'
      google_plus_link: null
      career_resource_center_link: null
      coaching_appointments_link: null
      office_hours_link: null
    _atoms_ids:
      - 338743
      - 338744
      - 338745
      - 338746
      - 338747
      - 338748
      - 338749
    atoms:
      - id: 338743
        key: 5c1ef9e3-2b22-4539-a418-6890e5f4045b
        locale: zh-cn
        version: 1.0.0
        title: Gitfinal L1 13 Git'S Terminology
        semantic_type: VideoAtom
        updated_at: 'Wed Jun 28 2017 00:37:13 GMT+0000 (UTC)'
        is_public: true
        tags: []
        instructor_notes: ''
        resources: null
        video:
          id: '51664'
          youtube_id: bf26adzeqMM
          subtitles: null
          transcodings:
            uri_480p_mp4: 'http://video.udacity-data.com.s3.amazonaws.com/topher/2017/March/58cc81c2_gitfinal-l1-13-gits-terminology/gitfinal-l1-13-gits-terminology_480p.mp4'
            uri_480p_1000kbps_mp4: 'http://video.udacity-data.com.s3.amazonaws.com/topher/2017/March/58cc81c2_gitfinal-l1-13-gits-terminology/gitfinal-l1-13-gits-terminology_480p_1000kbps.mp4'
            uri_480p_ogg: 'http://video.udacity-data.com.s3.amazonaws.com/topher/2017/March/58cc81c2_gitfinal-l1-13-gits-terminology/gitfinal-l1-13-gits-terminology_480p.ogg'
            uri_720p_mp4: 'http://video.udacity-data.com.s3.amazonaws.com/topher/2017/March/58cc81c2_gitfinal-l1-13-gits-terminology/gitfinal-l1-13-gits-terminology_720p.mp4'
            uri_hls: 'http://video.udacity-data.com.s3.amazonaws.com/topher/2017/March/58cc81c2_gitfinal-l1-13-gits-terminology/hls/playlist.m3u8'
      - id: 338744
        key: 5191cec1-dfc6-4b44-94b4-70058a4cbef7
        locale: zh-cn
        version: 1.0.0
        title: null
        semantic_type: TextAtom
        updated_at: 'Fri Jun 23 2017 07:34:58 GMT+0000 (UTC)'
        is_public: true
        text: You can find the Terminology handout in the Resources panel. The file is named Git Terms PDF and is in the Course Materials section.
        instructor_notes: ''
        resources: null
      - id: 338745
        key: 02d99b8b-b82c-4e15-8388-d96a0770a077
        locale: zh-cn
        version: 1.0.0
        title: null
        semantic_type: TextAtom
        updated_at: 'Fri Jun 23 2017 07:34:58 GMT+0000 (UTC)'
        is_public: true
        text: |-
          ## Terminology

          ## Version Control System / Source Code Manager
          A **version control system** (abbreviated as **VCS**) is a tool that manages different versions of source code. A **source code manager** (abbreviated as **SCM**) is another name for a version control system.

          Git is an SCM (and therefore a VCS!). The URL for the Git website is https://git-scm.com/ (see how it has "SCM" directly in its domain!).

          ## Commit
          Git thinks of its data like a set of snapshots of a mini filesystem. Every time you **commit** (save the state of your project in Git), it basically takes a picture of what all your files look like at that moment and stores a reference to that snapshot. You can think of it as a save point in a game - it saves your project's files and any information about them.

          Everything you do in Git is to help you make commits, so a commit is _the_ fundamental unit in Git. 

          ## Repository / repo
          A **repository** is a directory which contains your project work, as well as a few files (hidden by default on Mac OS X) which are used to communicate with Git. Repositories can exist either locally on your computer or as a remote copy on another computer. A repository is made up of commits.

          ## Working Directory
          The **Working Directory** is the files that you see in your computer's file system. When you open your project files up on a code editor, you're working with files in the Working Directory.

          This is in contrast to the files that have been saved (in commits!) in the repository.

          When working with Git, the Working Directory is also different from the command line's concept of the  _current working directory_ which is the directory that your shell is "looking at" right now.

          ## Checkout
          A **checkout** is when content in the repository has been copied to the Working Directory.

          ## Staging Area / Staging Index / Index
          A file in the Git directory that stores information about what will go into your next commit. You can think of the **staging area** as a prep table where Git will take the next commit. Files on the Staging Index are poised to be added to the repository.

          ## SHA
          A **SHA** is basically an ID number for each commit. Here's what a commit's SHA might look like: `e2adf8ae3e2e4ed40add75cc44cf9d0a869afeb6`.

          It is a 40-character string composed of characters (0â€“9 and aâ€“f) and calculated based on the contents of a file or directory structure in Git. "SHA" is shorthand for "Secure Hash Algorithm". If you're interested in learning about hashes, check out our [Intro to Computer Science course](https://www.udacity.com/course/intro-to-computer-science--cs101).


          ## Branch
          A **branch** is when a new line of development is created that diverges from the main line of development. This alternative line of development can continue without altering the main line.

          Going back to the example of save point in a game, you can think of a branch as where you make a save point in your game and then decide to try out a risky move in the game. If the risky move doesn't pan out, then you can just go back to the save point. The key thing that makes branches incredibly powerful is that you can make save points on one branch, and then switch to a different branch and make save points there, too. 

          With this terminology in mind, let's take a high-level look at how we'll be using Git by looking at the typical workflow when working with version control.
        instructor_notes: ''
        resources: null
      - id: 338746
        key: a3a2cbe9-97a0-4718-afe1-97c6c083b179
        locale: zh-cn
        version: 1.0.0
        title: Nd016 WebND Ud123 Gitcourse BETAMOJITO L1 15 Git The Big Picture
        semantic_type: VideoAtom
        updated_at: 'Wed Jun 28 2017 00:37:13 GMT+0000 (UTC)'
        is_public: true
        tags: []
        instructor_notes: ''
        resources: null
        video:
          id: '51019'
          youtube_id: dVil8e0yptQ
          subtitles: null
          transcodings:
            uri_480p_mp4: 'http://video.udacity-data.com.s3.amazonaws.com/topher/2017/March/58b9dbcf_nd016-webnd-ud123-gitcourse-betamojito-l1-15-git-the-big-picture/nd016-webnd-ud123-gitcourse-betamojito-l1-15-git-the-big-picture_480p.mp4'
            uri_480p_1000kbps_mp4: 'http://video.udacity-data.com.s3.amazonaws.com/topher/2017/March/58b9dbcf_nd016-webnd-ud123-gitcourse-betamojito-l1-15-git-the-big-picture/nd016-webnd-ud123-gitcourse-betamojito-l1-15-git-the-big-picture_480p_1000kbps.mp4'
            uri_480p_ogg: 'http://video.udacity-data.com.s3.amazonaws.com/topher/2017/March/58b9dbcf_nd016-webnd-ud123-gitcourse-betamojito-l1-15-git-the-big-picture/nd016-webnd-ud123-gitcourse-betamojito-l1-15-git-the-big-picture_480p.ogg'
            uri_720p_mp4: 'http://video.udacity-data.com.s3.amazonaws.com/topher/2017/March/58b9dbcf_nd016-webnd-ud123-gitcourse-betamojito-l1-15-git-the-big-picture/nd016-webnd-ud123-gitcourse-betamojito-l1-15-git-the-big-picture_720p.mp4'
            uri_hls: 'http://video.udacity-data.com.s3.amazonaws.com/topher/2017/March/58b9dbcf_nd016-webnd-ud123-gitcourse-betamojito-l1-15-git-the-big-picture/hls/playlist.m3u8'
      - id: 338747
        key: d115f7e2-a001-4ca1-a201-6941a4b8ec95
        locale: zh-cn
        version: 1.0.0
        title: What Gets Committed
        semantic_type: RadioQuizAtom
        updated_at: 'Fri Jun 23 2017 07:34:58 GMT+0000 (UTC)'
        is_public: true
        question:
          prompt: 'The HTML file has HTML and CSS changes on the Staging Index and an additional HTML change in the Working Directory. From what you''ve learned so far with how committing works, what do you think will get committed if a commit were made right now?'
          correct_feedback: 'Awesome Job! When a commit is made, only the changes that are in the Staging Index are saved in the repository.'
          video_feedback: null
          default_feedback: null
          answers:
            - id: a1485546208838
              text: only the HTML file changes on the Staging Index
              is_correct: false
              incorrect_feedback: null
            - id: a1485546224180
              text: only the CSS file changes on the Staging Index
              is_correct: false
              incorrect_feedback: null
            - id: a1485546229305
              text: the HTML and CSS file changes on the Staging Index
              is_correct: true
              incorrect_feedback: null
            - id: a1485546237338
              text: the HTML file changes in _both_ the Working Directory _and_ the Staging Index
              is_correct: false
              incorrect_feedback: null
      - id: 338748
        key: 7f9f44a7-d8c4-4b55-8968-49d77f20676d
        locale: zh-cn
        version: 1.0.0
        title: Nd016 WebND Ud123 Gitcourse BETAMOJITO L1 17 Git The Big Picture 2
        semantic_type: VideoAtom
        updated_at: 'Wed Jun 28 2017 00:37:13 GMT+0000 (UTC)'
        is_public: true
        tags: []
        instructor_notes: ''
        resources: null
        video:
          id: '51021'
          youtube_id: rFtUkk-sCqw
          subtitles: null
          transcodings:
            uri_480p_mp4: 'http://video.udacity-data.com.s3.amazonaws.com/topher/2017/March/58b9dbd0_nd016-webnd-ud123-gitcourse-betamojito-l1-17-git-the-big-picture-2/nd016-webnd-ud123-gitcourse-betamojito-l1-17-git-the-big-picture-2_480p.mp4'
            uri_480p_1000kbps_mp4: 'http://video.udacity-data.com.s3.amazonaws.com/topher/2017/March/58b9dbd0_nd016-webnd-ud123-gitcourse-betamojito-l1-17-git-the-big-picture-2/nd016-webnd-ud123-gitcourse-betamojito-l1-17-git-the-big-picture-2_480p_1000kbps.mp4'
            uri_480p_ogg: 'http://video.udacity-data.com.s3.amazonaws.com/topher/2017/March/58b9dbd0_nd016-webnd-ud123-gitcourse-betamojito-l1-17-git-the-big-picture-2/nd016-webnd-ud123-gitcourse-betamojito-l1-17-git-the-big-picture-2_480p.ogg'
            uri_720p_mp4: 'http://video.udacity-data.com.s3.amazonaws.com/topher/2017/March/58b9dbd0_nd016-webnd-ud123-gitcourse-betamojito-l1-17-git-the-big-picture-2/nd016-webnd-ud123-gitcourse-betamojito-l1-17-git-the-big-picture-2_720p.mp4'
            uri_hls: 'http://video.udacity-data.com.s3.amazonaws.com/topher/2017/March/58b9dbd0_nd016-webnd-ud123-gitcourse-betamojito-l1-17-git-the-big-picture-2/hls/playlist.m3u8'
      - id: 338749
        key: 0bbf17f7-de48-41a8-9a51-f9ef57c2be63
        locale: zh-cn
        version: 1.0.0
        title: Nd016 WebND Ud123 Gitcourse BETAMOJITO L1 18 Recap
        semantic_type: VideoAtom
        updated_at: 'Wed Jun 28 2017 00:37:13 GMT+0000 (UTC)'
        is_public: true
        tags: []
        instructor_notes: ''
        resources: null
        video:
          id: '51023'
          youtube_id: xqD9ImXXXHk
          subtitles: null
          transcodings:
            uri_480p_mp4: 'http://video.udacity-data.com.s3.amazonaws.com/topher/2017/March/58b9dbdc_nd016-webnd-ud123-gitcourse-betamojito-l1-18-recap/nd016-webnd-ud123-gitcourse-betamojito-l1-18-recap_480p.mp4'
            uri_480p_1000kbps_mp4: 'http://video.udacity-data.com.s3.amazonaws.com/topher/2017/March/58b9dbdc_nd016-webnd-ud123-gitcourse-betamojito-l1-18-recap/nd016-webnd-ud123-gitcourse-betamojito-l1-18-recap_480p_1000kbps.mp4'
            uri_480p_ogg: 'http://video.udacity-data.com.s3.amazonaws.com/topher/2017/March/58b9dbdc_nd016-webnd-ud123-gitcourse-betamojito-l1-18-recap/nd016-webnd-ud123-gitcourse-betamojito-l1-18-recap_480p.ogg'
            uri_720p_mp4: 'http://video.udacity-data.com.s3.amazonaws.com/topher/2017/March/58b9dbdc_nd016-webnd-ud123-gitcourse-betamojito-l1-18-recap/nd016-webnd-ud123-gitcourse-betamojito-l1-18-recap_720p.mp4'
            uri_hls: 'http://video.udacity-data.com.s3.amazonaws.com/topher/2017/March/58b9dbdc_nd016-webnd-ud123-gitcourse-betamojito-l1-18-recap/hls/playlist.m3u8'
  - id: 339070
    key: 63a6f935-dea7-43c2-aaa3-61deea5070c8
    locale: zh-cn
    version: 1.0.0
    title: Mac/Linux Setup
    semantic_type: Concept
    updated_at: 'Fri Jun 23 2017 07:34:59 GMT+0000 (UTC)'
    is_public: true
    resources:
      files:
        - name: udacity-terminal-config.zip
          uri: 'https://d17h27t6h515a5.cloudfront.net/topher/2017/March/58d31ce3_ud123-udacity-terminal-config/ud123-udacity-terminal-config.zip'
      google_plus_link: null
      career_resource_center_link: null
      coaching_appointments_link: null
      office_hours_link: null
    _atoms_ids:
      - 338750
      - 338751
      - 338754
      - 338755
      - 338753
      - 338752
      - 338756
    atoms:
      - id: 338750
        key: 8b2451b4-bb8f-4559-afeb-657c15e2e49a
        locale: zh-cn
        version: 1.0.0
        title: null
        semantic_type: TextAtom
        updated_at: 'Fri Jun 23 2017 07:34:58 GMT+0000 (UTC)'
        is_public: true
        text: |-
          ## Installing Git

          Git is actually installed on MacOS, but we'll be reinstalling it so that we'll have the newest version:
          1. go to https://git-scm.com/downloads
          * download the software for Mac
          * install Git choosing all of the default options

          Once everything is installed, you should be able to run `git` on the command line. If it displays the usage information, then you're good to go!

          If you run into any issues, let us know in the forum.
        instructor_notes: ''
        resources: null
      - id: 338751
        key: 92a9634c-3f0a-4335-b665-d26a012b1e51
        locale: zh-cn
        version: 1.0.0
        title: null
        semantic_type: TextAtom
        updated_at: 'Fri Jun 23 2017 07:34:58 GMT+0000 (UTC)'
        is_public: true
        text: |-
          ## Configuring Mac's Terminal

          We're about to configure the Terminal to display helpful information when in a directory that's under version control. _This is an optional step!_ You do not need to re-configure your terminal for Git to work. You can complete the entire course without reconfiguring it. However, reconfiguring the Terminal makes it significantly easier to use.

          If you choose to configure your Terminal, here's what it should look like when you're finished.
        instructor_notes: ''
        resources: null
      - id: 338754
        key: 79f44c8c-6841-46e8-bb66-e9280a5cafe4
        locale: zh-cn
        version: 1.0.0
        title: null
        semantic_type: ImageAtom
        updated_at: 'Fri Jun 23 2017 07:34:58 GMT+0000 (UTC)'
        is_public: true
        url: 'https://d17h27t6h515a5.cloudfront.net/topher/2017/February/58a76894_ud123-l1-terminal-config-mac/ud123-l1-terminal-config-mac.png'
        width: 842
        height: 569
        caption: _The terminal application on MacOS. The terminal has been configured to display version control information._
        resources: null
        instructor_notes: null
      - id: 338755
        key: 9d01aeac-8570-4018-9dc5-dfba363fccc9
        locale: zh-cn
        version: 1.0.0
        title: null
        semantic_type: TextAtom
        updated_at: 'Fri Jun 23 2017 07:34:58 GMT+0000 (UTC)'
        is_public: true
        text: |-
          ## Configuration Steps

          To configure the terminal, we'll perform the following steps:
          1. download the zipped file
          * move the directory `udacity-terminal-config` to your home directory and name it `.udacity-terminal-config` (there's a dot at the front, now!)
          * move the `bash_profile` file to your home directory and name it `.bash_profile` (there's a dot at the front, now!)
            * if you _already_ have a `.bash_profile` file in your home directory, transfer the content from the downloaded `bash_profile` to your existing `.bash_profile` 

          Download the zipped file in the Resources pane to get started.
        instructor_notes: ''
        resources: null
      - id: 338753
        key: 6d1a1dbf-d80b-42c3-a8c9-28023c62685e
        locale: zh-cn
        version: 1.0.0
        title: Nd016 WebND Ud123 Gitcourse BETAMOJITO L1 23 Configure Terminal
        semantic_type: VideoAtom
        updated_at: 'Wed Jun 28 2017 00:37:13 GMT+0000 (UTC)'
        is_public: true
        tags: []
        instructor_notes: ''
        resources: null
        video:
          id: '51024'
          youtube_id: h00n9QLfbqU
          subtitles: null
          transcodings:
            uri_480p_mp4: 'http://video.udacity-data.com.s3.amazonaws.com/topher/2017/March/58b9dbde_nd016-webnd-ud123-gitcourse-betamojito-l1-23-configure-terminal/nd016-webnd-ud123-gitcourse-betamojito-l1-23-configure-terminal_480p.mp4'
            uri_480p_1000kbps_mp4: 'http://video.udacity-data.com.s3.amazonaws.com/topher/2017/March/58b9dbde_nd016-webnd-ud123-gitcourse-betamojito-l1-23-configure-terminal/nd016-webnd-ud123-gitcourse-betamojito-l1-23-configure-terminal_480p_1000kbps.mp4'
            uri_480p_ogg: 'http://video.udacity-data.com.s3.amazonaws.com/topher/2017/March/58b9dbde_nd016-webnd-ud123-gitcourse-betamojito-l1-23-configure-terminal/nd016-webnd-ud123-gitcourse-betamojito-l1-23-configure-terminal_480p.ogg'
            uri_720p_mp4: 'http://video.udacity-data.com.s3.amazonaws.com/topher/2017/March/58b9dbde_nd016-webnd-ud123-gitcourse-betamojito-l1-23-configure-terminal/nd016-webnd-ud123-gitcourse-betamojito-l1-23-configure-terminal_720p.mp4'
            uri_hls: 'http://video.udacity-data.com.s3.amazonaws.com/topher/2017/March/58b9dbde_nd016-webnd-ud123-gitcourse-betamojito-l1-23-configure-terminal/hls/playlist.m3u8'
      - id: 338752
        key: ad3d8275-5c17-42e4-9017-e0ac9c8e0a88
        locale: zh-cn
        version: 1.0.0
        title: null
        semantic_type: TextAtom
        updated_at: 'Fri Jun 23 2017 07:34:58 GMT+0000 (UTC)'
        is_public: true
        text: |-
          ## First Time Git Configuration
          Before you can start using Git, you need to configure it. Run each of the following lines on the command line to make sure everything is set up.

          ```bash
          # sets up Git with your name
          git config --global user.name "<Your-Full-Name>"

          # sets up Git with your email
          git config --global user.email "<your-email-address>"

          # makes sure that Git output is colored
          git config --global color.ui auto

          # displays the original state in a conflict
          git config --global merge.conflictstyle diff3

          git config --list
          ```

          ### Git & Code Editor
          The last step of configuration is to get Git working with your code editor. Below are three of the most popular code editors. If you use a different editor, then do a quick search on Google for "associate X text editor with Git" (replace the X with the name of your code editor).

          ### Atom Editor Setup
          ```bash
          git config --global core.editor "atom --wait"
          ```

          ### Sublime Text Setup
          ```bash
          git config --global core.editor "'/Applications/Sublime Text 2.app/Contents/SharedSupport/bin/subl' -n -w"
          ```

          ### VSCode Setup
          ```bash
          git config --global core.editor "code --wait"
          ```

          If you have any questions, post them on the forum.
        instructor_notes: ''
        resources: null
      - id: 338756
        key: 63ec1410-2bf9-4fa9-9bb8-bcd8c24167cb
        locale: zh-cn
        version: 1.0.0
        title: Everything Is All Set Up
        semantic_type: TaskListAtom
        updated_at: 'Fri Jun 23 2017 07:34:58 GMT+0000 (UTC)'
        is_public: true
        tasks:
          - I've installed Git
          - I've configured Git with my username
          - I've configured Git with my email
          - I've configured Git to use my chosen editor
        positive_feedback: Fantastic work!
        video_feedback: null
        description: ''
  - id: 339075
    key: 8a5af628-7a18-49cf-bbc8-02691762f862
    locale: zh-cn
    version: 1.0.0
    title: Windows Setup
    semantic_type: Concept
    updated_at: 'Fri Jun 23 2017 07:34:59 GMT+0000 (UTC)'
    is_public: true
    resources:
      files:
        - name: udacity-terminal-config.zip
          uri: 'https://d17h27t6h515a5.cloudfront.net/topher/2017/March/58d31ce3_ud123-udacity-terminal-config/ud123-udacity-terminal-config.zip'
      google_plus_link: null
      career_resource_center_link: null
      coaching_appointments_link: null
      office_hours_link: null
    _atoms_ids:
      - 338785
      - 338786
      - 338787
      - 338788
      - 338789
      - 338790
    atoms:
      - id: 338785
        key: e3c2d9b8-c130-4bf0-90fd-26732bff8d42
        locale: zh-cn
        version: 1.0.0
        title: null
        semantic_type: TextAtom
        updated_at: 'Fri Jun 23 2017 07:34:58 GMT+0000 (UTC)'
        is_public: true
        text: |-
          ## Installing Git

          To download Git:
          1. go to https://git-scm.com/downloads
          * download the software for Windows
          * install Git choosing all of the default options

          Once everything is installed, you should be able to run `git` on the command line. If it displays the usage information, then you're good to go!

          If you run into any issues, let us know in the forum.
        instructor_notes: ''
        resources: null
      - id: 338786
        key: fa3446f7-6961-4703-8736-f55b294c017e
        locale: zh-cn
        version: 1.0.0
        title: null
        semantic_type: TextAtom
        updated_at: 'Fri Jun 23 2017 07:34:58 GMT+0000 (UTC)'
        is_public: true
        text: |-
          ## Configuring the Command Prompt on Windows

          We're about to configure the Command Prompt to display helpful information when in a directory that's under version control. _This is an optional step!_ You do not need to re-configure your Command Prompt for Git to work. You can complete the entire course without reconfiguring it. However, reconfiguring the Command Prompt makes it significantly easier to use.

          If you choose to configure your Command Prompt, here's what it should look like when you're finished.
        instructor_notes: ''
        resources: null
      - id: 338787
        key: 23134e2a-ada3-4325-8f0e-90800390fbae
        locale: zh-cn
        version: 1.0.0
        title: null
        semantic_type: ImageAtom
        updated_at: 'Fri Jun 23 2017 07:34:58 GMT+0000 (UTC)'
        is_public: true
        url: 'https://d17h27t6h515a5.cloudfront.net/topher/2017/February/58a768b5_ud123-l1-terminal-config-windows/ud123-l1-terminal-config-windows.png'
        width: 1806
        height: 990
        caption: _The Command Prompt application on Windows. The Command Prompt has been configured to display version control information._
        resources: null
        instructor_notes: null
      - id: 338788
        key: 8b6d8777-a73a-42c2-9be1-d25e9d637fbf
        locale: zh-cn
        version: 1.0.0
        title: Nd016 WebND Ud123 Gitcourse BETAMOJITO L1 30 Configure Terminal
        semantic_type: VideoAtom
        updated_at: 'Wed Jun 28 2017 00:37:12 GMT+0000 (UTC)'
        is_public: true
        tags: []
        instructor_notes: ''
        resources: null
        video:
          id: '51025'
          youtube_id: CCYjHfBk9hw
          subtitles: null
          transcodings:
            uri_480p_mp4: 'http://video.udacity-data.com.s3.amazonaws.com/topher/2017/March/58b9dbe2_nd016-webnd-ud123-gitcourse-betamojito-l1-30-configure-terminal/nd016-webnd-ud123-gitcourse-betamojito-l1-30-configure-terminal_480p.mp4'
            uri_480p_1000kbps_mp4: 'http://video.udacity-data.com.s3.amazonaws.com/topher/2017/March/58b9dbe2_nd016-webnd-ud123-gitcourse-betamojito-l1-30-configure-terminal/nd016-webnd-ud123-gitcourse-betamojito-l1-30-configure-terminal_480p_1000kbps.mp4'
            uri_480p_ogg: 'http://video.udacity-data.com.s3.amazonaws.com/topher/2017/March/58b9dbe2_nd016-webnd-ud123-gitcourse-betamojito-l1-30-configure-terminal/nd016-webnd-ud123-gitcourse-betamojito-l1-30-configure-terminal_480p.ogg'
            uri_720p_mp4: 'http://video.udacity-data.com.s3.amazonaws.com/topher/2017/March/58b9dbe2_nd016-webnd-ud123-gitcourse-betamojito-l1-30-configure-terminal/nd016-webnd-ud123-gitcourse-betamojito-l1-30-configure-terminal_720p.mp4'
            uri_hls: 'http://video.udacity-data.com.s3.amazonaws.com/topher/2017/March/58b9dbe2_nd016-webnd-ud123-gitcourse-betamojito-l1-30-configure-terminal/hls/playlist.m3u8'
      - id: 338789
        key: 4e9228e2-b4e9-440a-9a2b-ca8f1fbe69ad
        locale: zh-cn
        version: 1.0.0
        title: null
        semantic_type: TextAtom
        updated_at: 'Fri Jun 23 2017 07:34:58 GMT+0000 (UTC)'
        is_public: true
        text: |-
          ## First Time Git Configuration
          Before you can start using Git, you need to configure it. Run each of the following lines on the command line to make sure everything is set up.

          ```bash
          # sets up Git with your name
          git config --global user.name "<Your-Full-Name>"

          # sets up Git with your email
          git config --global user.email "<your-email-address>"

          # makes sure that Git output is colored
          git config --global color.ui auto

          # displays the original state in a conflict
          git config --global merge.conflictstyle diff3

          git config --list
          ```

          ### Git & Code Editor
          The last step of configuration is to get Git working with your code editor. Below are three of the most popular code editors. If you use a different editor, then do a quick search on Google for "associate X text editor with Git" (replace the X with the name of your code editor).

          ### Atom Editor Setup
          ```bash
          git config --global core.editor "atom --wait"
          ```

          ### Sublime Text Setup
          ```bash
          git config --global core.editor "C:/Program Files/Sublime Text 2/sublime_text.exe' -n -w"
          ```

          ### VSCode Setup
          ```bash
          git config --global core.editor "code --wait"
          ```

          If you have any questions, post them on the forum.
        instructor_notes: ''
        resources: null
      - id: 338790
        key: 9e019761-de2d-4096-b1e8-7f85805c3798
        locale: zh-cn
        version: 1.0.0
        title: Everything Is All Set Up
        semantic_type: TaskListAtom
        updated_at: 'Fri Jun 23 2017 07:34:58 GMT+0000 (UTC)'
        is_public: true
        tasks:
          - I've installed Git
          - I've configured Git with my username
          - I've configured Git with my email
          - I've configured Git to use my chosen editor
        positive_feedback: Fantastic work!
        video_feedback: null
        description: ''
  - id: 339071
    key: ed35219b-8119-4709-bc87-a554892d44fb
    locale: zh-cn
    version: 1.0.0
    title: Onward
    semantic_type: Concept
    updated_at: 'Fri Jun 23 2017 07:34:59 GMT+0000 (UTC)'
    is_public: true
    resources:
      files:
        - name: Git Terms PDF
          uri: 'https://d17h27t6h515a5.cloudfront.net/topher/2017/March/58d31eb5_ud123-git-keyterms/ud123-git-keyterms.pdf'
      google_plus_link: null
      career_resource_center_link: null
      coaching_appointments_link: null
      office_hours_link: null
    _atoms_ids:
      - 338757
    atoms:
      - id: 338757
        key: 777c8126-919f-4e4c-bc25-e78a80ec82af
        locale: zh-cn
        version: 1.0.0
        title: Onward
        semantic_type: VideoAtom
        updated_at: 'Wed Jun 28 2017 00:37:12 GMT+0000 (UTC)'
        is_public: true
        tags: []
        instructor_notes: ''
        resources: null
        video:
          id: '51665'
          youtube_id: iXbMaTwfIJI
          subtitles: null
          transcodings:
            uri_480p_mp4: 'http://video.udacity-data.com.s3.amazonaws.com/topher/2017/March/58cc81cb_gitfinal-l1-33-wrap-up/gitfinal-l1-33-wrap-up_480p.mp4'
            uri_480p_1000kbps_mp4: 'http://video.udacity-data.com.s3.amazonaws.com/topher/2017/March/58cc81cb_gitfinal-l1-33-wrap-up/gitfinal-l1-33-wrap-up_480p_1000kbps.mp4'
            uri_480p_ogg: 'http://video.udacity-data.com.s3.amazonaws.com/topher/2017/March/58cc81cb_gitfinal-l1-33-wrap-up/gitfinal-l1-33-wrap-up_480p.ogg'
            uri_720p_mp4: 'http://video.udacity-data.com.s3.amazonaws.com/topher/2017/March/58cc81cb_gitfinal-l1-33-wrap-up/gitfinal-l1-33-wrap-up_720p.mp4'
            uri_hls: 'http://video.udacity-data.com.s3.amazonaws.com/topher/2017/March/58cc81cb_gitfinal-l1-33-wrap-up/hls/playlist.m3u8'
