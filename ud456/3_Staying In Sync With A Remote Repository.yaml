id: 339331
key: e295524f-87b6-4981-af74-6b20231dc7c1
locale: zh-cn
version: 1.0.0
title: Staying In Sync With A Remote Repository
semantic_type: Lesson
updated_at: 'Fri Jun 23 2017 07:35:30 GMT+0000 (UTC)'
is_public: true
image:
  url: 'https://d17h27t6h515a5.cloudfront.net/topher/2017/April/58fa76e4_lesson-red/lesson-red.png'
  width: 500
  height: 500
video: null
summary: You'll learn how to send suggested changes to another developer by using pull requests. You'll also learn how to use the powerful `git rebase` command to squash commits together.
lesson_type: Classroom
duration: 120
is_project_lesson: false
_concepts_ids:
  - 339323
  - 339324
  - 339325
  - 339326
  - 339327
  - 339328
_project_id: null
concepts:
  - id: 339323
    key: e7123304-aa7e-477a-8586-47acf84d3407
    locale: zh-cn
    version: 1.0.0
    title: Intro
    semantic_type: Concept
    updated_at: 'Fri Jun 23 2017 07:35:29 GMT+0000 (UTC)'
    is_public: true
    resources: null
    _atoms_ids:
      - 339259
    atoms:
      - id: 339259
        key: 9f2b9a8a-fdee-4b69-a4e2-360657ab5fda
        locale: zh-cn
        version: 1.0.0
        title: Intro
        semantic_type: VideoAtom
        updated_at: 'Wed Jun 28 2017 00:37:08 GMT+0000 (UTC)'
        is_public: true
        tags: []
        instructor_notes: ''
        resources: null
        video:
          id: '53988'
          youtube_id: j5RmK0UHOTY
          subtitles: []
          transcodings:
            uri_480p_mp4: 'http://video.udacity-data.com.s3.amazonaws.com/topher/2017/April/58fad30d_l3-staying-in-sync-introduction/l3-staying-in-sync-introduction_480p.mp4'
            uri_480p_1000kbps_mp4: 'http://video.udacity-data.com.s3.amazonaws.com/topher/2017/April/58fad30d_l3-staying-in-sync-introduction/l3-staying-in-sync-introduction_480p_1000kbps.mp4'
            uri_480p_ogg: 'http://video.udacity-data.com.s3.amazonaws.com/topher/2017/April/58fad30d_l3-staying-in-sync-introduction/l3-staying-in-sync-introduction_480p.ogg'
            uri_720p_mp4: 'http://video.udacity-data.com.s3.amazonaws.com/topher/2017/April/58fad30d_l3-staying-in-sync-introduction/l3-staying-in-sync-introduction_720p.mp4'
            uri_hls: 'http://video.udacity-data.com.s3.amazonaws.com/topher/2017/April/58fad30d_l3-staying-in-sync-introduction/hls/playlist.m3u8'
  - id: 339324
    key: 9c0c0dd5-225e-44a4-9257-a584a7829207
    locale: zh-cn
    version: 1.0.0
    title: Create a Pull Request
    semantic_type: Concept
    updated_at: 'Fri Jun 23 2017 07:35:29 GMT+0000 (UTC)'
    is_public: true
    resources: null
    _atoms_ids:
      - 339261
      - 339263
      - 339262
      - 339260
      - 339264
      - 339265
      - 339266
    atoms:
      - id: 339261
        key: 7698e027-2da0-4c51-b09d-e0ae1396337f
        locale: zh-cn
        version: 1.0.0
        title: null
        semantic_type: TextAtom
        updated_at: 'Fri Jun 23 2017 07:35:29 GMT+0000 (UTC)'
        is_public: true
        text: |-
          A **pull request** is a request to the _original_ or _source repository's_ maintainer to include changes in their project that you made in your fork of their project. You are requesting that they _pull_ in changes you've made.

          Let's get a high-level overview of what this entails and then we'll dig into the details.
        instructor_notes: ''
        resources: null
      - id: 339263
        key: 44e122e8-b8c8-41f3-9113-b628fba6d208
        locale: zh-cn
        version: 1.0.0
        title: L3 - Pull Request In Theory
        semantic_type: VideoAtom
        updated_at: 'Wed Jun 28 2017 00:37:08 GMT+0000 (UTC)'
        is_public: true
        tags: []
        instructor_notes: ''
        resources: null
        video:
          id: '53847'
          youtube_id: twLr9ndsf90
          subtitles: []
          transcodings:
            uri_480p_mp4: 'http://video.udacity-data.com.s3.amazonaws.com/topher/2017/April/58f82c65_l3-pull-request-in-theory/l3-pull-request-in-theory_480p.mp4'
            uri_480p_1000kbps_mp4: 'http://video.udacity-data.com.s3.amazonaws.com/topher/2017/April/58f82c65_l3-pull-request-in-theory/l3-pull-request-in-theory_480p_1000kbps.mp4'
            uri_480p_ogg: 'http://video.udacity-data.com.s3.amazonaws.com/topher/2017/April/58f82c65_l3-pull-request-in-theory/l3-pull-request-in-theory_480p.ogg'
            uri_720p_mp4: 'http://video.udacity-data.com.s3.amazonaws.com/topher/2017/April/58f82c65_l3-pull-request-in-theory/l3-pull-request-in-theory_720p.mp4'
            uri_hls: 'http://video.udacity-data.com.s3.amazonaws.com/topher/2017/April/58f82c65_l3-pull-request-in-theory/hls/playlist.m3u8'
      - id: 339262
        key: 8b162ee4-d3f6-447b-9d58-114045ba676d
        locale: zh-cn
        version: 1.0.0
        title: null
        semantic_type: TextAtom
        updated_at: 'Fri Jun 23 2017 07:35:29 GMT+0000 (UTC)'
        is_public: true
        text: |-
          Let's walk through the steps to issue a pull request of our own! If you've been following along then you've forked Lam's [travel plans repository](https://github.com/udacity/course-collaboration-travel-plans) to your own account, and you've made one or two additional commits to your forked version.

          In the previous lesson, I created a topic branch called `include-richards-destinations`, added a few commits to it, and pushed that branch to GitHub. Remember that when you're creating a good pull request you want to have changes on a branch that's sole reason to exist is for these changes. Remember the name for these types of branches?...topic branches!
        instructor_notes: ''
        resources: null
      - id: 339260
        key: 0cb6d0f1-458f-4995-bc17-d79a83f9d201
        locale: zh-cn
        version: 1.0.0
        title: ''
        semantic_type: TaskListAtom
        updated_at: 'Fri Jun 23 2017 07:35:29 GMT+0000 (UTC)'
        is_public: true
        tasks:
          - 'I have _forked_ Lam''s [project](https://github.com/udacity/course-collaboration-travel-plans)'
          - I have created a topic branch with a descriptive name
          - I have made at least one commit on my branch
          - I have pushed my changes back to _my_ fork
        positive_feedback: 'Perfect, let''s continue!'
        video_feedback: null
        description: 'We''re about to create a pull request (how exciting!), so let''s make sure we''ve both got the same setup. Please answer the following:'
      - id: 339264
        key: 1a758402-7a7a-4a8b-b026-c80c20f0af8b
        locale: zh-cn
        version: 1.0.0
        title: L3 - Pull Request In Action
        semantic_type: VideoAtom
        updated_at: 'Wed Jun 28 2017 00:37:08 GMT+0000 (UTC)'
        is_public: true
        tags: []
        instructor_notes: ''
        resources: null
        video:
          id: '53846'
          youtube_id: d3AGtKmHxUk
          subtitles: []
          transcodings:
            uri_480p_mp4: 'http://video.udacity-data.com.s3.amazonaws.com/topher/2017/April/58f82c64_l3-pull-request-in-action/l3-pull-request-in-action_480p.mp4'
            uri_480p_1000kbps_mp4: 'http://video.udacity-data.com.s3.amazonaws.com/topher/2017/April/58f82c64_l3-pull-request-in-action/l3-pull-request-in-action_480p_1000kbps.mp4'
            uri_480p_ogg: 'http://video.udacity-data.com.s3.amazonaws.com/topher/2017/April/58f82c64_l3-pull-request-in-action/l3-pull-request-in-action_480p.ogg'
            uri_720p_mp4: 'http://video.udacity-data.com.s3.amazonaws.com/topher/2017/April/58f82c64_l3-pull-request-in-action/l3-pull-request-in-action_720p.mp4'
            uri_hls: 'http://video.udacity-data.com.s3.amazonaws.com/topher/2017/April/58f82c64_l3-pull-request-in-action/hls/playlist.m3u8'
      - id: 339265
        key: fa47cde8-dbfb-4897-b834-ba14e8e92a05
        locale: zh-cn
        version: 1.0.0
        title: null
        semantic_type: TextAtom
        updated_at: 'Fri Jun 23 2017 07:35:29 GMT+0000 (UTC)'
        is_public: true
        text: "You just created a pull request! Congratulations! \uD83D\uDE4C\uD83C\uDFFC  \n\nAs you can see, it's actually not too difficult to create a pull request. When I was first learning Git, GitHub, and how to collaborate, I was extremely nervous about making commits, and working with remote repos, but _especially_ submitting a pull request to another developer's project! As long as you following the steps we covered in the previous section on:\n\n* reviewing the project's CONTRIBUTING.md file\n* checking out the project's existing issues\n* talking with the project maintainer\n\n...your pull request is sure to be included!"
        instructor_notes: ''
        resources: null
      - id: 339266
        key: e4bcad56-8eae-42a9-af8c-7056db0a953b
        locale: zh-cn
        version: 1.0.0
        title: null
        semantic_type: TextAtom
        updated_at: 'Fri Jun 23 2017 07:35:29 GMT+0000 (UTC)'
        is_public: true
        text: |-
          ## Recap

          A pull request is a _request_ for the source repository to pull in your commits and merge them with their project. To create a pull request, a couple of things need to happen:

          * you must _fork_ the source repository
          * clone your fork down to your machine
          * make some commits (ideally on a topic branch!)
          * push the commits back to _your fork_
          * create a new pull request and choose the branch that has your new commits
        instructor_notes: ''
        resources: null
  - id: 339325
    key: 48825e17-72c6-4c3e-9c98-1add66bf1c86
    locale: zh-cn
    version: 1.0.0
    title: Stay in sync with source project
    semantic_type: Concept
    updated_at: 'Fri Jun 23 2017 07:35:30 GMT+0000 (UTC)'
    is_public: true
    resources: null
    _atoms_ids:
      - 339267
      - 339268
      - 339269
      - 339270
      - 339271
      - 339272
      - 339273
      - 339274
      - 339275
      - 339276
      - 339277
      - 339278
      - 339279
      - 339280
      - 339281
      - 339282
      - 339283
      - 339284
      - 339285
      - 339286
      - 339287
      - 339288
      - 339289
      - 339290
      - 339291
    atoms:
      - id: 339267
        key: 76c48385-b2b0-48ce-ba2f-f98d1348f57f
        locale: zh-cn
        version: 1.0.0
        title: null
        semantic_type: TextAtom
        updated_at: 'Fri Jun 23 2017 07:35:29 GMT+0000 (UTC)'
        is_public: true
        text: |-
          While you're working on a topic branch of changes that you want to make to a repository, that repository will probably be receiving updates of its own from the original authors.

          ## Stars & Watching

          If you want to keep up-to-date with the Repository, GitHub offers a convenient way to keep track of repositories - it lets you star repositories:
        instructor_notes: ''
        resources: null
      - id: 339268
        key: 36312520-fe97-43d6-a05b-eb31a2d0f82b
        locale: zh-cn
        version: 1.0.0
        title: null
        semantic_type: ImageAtom
        updated_at: 'Fri Jun 23 2017 07:35:29 GMT+0000 (UTC)'
        is_public: true
        url: 'https://d17h27t6h515a5.cloudfront.net/topher/2017/April/58fe7831_ud456-l3-03-starred-repos/ud456-l3-03-starred-repos.png'
        width: 2488
        height: 1804
        caption: _The Star button and level for a repository._
        resources: null
        instructor_notes: null
      - id: 339269
        key: 164240b7-1e6e-4ce3-93e6-c6d10b8612e9
        locale: zh-cn
        version: 1.0.0
        title: null
        semantic_type: TextAtom
        updated_at: 'Fri Jun 23 2017 07:35:29 GMT+0000 (UTC)'
        is_public: true
        text: |-
          You can go to [https://github.com/stars](https://github.com/stars) to list out and filter all of the repositories that you have starred.

          Starring is helpful if you want to keep track of certain repositories. But it's not entirely helpful if you need to actively keep up with a repositories development because you have to manually go to the stars page to view the repositories and see if they've changed.
        instructor_notes: ''
        resources: null
      - id: 339270
        key: 25aec41d-867b-4c52-a337-c028c27e1018
        locale: zh-cn
        version: 1.0.0
        title: null
        semantic_type: TextAtom
        updated_at: 'Fri Jun 23 2017 07:35:29 GMT+0000 (UTC)'
        is_public: true
        text: "> ## \uD83D\uDCA1 Stars & Popularity \uD83D\uDCA1 \n\n> Starring can be a useful feature to help you keep track of repositories you're interested in. But stars have also turned into a means of measuring a repo's popularity.\n\n> If you'd rather not increase a repository's stars, then check out \"watching\" a repository. Let's look at that right now!"
        instructor_notes: ''
        resources: null
      - id: 339271
        key: ec67a777-ade4-432d-b157-e9e1881c8bb2
        locale: zh-cn
        version: 1.0.0
        title: null
        semantic_type: TextAtom
        updated_at: 'Fri Jun 23 2017 07:35:29 GMT+0000 (UTC)'
        is_public: true
        text: |-
          ## Watching A Repository

          If you need to keep up with a project's changes and want to be notified of when things change, GitHub offers a "Watch" feature:
        instructor_notes: ''
        resources: null
      - id: 339272
        key: 48779c51-3415-43aa-b5fe-e86ab9d080ef
        locale: zh-cn
        version: 1.0.0
        title: null
        semantic_type: ImageAtom
        updated_at: 'Fri Jun 23 2017 07:35:29 GMT+0000 (UTC)'
        is_public: true
        url: 'https://d17h27t6h515a5.cloudfront.net/topher/2017/April/58fe792c_ud456-l3-03-watched-repos/ud456-l3-03-watched-repos.png'
        width: 2488
        height: 1804
        caption: _The Notification settings. "Watching" a repository will alert you to all activity._
        resources: null
        instructor_notes: null
      - id: 339273
        key: 8e0eb746-a3cd-4a42-acaf-42f23582776f
        locale: zh-cn
        version: 1.0.0
        title: null
        semantic_type: TextAtom
        updated_at: 'Fri Jun 23 2017 07:35:29 GMT+0000 (UTC)'
        is_public: true
        text: |-
          If you're working on a repository quite often, then I'd suggest setting the watch setting to "Watching". This way GitHub will notify you whenever anything happens with the repository like people pushing changes to the repository, new issues being created, or comments being added to existing issues.

          ## Including Upstream Changes

          Now that you know about watching your repository let say that you're watching it and you get notified that some commits have been pushed to the original, source repository. How do you go about getting those changes into your fork of the repository? If you want to keep doing development on your fork then you'd need your fork to stay in sync with the source repository as much as possible.

          Let's see how we can get these changes from the remote repository into our repository.
        instructor_notes: ''
        resources: null
      - id: 339274
        key: 80ab8111-2bf9-4c30-98b7-dda3a4cb9d96
        locale: zh-cn
        version: 1.0.0
        title: L3 - Include Upstream Changes
        semantic_type: VideoAtom
        updated_at: 'Wed Jun 28 2017 00:37:08 GMT+0000 (UTC)'
        is_public: true
        tags: []
        instructor_notes: ''
        resources: null
        video:
          id: '53845'
          youtube_id: VvoC6hN6FjU
          subtitles: []
          transcodings:
            uri_480p_mp4: 'http://video.udacity-data.com.s3.amazonaws.com/topher/2017/April/58f82c5e_l3-include-upstream-changes/l3-include-upstream-changes_480p.mp4'
            uri_480p_1000kbps_mp4: 'http://video.udacity-data.com.s3.amazonaws.com/topher/2017/April/58f82c5e_l3-include-upstream-changes/l3-include-upstream-changes_480p_1000kbps.mp4'
            uri_480p_ogg: 'http://video.udacity-data.com.s3.amazonaws.com/topher/2017/April/58f82c5e_l3-include-upstream-changes/l3-include-upstream-changes_480p.ogg'
            uri_720p_mp4: 'http://video.udacity-data.com.s3.amazonaws.com/topher/2017/April/58f82c5e_l3-include-upstream-changes/l3-include-upstream-changes_720p.mp4'
            uri_hls: 'http://video.udacity-data.com.s3.amazonaws.com/topher/2017/April/58f82c5e_l3-include-upstream-changes/hls/playlist.m3u8'
      - id: 339275
        key: 09d31170-e300-435e-aed4-262d2ba163d7
        locale: zh-cn
        version: 1.0.0
        title: null
        semantic_type: TextAtom
        updated_at: 'Fri Jun 23 2017 07:35:29 GMT+0000 (UTC)'
        is_public: true
        text: |-
          Incase Lam starts making changes to her project that I won't have in my fork of her project, I'll add her project as an additional remote so that I can stay in sync with her. 

          In my local repository, I already have one remote repository which is `origin` remote.
        instructor_notes: ''
        resources: null
      - id: 339276
        key: fc74e87f-ac23-464a-bd17-bd8921b14b2a
        locale: zh-cn
        version: 1.0.0
        title: null
        semantic_type: ImageAtom
        updated_at: 'Fri Jun 23 2017 07:35:29 GMT+0000 (UTC)'
        is_public: true
        url: 'https://d17h27t6h515a5.cloudfront.net/topher/2017/April/58ffad47_ud456-l3-03-git-remotes-origin/ud456-l3-03-git-remotes-origin.png'
        width: 1578
        height: 468
        caption: _The terminal application showing the existing connect to the remote repository. This is my remote repository and has the shortname `origin`._
        resources: null
        instructor_notes: null
      - id: 339277
        key: 31f98264-5422-4db7-9baf-58f3958462b3
        locale: zh-cn
        version: 1.0.0
        title: null
        semantic_type: TextAtom
        updated_at: 'Fri Jun 23 2017 07:35:29 GMT+0000 (UTC)'
        is_public: true
        text: |-
          Remember that the word `origin` is just the _default_ name that's used when you `git clone` a remote repository for the first time. We're going to use the `git remote` command to _add a new_ shortname and URL to this list. This will give us a connection to the source repository.

          ```bash
          $ git remote add upstream https://github.com/udacity/course-collaboration-travel-plans.git
          ```

          Notice that I've used the name `upstream`  as the shortname to reference the source repository. As with the `origin` shortname, the word `upstream` here is not special in any way; It's just a regular word. This could have been any word... like the word "banana". But the word "upstream" is typically used to refer to the source repository. 

          Let's check out what the list of remotes looks like now after adding this new remote:
        instructor_notes: ''
        resources: null
      - id: 339278
        key: 20480517-b24c-4a93-a14e-58467ff65116
        locale: zh-cn
        version: 1.0.0
        title: null
        semantic_type: ImageAtom
        updated_at: 'Fri Jun 23 2017 07:35:29 GMT+0000 (UTC)'
        is_public: true
        url: 'https://d17h27t6h515a5.cloudfront.net/topher/2017/April/58ffae1a_ud456-l3-03-add-upstream-remote/ud456-l3-03-add-upstream-remote.png'
        width: 1578
        height: 534
        caption: _The terminal application show both information about both remotes - `origin` and `upstream`._
        resources: null
        instructor_notes: null
      - id: 339279
        key: d9b8b8ae-94de-4c09-9cc8-79a2f05b0de5
        locale: zh-cn
        version: 1.0.0
        title: null
        semantic_type: TextAtom
        updated_at: 'Fri Jun 23 2017 07:35:29 GMT+0000 (UTC)'
        is_public: true
        text: |-
          ### Origin vs Upstream Clarification

          One thing that can be a tiny bit confusing right now is the difference between the `origin` and `upstream`. What might be confusing is that `origin` does _not_ refer to the source repository (also known as the _"original"_ repository) that we forked from. Instead, it's pointing to our forked repository. So even though it has the word `origin` is not actually the original repository.

          Remember that the names `origin` and `upstream` are just the default or de facto names that are used. If it's clearer for you to name your `origin` remote `mine` and the `upstream` remote `source-repo`, then by all means, go ahead and rename them. What you name your remote repositories in your local repository does not affect the source repository at all.
        instructor_notes: ''
        resources: null
      - id: 339280
        key: 82a1122b-4eea-476f-bebf-607e6ae54291
        locale: zh-cn
        version: 1.0.0
        title: null
        semantic_type: ImageAtom
        updated_at: 'Fri Jun 23 2017 07:35:29 GMT+0000 (UTC)'
        is_public: true
        url: 'https://d17h27t6h515a5.cloudfront.net/topher/2017/April/58ffae73_ud456-l3-03-rename-repos/ud456-l3-03-rename-repos.png'
        width: 1578
        height: 600
        caption: _Using the `git remote rename` command to rename `origin` to `mine` and `upstream` to `source-repo`._
        resources: null
        instructor_notes: null
      - id: 339281
        key: a2073b15-ed95-494d-b6c2-46e7fe48f189
        locale: zh-cn
        version: 1.0.0
        title: null
        semantic_type: TextAtom
        updated_at: 'Fri Jun 23 2017 07:35:29 GMT+0000 (UTC)'
        is_public: true
        text: |-
          > ## ⚠️ Resetting Remote Names ⚠️ 

          > The image above demos the renaming of the remotes, but I have returned them to their default/defacto names of `origin` and `upstream` with the following commands:

          > ```bash
          $ git remote rename mine origin
          $ git remote rename source-repo upstream
          ```
        instructor_notes: ''
        resources: null
      - id: 339282
        key: 3d4e1516-1a21-4dc2-8073-20a75feea9ba
        locale: zh-cn
        version: 1.0.0
        title: null
        semantic_type: TextAtom
        updated_at: 'Fri Jun 23 2017 07:35:29 GMT+0000 (UTC)'
        is_public: true
        text: |-
          ## Pulling Upstream Changes

          Now to get the changes from upstream remote repository, all we have to do is run a `git pull` and use the `upstream` shortname rather than the `origin` shortname:

          ```bash
          $ git pull upstream master
          ```
        instructor_notes: ''
        resources: null
      - id: 339283
        key: de0df242-f98a-48fd-ae43-8830688c7712
        locale: zh-cn
        version: 1.0.0
        title: null
        semantic_type: ImageAtom
        updated_at: 'Fri Jun 23 2017 07:35:29 GMT+0000 (UTC)'
        is_public: true
        url: 'https://d17h27t6h515a5.cloudfront.net/topher/2017/April/58ffb75c_ud456-l3-03-fetch-upstream-changes/ud456-l3-03-fetch-upstream-changes.png'
        width: 1194
        height: 501
        caption: _The terminal application showing the results of doing `git fetch upstream master`.  A new branch is added to the local repository._
        resources: null
        instructor_notes: null
      - id: 339284
        key: 83130709-9151-4d47-be32-a6fd3642bb45
        locale: zh-cn
        version: 1.0.0
        title: ''
        semantic_type: RadioQuizAtom
        updated_at: 'Fri Jun 23 2017 07:35:29 GMT+0000 (UTC)'
        is_public: true
        question:
          prompt: 'Now that you''ve added a connection to the new `upstream` remote repository, if you run `git fetch upstream master` will that update _your forked repository_ on GitHub?'
          correct_feedback: 'No. `git fetch` only updates the local repository. To update the project on GitHub, we''d need to push these newly acquired commits to our fork.'
          video_feedback: null
          default_feedback: Think about the differences between `git fetch` and `git push`. Does running `git fetch` _send_ changes or _get_ changes?
          answers:
            - id: a1493148150986
              text: 'Yes'
              is_correct: false
              incorrect_feedback: null
            - id: a1493148182704
              text: 'No'
              is_correct: true
              incorrect_feedback: null
      - id: 339285
        key: 38d3a369-88b2-455d-9b0a-9410bbdc8b2c
        locale: zh-cn
        version: 1.0.0
        title: null
        semantic_type: TextAtom
        updated_at: 'Fri Jun 23 2017 07:35:29 GMT+0000 (UTC)'
        is_public: true
        text: |-
          Now that we've fetched all of the changes from the upstream remote repository, let's do a log to see what new information we have in our local repository. I'm using the following `git log` command to make sure I display _all_ commits from _all_ branches (including remote and tracking branches!):

          ```bash
          $ git log --oneline --graph --decorate --all
          ```
        instructor_notes: ''
        resources: null
      - id: 339286
        key: 9c008dee-3ebd-4d4f-9d8e-f7efca695589
        locale: zh-cn
        version: 1.0.0
        title: null
        semantic_type: ImageAtom
        updated_at: 'Fri Jun 23 2017 07:35:29 GMT+0000 (UTC)'
        is_public: true
        url: 'https://d17h27t6h515a5.cloudfront.net/topher/2017/April/58ffb7d1_ud456-l3-03-git-log-of-upstream-changes/ud456-l3-03-git-log-of-upstream-changes.png'
        width: 1626
        height: 633
        caption: _The terminal application showing the log of my local repository after fetching  the `upstream` remote's changes._
        resources: null
        instructor_notes: null
      - id: 339287
        key: 0035b77a-fc0f-47b2-ae7a-c7ee5ed25525
        locale: zh-cn
        version: 1.0.0
        title: null
        semantic_type: TextAtom
        updated_at: 'Fri Jun 23 2017 07:35:29 GMT+0000 (UTC)'
        is_public: true
        text: |-
          It can be a bit difficult to read with the wrapping of the commit messages but you should be able to see that there is now an `upstream/master` remote branch that is ahead of the local `master` branch. `upstream/master` is on commit `52e493f` while the `master` branch is on commit `1c12194`. 

          We can use the `upstream/master` branch to keep track of where the source repository's master branch is. We can now get any changes that are made to the source repository's `master` branch by just running `git fetch upstream master`.
        instructor_notes: ''
        resources: null
      - id: 339288
        key: 3cdd8858-156e-4232-957a-d3154151a475
        locale: zh-cn
        version: 1.0.0
        title: ''
        semantic_type: ValidatedQuizAtom
        updated_at: 'Fri Jun 23 2017 07:35:29 GMT+0000 (UTC)'
        is_public: true
        question:
          prompt: |-
            Using `git fetch upstream master` pulled in the changes from the `master` branch on the `upstream` remote repository.

            What single command would we use if we want to fetch the `upstream/master` changes _and_ merge them into the `master` branch?
          default_feedback: Remember back to the lesson on remotes where we looked at making connections to remotes and fetching commits from them? Does any Git command stand out that might do exactly what we're looking for here?
          correct_feedback: Remember from the lesson on remotes that a `git pull` is the same thing as a `git fetch` + `git merge`!
          video_feedback: null
          matchers:
            - semantic_type: RegexMatcher
              is_correct: true
              expression: git pull upstream
              expression_description: ''
              flags: i
              incorrect_feedback: null
            - semantic_type: RegexMatcher
              is_correct: true
              expression: git pull upstream master
              expression_description: null
              flags: i
              incorrect_feedback: null
      - id: 339289
        key: 4ef786ab-256e-4193-b87c-8330f61d2571
        locale: zh-cn
        version: 1.0.0
        title: null
        semantic_type: TextAtom
        updated_at: 'Fri Jun 23 2017 07:35:29 GMT+0000 (UTC)'
        is_public: true
        text: 'To push these new changes from the Lam''s repository, we don''t want to run `git push origin upstream/master` because `upstream/master` is not a local branch. To get these changes into my forked version of her project, I could merge `upstream/master` into an existing branch (like the local `master` branch) and push that.'
        instructor_notes: ''
        resources: null
      - id: 339290
        key: 66f3b024-5606-47fc-a88f-cb9ad6097b42
        locale: zh-cn
        version: 1.0.0
        title: null
        semantic_type: TextAtom
        updated_at: 'Fri Jun 23 2017 07:35:29 GMT+0000 (UTC)'
        is_public: true
        text: |-
          ```bash
          # to make sure I'm on the correct branch for merging
          $ git checkout master

          # merge in Lam's changes
          $ git merge upstream/master

          # send Lam's changes to *my* remote
          $ git push origin master
          ```
        instructor_notes: ''
        resources: null
      - id: 339291
        key: e1fa4d15-7bd8-49bc-a3b1-306aa1fe649b
        locale: zh-cn
        version: 1.0.0
        title: null
        semantic_type: TextAtom
        updated_at: 'Fri Jun 23 2017 07:35:29 GMT+0000 (UTC)'
        is_public: true
        text: |-
          ## Recap

          When working with a project that you've forked. The original project's maintainer will continue adding changes to their project. You'll want to keep your fork of their project in sync with theirs so that you can include any changes they make.

          To get commits from a source repository into your forked repository on GitHub you need to:

          * get the cloneable URL of the source repository
          * create a new remote with the `git remote add` command 
              - use the shortname `upstream` to point to the source repository
              - provide the URL of the source repository
          * fetch the new `upstream` remote
          * merge the `upstream`'s branch into a local branch
          * push the newly updated local branch to your `origin` repo
        instructor_notes: ''
        resources: null
  - id: 339326
    key: adbf1b90-e1c6-4502-8856-d5207bff78b5
    locale: zh-cn
    version: 1.0.0
    title: Manage an active PR
    semantic_type: Concept
    updated_at: 'Fri Jun 23 2017 07:35:30 GMT+0000 (UTC)'
    is_public: true
    resources: null
    _atoms_ids:
      - 339292
      - 339293
      - 339294
      - 339295
      - 339296
      - 339297
    atoms:
      - id: 339292
        key: 70b9b211-f856-40ed-94c0-019230daa57a
        locale: zh-cn
        version: 1.0.0
        title: null
        semantic_type: TextAtom
        updated_at: 'Fri Jun 23 2017 07:35:29 GMT+0000 (UTC)'
        is_public: true
        text: The project maintainer may decide not to accept your changes right away. They might request you to make some additional changes to your code before accepting your request and merging in your changes. Most likely they will communicate their desired changes through the conversation on the pull requests page.
        instructor_notes: ''
        resources: null
      - id: 339293
        key: 0c35a392-5bdb-4ed6-ba1f-874420db2cc6
        locale: zh-cn
        version: 1.0.0
        title: null
        semantic_type: ImageAtom
        updated_at: 'Fri Jun 23 2017 07:35:29 GMT+0000 (UTC)'
        is_public: true
        url: 'https://d17h27t6h515a5.cloudfront.net/topher/2017/April/58fe8556_ud456-l3-04-pull-request-comment/ud456-l3-04-pull-request-comment.png'
        width: 2722
        height: 1808
        caption: _The project's maintainer is requesting some changes be made in the pull request._
        resources: null
        instructor_notes: null
      - id: 339294
        key: 56cd73ac-c17b-40b9-a6bb-0491fec33acf
        locale: zh-cn
        version: 1.0.0
        title: null
        semantic_type: TextAtom
        updated_at: 'Fri Jun 23 2017 07:35:29 GMT+0000 (UTC)'
        is_public: true
        text: |-
          We can see that the source repository's owner has commented and asked us to combine the commits together.

          One thing that I've grown to love about both the Git command line tool and the GitHub interface is how helpful they are with recommendations on what to do next. Near the bottom of the comments, there's a suggestion by GitHub that tells us how to add more commit; we need to add them to the same branch and push to my fork:

          > Add more commits by pushing to the **include-richards-destinations** branch on **richardkalehoff/course-collaboration-travel-plan**.
        instructor_notes: ''
        resources: null
      - id: 339295
        key: 146d0073-6ea6-496f-94eb-f356e6c87acd
        locale: zh-cn
        version: 1.0.0
        title: null
        semantic_type: TextAtom
        updated_at: 'Fri Jun 23 2017 07:35:29 GMT+0000 (UTC)'
        is_public: true
        text: |-
          When submit a pull request, remember that another developer add _your_ code changes to their project. If they ask you to make some minor (even major!) changes to your pull request, that doesn't mean they're rejecting your work! It just means that they would like the code added to their project in a certain way.

          The CONTRIBUTING.md file should be used to list out all information that the project's maintainer wants, so make sure to follow the information there. But that doesn't mean there might be times where the project's maintainer will ask you to do a few additional things.

          So what should you do? Well, if you want your pull request to be accepted, then you make the change! Remember that the tab in GitHub is called the "Conversation" tab. So feel free to communicate back and forth with the project's maintainer to clarify exactly what they want you to do.

          It also wouldn't hurt to thank them for taking the time to look over your pull request. Most of the developers that are working on open source projects are doing it unpaid. So remember to:

          * be kind - the project's maintainer is a regular person just like you
          * be patient - they will respond as soon as they are able
        instructor_notes: ''
        resources: null
      - id: 339296
        key: eaa55cf0-1669-44b5-87fd-12ffadc11d45
        locale: zh-cn
        version: 1.0.0
        title: null
        semantic_type: TextAtom
        updated_at: 'Fri Jun 23 2017 07:35:29 GMT+0000 (UTC)'
        is_public: true
        text: So Lam is asking that I combine my changes together before she'll merge in my pull request. Combining commits together is a process called squashing. Let's look at how to do that!
        instructor_notes: ''
        resources: null
      - id: 339297
        key: adb65081-2d11-49b9-8120-f9eb05fb4f28
        locale: zh-cn
        version: 1.0.0
        title: null
        semantic_type: TextAtom
        updated_at: 'Fri Jun 23 2017 07:35:29 GMT+0000 (UTC)'
        is_public: true
        text: |-
          ## Recap

          As simple as at may seem, working on an active pull request is mostly about communication!

          If the project's maintainer is requesting changes to the pull request, then:

          * make any necessary commits on the same branch in your local repository that your pull request is based on
          * push the branch to the _your_ fork of the source repository

          The commits will then show up on the pull request page.
        instructor_notes: ''
        resources: null
  - id: 339327
    key: 3d9fb9c8-47bc-4dbd-a6d3-09b006be24e4
    locale: zh-cn
    version: 1.0.0
    title: Squash Commits
    semantic_type: Concept
    updated_at: 'Fri Jun 23 2017 07:35:30 GMT+0000 (UTC)'
    is_public: true
    resources: null
    _atoms_ids:
      - 339298
      - 339299
      - 339300
      - 339301
      - 339303
      - 339302
      - 339304
      - 339305
      - 339306
      - 339307
      - 339308
    atoms:
      - id: 339298
        key: 55b4bce4-914e-4331-b75a-254aea2efb67
        locale: zh-cn
        version: 1.0.0
        title: L3 - Squashing Introduction
        semantic_type: VideoAtom
        updated_at: 'Wed Jun 28 2017 00:37:08 GMT+0000 (UTC)'
        is_public: true
        tags: []
        instructor_notes: ''
        resources: null
        video:
          id: '53850'
          youtube_id: mRbeT2XVL9w
          subtitles: []
          transcodings:
            uri_480p_mp4: 'http://video.udacity-data.com.s3.amazonaws.com/topher/2017/April/58f82c72_l3-squashing-introduction/l3-squashing-introduction_480p.mp4'
            uri_480p_1000kbps_mp4: 'http://video.udacity-data.com.s3.amazonaws.com/topher/2017/April/58f82c72_l3-squashing-introduction/l3-squashing-introduction_480p_1000kbps.mp4'
            uri_480p_ogg: 'http://video.udacity-data.com.s3.amazonaws.com/topher/2017/April/58f82c72_l3-squashing-introduction/l3-squashing-introduction_480p.ogg'
            uri_720p_mp4: 'http://video.udacity-data.com.s3.amazonaws.com/topher/2017/April/58f82c72_l3-squashing-introduction/l3-squashing-introduction_720p.mp4'
            uri_hls: 'http://video.udacity-data.com.s3.amazonaws.com/topher/2017/April/58f82c72_l3-squashing-introduction/hls/playlist.m3u8'
      - id: 339299
        key: b3d71bbe-4fc1-473b-8f0c-6601a01b829d
        locale: zh-cn
        version: 1.0.0
        title: null
        semantic_type: TextAtom
        updated_at: 'Fri Jun 23 2017 07:35:29 GMT+0000 (UTC)'
        is_public: true
        text: |-
          To squash commits together, we're going to use the extremely powerful `git rebase` command. This is one of my _favorite_ commands, but it did take me _quite_ a while to become comfortable with it. At first, it was somewhat challenging for me to get a handle on how it works, and then (after reading countless warnings online) I was scared to actually use it for fear of irreparably damaging my project's Git history.

          But I'm here to tell you that `git rebase` isn't really all that difficult, and that you can bravely make changes to your repository without fear of doing any damage! (<-- quite the claim, isn't it!?!)

          Let's first get a big picture idea of how squashing works, and then we'll actually do some squashing with the `git rebase` command.
        instructor_notes: ''
        resources: null
      - id: 339300
        key: 34e4b2aa-52e3-4755-a4fd-6c89d950d9fc
        locale: zh-cn
        version: 1.0.0
        title: L3 - Squashing In Theory
        semantic_type: VideoAtom
        updated_at: 'Wed Jun 28 2017 00:37:08 GMT+0000 (UTC)'
        is_public: true
        tags: []
        instructor_notes: ''
        resources: null
        video:
          id: '53849'
          youtube_id: H5JqcdIB5y0
          subtitles: []
          transcodings:
            uri_480p_mp4: 'http://video.udacity-data.com.s3.amazonaws.com/topher/2017/April/58f82c6c_l3-squashing-in-theory/l3-squashing-in-theory_480p.mp4'
            uri_480p_1000kbps_mp4: 'http://video.udacity-data.com.s3.amazonaws.com/topher/2017/April/58f82c6c_l3-squashing-in-theory/l3-squashing-in-theory_480p_1000kbps.mp4'
            uri_480p_ogg: 'http://video.udacity-data.com.s3.amazonaws.com/topher/2017/April/58f82c6c_l3-squashing-in-theory/l3-squashing-in-theory_480p.ogg'
            uri_720p_mp4: 'http://video.udacity-data.com.s3.amazonaws.com/topher/2017/April/58f82c6c_l3-squashing-in-theory/l3-squashing-in-theory_720p.mp4'
            uri_hls: 'http://video.udacity-data.com.s3.amazonaws.com/topher/2017/April/58f82c6c_l3-squashing-in-theory/hls/playlist.m3u8'
      - id: 339301
        key: 40827622-0a26-405d-b683-e9b999c1bccc
        locale: zh-cn
        version: 1.0.0
        title: null
        semantic_type: TextAtom
        updated_at: 'Fri Jun 23 2017 07:35:29 GMT+0000 (UTC)'
        is_public: true
        text: |-
          The command I used is:

          ```bash
          $ git rebase -i HEAD~3
          ```
          ## The Rebase Command

          The `git rebase` command will move commits to have a _new base_. In the command `git rebase -i HEAD~3`, we're telling Git to use `HEAD~3` as the base where all of the other commits (`HEAD~2`, `HEAD~1`, and `HEAD`) will connect to.

          The `-i` in the command stands for "interactive". You _can_ perform a rebase in a non-interactive mode. While you're learning how to rebase, though, I definitely recommend that you do _interactive_ rebasing.

          ### Ancestry References

          As a brief refresher, `HEAD` indicates your current location (it could point to several things, but typically it'll either point to a branch name or directly to a commit's SHA). The `~3` part means "three before", so `HEAD~3` will be the commit that's three before the one you're currently on. We're using this relative reference to a commit in the `git rebase` command.

          Let me demonstrate how to use this command to combine the three destination commits into one.
        instructor_notes: ''
        resources: null
      - id: 339303
        key: 235f2fa7-47ee-48d1-ad8c-a6fee8a61919
        locale: zh-cn
        version: 1.0.0
        title: L3 - Squashing In Action
        semantic_type: VideoAtom
        updated_at: 'Wed Jun 28 2017 00:37:08 GMT+0000 (UTC)'
        is_public: true
        tags: []
        instructor_notes: ''
        resources: null
        video:
          id: '53848'
          youtube_id: cL6ehKtJLUM
          subtitles: []
          transcodings:
            uri_480p_mp4: 'http://video.udacity-data.com.s3.amazonaws.com/topher/2017/April/58f82c6c_l3-squashing-in-action/l3-squashing-in-action_480p.mp4'
            uri_480p_1000kbps_mp4: 'http://video.udacity-data.com.s3.amazonaws.com/topher/2017/April/58f82c6c_l3-squashing-in-action/l3-squashing-in-action_480p_1000kbps.mp4'
            uri_480p_ogg: 'http://video.udacity-data.com.s3.amazonaws.com/topher/2017/April/58f82c6c_l3-squashing-in-action/l3-squashing-in-action_480p.ogg'
            uri_720p_mp4: 'http://video.udacity-data.com.s3.amazonaws.com/topher/2017/April/58f82c6c_l3-squashing-in-action/l3-squashing-in-action_720p.mp4'
            uri_hls: 'http://video.udacity-data.com.s3.amazonaws.com/topher/2017/April/58f82c6c_l3-squashing-in-action/hls/playlist.m3u8'
      - id: 339302
        key: ce4722f0-fcb4-4db7-8c8c-1f15d5b35cf3
        locale: zh-cn
        version: 1.0.0
        title: ''
        semantic_type: CheckboxQuizAtom
        updated_at: 'Fri Jun 23 2017 07:35:29 GMT+0000 (UTC)'
        is_public: true
        question:
          prompt: |-
            In the command:

            ```bash
            $ git rebase -i HEAD~3
            ```

            ...the `HEAD~3` is an ancestry reference to a commit that will act as the new base for the commits that are being rebased.

            Which of the following could be used as a reference to a base?
          correct_feedback: That's correct! You can use any of these as a reference to the location where the newly-rebased commits will branch off from.
          video_feedback: null
          default_feedback: '`HEAD~3` is an ancestry reference to a commit. Which of these can reference commits?'
          answers:
            - id: a1493144164979
              text: a SHA
              is_correct: true
              incorrect_feedback: null
            - id: a1493144244997
              text: a branch name
              is_correct: true
              incorrect_feedback: null
            - id: a1493144253355
              text: a tag name
              is_correct: true
              incorrect_feedback: null
      - id: 339304
        key: 1b87749b-82b2-4202-9410-5c09f03b1689
        locale: zh-cn
        version: 1.0.0
        title: null
        semantic_type: TextAtom
        updated_at: 'Fri Jun 23 2017 07:35:29 GMT+0000 (UTC)'
        is_public: true
        text: |-
          ### Force Pushing

          In the video, I had to force push the branch. I had to do this because GitHub was trying to prevent me from accidentally deleting commits. Because I used the `git rebase` command, I effectively _erased_ the three separate commits that recorded my addition of Florida, Paris, and Scotland. I used `git rebase` to combine or _squash_ all of these commits into one, single commit.

          Using `git rebase` creates a new commit with a new SHA. When I tried using `git push` to send this commit up to GitHub, GitHub knew that accepting the push would erase the three separate commits, so it rejected it. So I had to _force push_ the commits through using `git push -f`.
        instructor_notes: ''
        resources: null
      - id: 339305
        key: fd398816-cbab-4bd6-8109-25a296cb59de
        locale: zh-cn
        version: 1.0.0
        title: null
        semantic_type: TextAtom
        updated_at: 'Fri Jun 23 2017 07:35:29 GMT+0000 (UTC)'
        is_public: true
        text: |-
          > ### ⚠️ Force Pushing ⚠️ 

          > In this instance, force pushing my commits was necessary. But if you try to push commits and GitHub rejects them, it's trying to help you, so make sure to review what commits you're pushing _and_ the commits that are on GitHub to verify you're not about to overwrite content on your remote repository accidentally!
        instructor_notes: ''
        resources: null
      - id: 339306
        key: 5c549443-06ea-4591-8b80-8b75c1abd4da
        locale: zh-cn
        version: 1.0.0
        title: null
        semantic_type: TextAtom
        updated_at: 'Fri Jun 23 2017 07:35:29 GMT+0000 (UTC)'
        is_public: true
        text: "## Rebase Commands\n\nLet's take another look at the different commands that you can do with `git rebase`:\n\n* use `p` or `pick` – to keep the commit as is\n* use `r` or `reword` –\_to keep the commit's content but alter the commit message\n* use `e` or `edit` – to keep the commit's content but stop before committing so that you can:\n    - add new content or files\n    - remove content or files\n    - alter the content that was going to be committed \n* use `s` or `squash` – to combine this commit's changes into the previous commit (the commit above it in the list)\n* use `f` or `fixup` – to combine this commit's change into the previous one but drop the commit message\n* use `x` or `exec` – to run a shell command\n* use `d` or `drop` – to delete the commit"
        instructor_notes: ''
        resources: null
      - id: 339307
        key: e4316542-7573-412e-92ab-3beb35065b61
        locale: zh-cn
        version: 1.0.0
        title: null
        semantic_type: TextAtom
        updated_at: 'Fri Jun 23 2017 07:35:29 GMT+0000 (UTC)'
        is_public: true
        text: |-
          ## When to rebase

          As you've seen, the `git rebase` command is incredibly powerful. It can help you edit commit messages, reorder commits, combine commits, etc. So it truly is a powerhouse of a tool. Now the question becomes "_When_ should you rebase?". 

          Whenever you rebase commits, Git will create a new SHA _for each commit_! This has drastic implications. To Git, the SHA is the identifier for a commit, so a different identifier means it's a different commit, _regardless if the content has changed at all._ 

          So you should not rebase if you have already pushed the commits you want to rebase. If you're collaborating with other developers, then they might already be working with the commits you've pushed. If you then use `git rebase` to change things around and then force push the commits, then the other developers will now be out of sync with the remote repository.  They will have to do some complicated surgery to their Git repository to get their repo back in a working state...and it might not even be possible for them to do that; they might just have to scrap all of their work and start over with your newly-rebased, force-pushed commits.
        instructor_notes: ''
        resources: null
      - id: 339308
        key: af0247b0-56a1-44fd-9001-63ce2cc6ad96
        locale: zh-cn
        version: 1.0.0
        title: null
        semantic_type: TextAtom
        updated_at: 'Fri Jun 23 2017 07:35:29 GMT+0000 (UTC)'
        is_public: true
        text: |-
          ## Recap

          The `git rebase` command is used to do a great many things.

          ```bash
          # interactive rebase
          $ git rebase -i <base>

          # interactively rebase the commits to the one that's 3 before the one we're on
          $ git rebase -i HEAD~3
          ```

          Inside the interactive list of commits, all commits start out as `pick`, but you can swap that out with one of the other commands (`reword`, `edit`, `squash`, `fixup`, `exec`, and `drop`).

          I recommend that you create a `backup` branch _before_ rebasing, so that it's easy to return to your previous state. If you're happy with the rebase, then you can just delete the `backup` branch!

          ### Further Research
          * [Git Branching - Rebasing](https://git-scm.com/book/en/v2/Git-Branching-Rebasing) from the Git Book
          * [git-rebase](https://git-scm.com/docs/git-rebase) from the Git Docs
          * [https://www.atlassian.com/git/tutorials/rewriting-history#git-rebase](https://www.atlassian.com/git/tutorials/rewriting-history#git-rebase) from the Atlassian blog
        instructor_notes: ''
        resources: null
  - id: 339328
    key: 168d2c0e-4ae3-4c6b-a704-1ed321e53c42
    locale: zh-cn
    version: 1.0.0
    title: Course Wrap Up
    semantic_type: Concept
    updated_at: 'Fri Jun 23 2017 07:35:30 GMT+0000 (UTC)'
    is_public: true
    resources: null
    _atoms_ids:
      - 339309
      - 339310
      - 339311
    atoms:
      - id: 339309
        key: f7d960ab-99a9-4167-a5d6-12206764dd3f
        locale: zh-cn
        version: 1.0.0
        title: null
        semantic_type: TextAtom
        updated_at: 'Fri Jun 23 2017 07:35:29 GMT+0000 (UTC)'
        is_public: true
        text: |-
          I just want to briefly run through all of the new and amazing skills you've acquired taking this course. You now know:

          * how to set up remote repositories
          * how to push changes to a remote repository and get changes from it
          * how to fork a repository
          * the initial steps to take when you start working on a new feature or change to the project
          * how to create a pull request
          * and the importance of communicating clearly and frequently with the other stakeholders in the project
        instructor_notes: ''
        resources: null
      - id: 339310
        key: 2db6b305-f5b4-4448-894d-f50d76dfea87
        locale: zh-cn
        version: 1.0.0
        title: Course Wrap Up
        semantic_type: VideoAtom
        updated_at: 'Wed Jun 28 2017 00:37:08 GMT+0000 (UTC)'
        is_public: true
        tags: []
        instructor_notes: ''
        resources: null
        video:
          id: '53843'
          youtube_id: 66Ut8Bv6kgc
          subtitles: []
          transcodings:
            uri_480p_mp4: 'http://video.udacity-data.com.s3.amazonaws.com/topher/2017/April/58f82c5a_l3-course-outro/l3-course-outro_480p.mp4'
            uri_480p_1000kbps_mp4: 'http://video.udacity-data.com.s3.amazonaws.com/topher/2017/April/58f82c5a_l3-course-outro/l3-course-outro_480p_1000kbps.mp4'
            uri_480p_ogg: 'http://video.udacity-data.com.s3.amazonaws.com/topher/2017/April/58f82c5a_l3-course-outro/l3-course-outro_480p.ogg'
            uri_720p_mp4: 'http://video.udacity-data.com.s3.amazonaws.com/topher/2017/April/58f82c5a_l3-course-outro/l3-course-outro_720p.mp4'
            uri_hls: 'http://video.udacity-data.com.s3.amazonaws.com/topher/2017/April/58f82c5a_l3-course-outro/hls/playlist.m3u8'
      - id: 339311
        key: 3f5c8514-1c02-432e-97a0-c96be69eaf17
        locale: zh-cn
        version: 1.0.0
        title: null
        semantic_type: TextAtom
        updated_at: 'Fri Jun 23 2017 07:35:29 GMT+0000 (UTC)'
        is_public: true
        text: |-
          * [http://up-for-grabs.net/](http://up-for-grabs.net/#/)
          * [http://www.firsttimersonly.com/](http://www.firsttimersonly.com/)
          * [first-timers-only label on GitHub](https://github.com/search?utf8=%E2%9C%93&q=label%3Afirst-timers-only+is%3Aopen&type=Issues&ref=searchresults)
          * ["first timers only" blog post](https://medium.com/@kentcdodds/first-timers-only-78281ea47455)

          Wanna see what a developer's very first pull request is? Check out at [http://firstpr.me/](http://firstpr.me/)
        instructor_notes: ''
        resources: null
