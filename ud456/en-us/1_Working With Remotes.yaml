id: 293439
key: edde9226-f71c-4a81-a858-4c83e4c7b664
locale: en-us
version: 1.0.0
title: Working With Remotes
semantic_type: Lesson
updated_at: 'Wed Jul 05 2017 21:04:41 GMT+0000 (UTC)'
is_public: true
image:
  url: 'https://d17h27t6h515a5.cloudfront.net/topher/2017/April/58fa76e4_lesson-red/lesson-red.png'
  width: 500
  height: 500
video: null
summary: You'll learn how to create remote repositories on GitHub and how to get and send changes to the remote repository.
lesson_type: Classroom
duration: 120
is_project_lesson: false
_concepts_ids:
  - 293442
  - 293443
  - 293555
  - 293444
  - 293451
  - 293452
  - 293453
_project_id: null
concepts:
  - id: 293442
    key: 1ad9f705-8b0e-403e-a903-4a757d8ede17
    locale: en-us
    version: 1.0.0
    title: Intro
    semantic_type: Concept
    updated_at: 'Sun Apr 23 2017 23:01:41 GMT+0000 (UTC)'
    is_public: true
    resources: null
    _atoms_ids:
      - 299690
      - 293463
    atoms:
      - id: 299690
        key: cc1d18ef-86c1-4628-b887-8f9682104289
        locale: en-us
        version: 1.0.0
        title: Intro
        semantic_type: VideoAtom
        updated_at: 'Wed Jun 28 2017 00:37:55 GMT+0000 (UTC)'
        is_public: true
        tags: []
        instructor_notes: ''
        resources: null
        video:
          id: '53733'
          youtube_id: SBUOhyXcR1Q
          subtitles:
            - url: 'https://s3.amazonaws.com/video.udacity-data.com/topher/2017/April/58f6f255_l1-github-course-introduction/subtitles/lang_en_vs1.srt'
              language_code: en
          transcodings:
            uri_480p_mp4: 'http://video.udacity-data.com.s3.amazonaws.com/topher/2017/April/58f6f255_l1-github-course-introduction/l1-github-course-introduction_480p.mp4'
            uri_480p_1000kbps_mp4: 'http://video.udacity-data.com.s3.amazonaws.com/topher/2017/April/58f6f255_l1-github-course-introduction/l1-github-course-introduction_480p_1000kbps.mp4'
            uri_480p_ogg: 'http://video.udacity-data.com.s3.amazonaws.com/topher/2017/April/58f6f255_l1-github-course-introduction/l1-github-course-introduction_480p.ogg'
            uri_720p_mp4: 'http://video.udacity-data.com.s3.amazonaws.com/topher/2017/April/58f6f255_l1-github-course-introduction/l1-github-course-introduction_720p.mp4'
            uri_hls: 'http://video.udacity-data.com.s3.amazonaws.com/topher/2017/April/58f6f255_l1-github-course-introduction/hls/playlist.m3u8'
      - id: 293463
        key: e19d9181-4427-4b72-9eee-50691ad1c9b8
        locale: en-us
        version: 1.0.0
        title: null
        semantic_type: TextAtom
        updated_at: 'Tue Jul 25 2017 22:58:31 GMT+0000 (UTC)'
        is_public: true
        text: |-
          ## Expected Knowledge

          * creating repositories with `git init` and `git clone`
          * reviewing repos with `git status`
          * using `git log` and `git show` to review past commits
          * being able to make commits with `git add`
          * commit them to the repo with `git commit`
          * you need to know about branching, merging branches together, and resolving merge conflicts
          * and being able to undo things in Git:
              * `git commit --amend` to undo the most recent commit or to change the wording of the commit message
              * and `git reset`
          If you're comfortable with all of these, then you'll be good to go for this course.

          If you're new to Version control or Git, check out the [Version Control with Git course](https://udacity.com/courses/ud123).
        instructor_notes: ''
        resources: null
  - id: 293443
    key: 1a7c8b4d-804b-465b-90cb-94c2fdef8f65
    locale: en-us
    version: 1.0.0
    title: Remote Repositories
    semantic_type: Concept
    updated_at: 'Tue Apr 25 2017 21:11:33 GMT+0000 (UTC)'
    is_public: true
    resources: null
    _atoms_ids:
      - 293464
      - 293465
      - 299691
      - 293468
      - 300466
      - 293470
      - 299692
      - 293551
      - 300467
      - 293553
      - 293554
    atoms:
      - id: 293464
        key: 249489b5-19ee-4755-a96e-423704db0637
        locale: en-us
        version: 1.0.0
        title: null
        semantic_type: TextAtom
        updated_at: 'Wed Apr 12 2017 22:28:00 GMT+0000 (UTC)'
        is_public: true
        text: |-
          ## Collaboration Setup

          As a lone developer, you're probably comfortable working with a _local_ repository. In this first lesson, we're going to talk about **remote repositories** and interacting with these remote repositories.

          Let's say that you have a friend, we'll call her Farrin, and one day you two were together and you showed her what you've been working on. She had some ideas on features she could contribute to the project. But you don't want to give her *your* computer for her to make these changes, you want her to work on her computer. And, you don't want to have to *wait* for her to add these features, you want to keep working on the project and then just merge in her changes with she's finished. So how can we do that?

          Well, let me tell you that emailing the project back and forth would be a maintenance nightmare after about two emails. You're already tracking your project with Git, so we'll use _it_ to manage everything.

          So Farrin will work on the project on a specific branch and any changes she makes she'll add to that branch. While she's working in her branch, you'll work on the project but on your own specific branch. And then you can merge these branches together when you get the branch from Farrin.
        instructor_notes: ''
        resources: null
      - id: 293465
        key: edd8c7b4-e7c0-4e46-b12f-6ed87af79bb6
        locale: en-us
        version: 1.0.0
        title: null
        semantic_type: TextAtom
        updated_at: 'Wed Apr 12 2017 22:25:24 GMT+0000 (UTC)'
        is_public: true
        text: ">  ## \uD83D\uDCA1 Always Use Topic Branches\n\n> Remember that it's incredibly helpful to make all of your commits on descriptively named **topic branches**. Branches help isolate unrelated changes from each other.\n\n> So when you're collaborating with other developers make sure to create a new branch that has a descriptive name that describes what changes it contains."
        instructor_notes: ''
        resources: null
      - id: 299691
        key: 7bec0847-7e2c-4c90-b276-1b41fac21087
        locale: en-us
        version: 1.0.0
        title: L1 - Remote Repos Intro
        semantic_type: VideoAtom
        updated_at: 'Wed Jun 28 2017 00:37:55 GMT+0000 (UTC)'
        is_public: true
        tags: []
        instructor_notes: ''
        resources: null
        video:
          id: '53736'
          youtube_id: AnSlYftJnwA
          subtitles:
            - url: 'https://s3.amazonaws.com/video.udacity-data.com/topher/2017/April/58f6f26b_l1-remote-repos-intro/subtitles/lang_en_vs1.srt'
              language_code: en
          transcodings:
            uri_480p_mp4: 'http://video.udacity-data.com.s3.amazonaws.com/topher/2017/April/58f6f26b_l1-remote-repos-intro/l1-remote-repos-intro_480p.mp4'
            uri_480p_1000kbps_mp4: 'http://video.udacity-data.com.s3.amazonaws.com/topher/2017/April/58f6f26b_l1-remote-repos-intro/l1-remote-repos-intro_480p_1000kbps.mp4'
            uri_480p_ogg: 'http://video.udacity-data.com.s3.amazonaws.com/topher/2017/April/58f6f26b_l1-remote-repos-intro/l1-remote-repos-intro_480p.ogg'
            uri_720p_mp4: 'http://video.udacity-data.com.s3.amazonaws.com/topher/2017/April/58f6f26b_l1-remote-repos-intro/l1-remote-repos-intro_720p.mp4'
            uri_hls: 'http://video.udacity-data.com.s3.amazonaws.com/topher/2017/April/58f6f26b_l1-remote-repos-intro/hls/playlist.m3u8'
      - id: 293468
        key: a77d0ab8-e98a-4634-93b8-2eb48137de80
        locale: en-us
        version: 1.0.0
        title: null
        semantic_type: TextAtom
        updated_at: 'Wed Apr 12 2017 22:35:54 GMT+0000 (UTC)'
        is_public: true
        text: |-
          ## What is a Remote Repository?

          Git is a _distributed_ version control system which means there is not _one_ main repository of information. Each developer has a _copy_ of the repository. So you can have a copy of the repository (which includes the published commits and version history) and your friend can also have a copy of the same repository. Each repository has the exact same information that the other ones have, there's no one repository that's the main one. 

          Up until this point, you have probably been only working locally on a _local_ repository. A _remote_ repository is the same Git repository like yours but it exists somewhere else.
        instructor_notes: ''
        resources: null
      - id: 300466
        key: 17feefb5-7b5a-45ff-8cff-199fc93c6c72
        locale: en-us
        version: 1.0.0
        title: null
        semantic_type: ImageAtom
        updated_at: 'Tue Apr 25 2017 21:10:40 GMT+0000 (UTC)'
        is_public: true
        url: 'https://d17h27t6h515a5.cloudfront.net/topher/2017/April/58ffbb45_ud456-l1-02-local-and-remote-repos/ud456-l1-02-local-and-remote-repos.png'
        width: 1920
        height: 1080
        caption: '_A local repository is the one that you work on in your local machine. Remote repositories live elsewhere (e.g. a friend''s computer, GitHub, etc.)_'
        resources: null
        instructor_notes: null
      - id: 293470
        key: 989e2749-78b5-489c-9364-9a8f7e7994d0
        locale: en-us
        version: 1.0.0
        title: null
        semantic_type: TextAtom
        updated_at: 'Wed Apr 12 2017 22:39:10 GMT+0000 (UTC)'
        is_public: true
        text: |-
          ## Ways to access a Remote

          Remotes can be accessed in a couple of ways:

          * with a URL
          * path to a file system

          Even though it's possible to create a remote repository on your file system, it's very rarely used. By far the most common way to access a remote repository is through a URL to a repository that’s out on the web. 

          The way we can interact and control a remote repository is through the Git remote command:

          ```bash
          $ git remote
          ```
        instructor_notes: ''
        resources: null
      - id: 299692
        key: a2a7536b-8723-4406-907a-bd677f69a9df
        locale: en-us
        version: 1.0.0
        title: L1 - Sending Branches To Remote
        semantic_type: VideoAtom
        updated_at: 'Sat Jul 01 2017 16:19:35 GMT+0000 (UTC)'
        is_public: true
        tags: []
        instructor_notes: ''
        resources: null
        video:
          id: '53737'
          youtube_id: 414f0ukhOTY
          subtitles:
            - url: 'https://s3.amazonaws.com/video.udacity-data.com/topher/2017/April/58f6f26b_l1-sending-branches-to-remote/subtitles/lang_en_vs1.srt'
              language_code: en
          transcodings:
            uri_480p_mp4: 'http://video.udacity-data.com.s3.amazonaws.com/topher/2017/April/58f6f26b_l1-sending-branches-to-remote/l1-sending-branches-to-remote_480p.mp4'
            uri_480p_1000kbps_mp4: 'http://video.udacity-data.com.s3.amazonaws.com/topher/2017/April/58f6f26b_l1-sending-branches-to-remote/l1-sending-branches-to-remote_480p_1000kbps.mp4'
            uri_480p_ogg: 'http://video.udacity-data.com.s3.amazonaws.com/topher/2017/April/58f6f26b_l1-sending-branches-to-remote/l1-sending-branches-to-remote_480p.ogg'
            uri_720p_mp4: 'http://video.udacity-data.com.s3.amazonaws.com/topher/2017/April/58f6f26b_l1-sending-branches-to-remote/l1-sending-branches-to-remote_720p.mp4'
            uri_hls: 'http://video.udacity-data.com.s3.amazonaws.com/topher/2017/April/58f6f26b_l1-sending-branches-to-remote/hls/playlist.m3u8'
      - id: 293551
        key: 88c49327-2290-4af7-8642-ef37f8328165
        locale: en-us
        version: 1.0.0
        title: null
        semantic_type: TextAtom
        updated_at: 'Wed Apr 12 2017 22:40:49 GMT+0000 (UTC)'
        is_public: true
        text: You're also not limited to just one remote. You can add as many remote repositories  as you want!
        instructor_notes: ''
        resources: null
      - id: 300467
        key: fbbde604-5978-4814-b3ab-872d82dcfa30
        locale: en-us
        version: 1.0.0
        title: null
        semantic_type: ImageAtom
        updated_at: 'Tue Apr 25 2017 21:11:25 GMT+0000 (UTC)'
        is_public: true
        url: 'https://d17h27t6h515a5.cloudfront.net/topher/2017/April/58ffbb5c_ud456-l1-02-multiple-remote-repos/ud456-l1-02-multiple-remote-repos.png'
        width: 1920
        height: 1080
        caption: _A local repository can be connected to more than one remote repository._
        resources: null
        instructor_notes: null
      - id: 293553
        key: f3de33d7-b2f9-44d5-85bd-8851f1acee54
        locale: en-us
        version: 1.0.0
        title: null
        semantic_type: TextAtom
        updated_at: 'Wed Apr 12 2017 22:43:52 GMT+0000 (UTC)'
        is_public: true
        text: |-
          ## Why Multiple Remotes?

          Why would you want to have multiple remote repositories? We'll look at this later but briefly, if you are working with multiple developers then you might want to get changes _they're_ working on in their branch(es) into _your_ project before they merge them into the master branch. You might want to do this if you want to test out their change before you decide to implement your changes.

          Another example is if you have a project whose code is hosted on Github but deploys via Git to Heroku. You would have one remote for the `master` and one for the `deployment`.
        instructor_notes: ''
        resources: null
      - id: 293554
        key: 41f4069b-5a0c-42eb-96e6-a92dd4dd466c
        locale: en-us
        version: 1.0.0
        title: null
        semantic_type: TextAtom
        updated_at: 'Wed Apr 12 2017 22:46:32 GMT+0000 (UTC)'
        is_public: true
        text: |-
          ## Make a Remote

          Now that we've learned about the purpose of remote repositories, let's add a remote repository to our own local one.
        instructor_notes: ''
        resources: null
  - id: 293555
    key: 27f11e0c-50d8-47d5-bf18-ac2eed717386
    locale: en-us
    version: 1.0.0
    title: Add A Remote Repository
    semantic_type: Concept
    updated_at: 'Mon Apr 24 2017 18:41:05 GMT+0000 (UTC)'
    is_public: true
    resources: null
    _atoms_ids:
      - 297409
      - 298969
      - 298972
      - 298977
      - 298976
      - 298982
      - 298983
      - 298984
      - 298986
      - 298987
      - 298988
      - 298989
      - 298990
      - 298991
      - 298992
      - 298995
      - 298996
      - 298999
      - 299004
      - 299005
      - 299006
      - 299007
      - 299008
      - 299010
      - 299012
      - 299015
      - 299020
      - 299021
      - 299693
      - 299025
      - 299039
      - 299045
      - 299044
      - 299040
      - 299027
      - 300041
      - 299036
      - 299038
      - 299037
    atoms:
      - id: 297409
        key: 78cf2d21-993a-4f74-9f94-de605ce56579
        locale: en-us
        version: 1.0.0
        title: null
        semantic_type: TextAtom
        updated_at: 'Fri Apr 14 2017 18:52:59 GMT+0000 (UTC)'
        is_public: true
        text: |-
          ## The Git Remote Command
          The `git remote` command will let you manage and interact with remote repositories.

          ```bash
          $ git remote
          ```

          Try running this command on a local repository that you haven't shared with anyone yet. What do you get?
        instructor_notes: ''
        resources: null
      - id: 298969
        key: 4375cb37-a9d4-4716-bb89-f38da12ca225
        locale: en-us
        version: 1.0.0
        title: null
        semantic_type: ImageAtom
        updated_at: 'Wed Apr 19 2017 21:19:45 GMT+0000 (UTC)'
        is_public: true
        url: 'https://d17h27t6h515a5.cloudfront.net/topher/2017/April/58f7d354_ud456-l1-git-remote-no-remote/ud456-l1-git-remote-no-remote.png'
        width: 1972
        height: 1066
        caption: _The Terminal application running the `git remote` command. No output is displayed since this repository does not have a connection to a remote._
        resources: null
        instructor_notes: null
      - id: 298972
        key: 495c02c6-8d6a-49ab-9d4c-bfe551f70856
        locale: en-us
        version: 1.0.0
        title: null
        semantic_type: TextAtom
        updated_at: 'Wed Apr 19 2017 21:18:15 GMT+0000 (UTC)'
        is_public: true
        text: 'If you haven''t configured a remote repository then this command will display nothing. One caveat to this is if you have _cloned_ a repository. If you have, then your repository will automatically have a remote because it was cloned from the repository at the URL you provided. Let''s look at a repository that has been cloned.'
        instructor_notes: ''
        resources: null
      - id: 298977
        key: 04bedc2f-ef89-4195-8a90-39974347a9ca
        locale: en-us
        version: 1.0.0
        title: null
        semantic_type: ImageAtom
        updated_at: 'Wed Apr 19 2017 21:23:04 GMT+0000 (UTC)'
        is_public: true
        url: 'https://d17h27t6h515a5.cloudfront.net/topher/2017/April/58f7d44c_ud456-l1-git-remote-shortname/ud456-l1-git-remote-shortname.png'
        width: 2512
        height: 1066
        caption: _The Terminal application running the `git remote` command. It outputs the word `origin`._
        resources: null
        instructor_notes: null
      - id: 298976
        key: addb54ba-37bf-4e68-8cd7-695080c18172
        locale: en-us
        version: 1.0.0
        title: null
        semantic_type: TextAtom
        updated_at: 'Mon Apr 24 2017 18:25:16 GMT+0000 (UTC)'
        is_public: true
        text: 'The project I''m in is a clone of a Google''s project called [Lighthouse](https://github.com/GoogleChrome/lighthouse). This project was cloned from GitHub and is for auditing, performance metrics, and best practices for Progressive Web Apps.'
        instructor_notes: ''
        resources: null
      - id: 298982
        key: 2136905a-3b18-4677-8889-417cce5d724d
        locale: en-us
        version: 1.0.0
        title: null
        semantic_type: TextAtom
        updated_at: 'Wed Apr 19 2017 21:33:02 GMT+0000 (UTC)'
        is_public: true
        text: "### Remote Shortnames\n\nThe output of `git remote` is just the word `origin`. Well that's weird. The word \"origin\", here, is referred to as a \"shortname\". A shortname is just a short and easy way to refer to the location of the remote repository. A shortname is local to the _current_ repository (as in, your _local_ repository). The word \"origin\" is the defacto name that's used to refer to the main remote repository. It's possible to rename this to something else, but typically it's left as \"origin\".\n\nWhy do we care about how easy it is to refer to a  remote repositories location? Well as you'll soon find out we'll be needing the path to the remote repository in a lot of our commands. And it's a lot easier to use just a name rather than the entire path to the remote repository.\n\nFor example which one of these is easier to understand:\n* Head north for about a quarter of a mile, then turn left, go straight down that road for about 5 miles, then turn right, proceed straight for about 300 feet until you past the blue mailbox, turn left down Jack Street, go 50 feet then turn left again on Owen Road, that will curve around until you hit Finn Lane. The structure that's the third one on the left\n* Grandma's house\n\nYou can see that it's a lot easier to refer to a location by just a short name like Grandma's house rather than the entire way to get there from your current location \uD83D\uDE09\n\nIf you want to see the full path to the remote repository, then all you have to do is use the `-v` flag:"
        instructor_notes: ''
        resources: null
      - id: 298983
        key: 3b38f15b-6305-4fd6-8cf7-c5fc3b06d14e
        locale: en-us
        version: 1.0.0
        title: null
        semantic_type: ImageAtom
        updated_at: 'Wed Apr 19 2017 21:34:57 GMT+0000 (UTC)'
        is_public: true
        url: 'https://d17h27t6h515a5.cloudfront.net/topher/2017/April/58f7d42a_ud456-l1-git-remote-from-clone/ud456-l1-git-remote-from-clone.png'
        width: 2512
        height: 1066
        caption: |

          _The Terminal application running the `git remote` command. The output includes the shortname and the full URL that it refers to._
        resources: null
        instructor_notes: null
      - id: 298984
        key: e07e4e2e-55de-41b7-bfd1-d57557676be9
        locale: en-us
        version: 1.0.0
        title: null
        semantic_type: TextAtom
        updated_at: 'Mon Apr 24 2017 18:26:35 GMT+0000 (UTC)'
        is_public: true
        text: |-
          Here you can see that if the word `origin` is used,  what actually is used is the path to `https://github.com/GoogleChrome/lighthouse.git` . It also might seem a little bit odd that there are now _two_ remotes both of them "origin" and both going to the same URL. The only difference is right at the end: 
          the `(fetch)` part and the `(push)` part

          We'll be looking at both `fetch` and `push` in upcoming sections.

          We've done enough looking for now. Let's do something active and create our own simple project and send it to a remote repository! 
        instructor_notes: ''
        resources: null
      - id: 298986
        key: 12614ca3-c939-49ca-986d-cb055724423a
        locale: en-us
        version: 1.0.0
        title: null
        semantic_type: TextAtom
        updated_at: 'Wed Apr 19 2017 21:48:22 GMT+0000 (UTC)'
        is_public: true
        text: |-
          ## Create A Simple Project
          We're going to need a sample project to use during this course to test out working with remote repositories, sending updates to the remote repository, and getting changes from the remote repository, too.
        instructor_notes: ''
        resources: null
      - id: 298987
        key: 68ea1516-bf8c-49cd-a6b9-33a22b4facd1
        locale: en-us
        version: 1.0.0
        title: ''
        semantic_type: CheckboxQuizAtom
        updated_at: 'Wed Apr 19 2017 23:07:58 GMT+0000 (UTC)'
        is_public: true
        question:
          prompt: If you don't have a project that you want to use then you can follow along with me!
          correct_feedback: Awesome! Make sure to add and commit the following content to these files!
          video_feedback: null
          default_feedback: null
          answers:
            - id: a1492638392333
              text: create a new directory for your project with the name `my-travel-plans`
              is_correct: true
              incorrect_feedback: null
            - id: a1492638431615
              text: use `git init` to turn the `my-travel-plans` directory into a Git repository
              is_correct: true
              incorrect_feedback: null
            - id: a1492638437655
              text: create a `README.md` file
              is_correct: true
              incorrect_feedback: null
            - id: a1492638447432
              text: create `index.html`
              is_correct: true
              incorrect_feedback: null
            - id: a1492638452460
              text: create `app.css`
              is_correct: true
              incorrect_feedback: null
      - id: 298988
        key: ff72b822-5617-4e5a-bf27-7630bcff41e7
        locale: en-us
        version: 1.0.0
        title: null
        semantic_type: TextAtom
        updated_at: 'Wed Apr 19 2017 21:50:21 GMT+0000 (UTC)'
        is_public: true
        text: |-
          ### README File Content

          ```text
          # Travel Destinations

          A simple app to keep track of destinations I'd like to visit.
          ```
        instructor_notes: ''
        resources: null
      - id: 298989
        key: 81d74c62-54e7-4cb8-8198-9b4d83410b5b
        locale: en-us
        version: 1.0.0
        title: null
        semantic_type: TextAtom
        updated_at: 'Wed Apr 19 2017 21:51:37 GMT+0000 (UTC)'
        is_public: true
        text: |-
          ### HTML File Content

          Add the following content to the index.html file:

          ```html
          <!doctype html>
          <html lang="en">
          <head>
              <meta charset="utf-8">
              <title>Travels</title>
              <meta name="description" content="">
              <link rel="stylesheet" href="css/app.css">
          </head>
          <body>

              <div class="container">
                  <div class="destination-container">
                      <div class="destination" id="florida">
                          <h2>Florida</h2>
                      </div>

                      <div class="destination" id="paris">
                          <h2>Paris</h2>
                      </div>
                  </div>
              </div>

          </body>
          </html>
          ```
        instructor_notes: ''
        resources: null
      - id: 298990
        key: 4f44df16-7445-46cd-af85-000677595d15
        locale: en-us
        version: 1.0.0
        title: null
        semantic_type: TextAtom
        updated_at: 'Wed Apr 19 2017 21:52:46 GMT+0000 (UTC)'
        is_public: true
        text: |-
          ### CSS File Content
          Add the following information to the CSS file:

          ```css
          html {
              box-sizing: border-box;
              height: 100%;
          }

          *,
          *::before,
          *::after {
              box-sizing: inherit;
          }

          body {
              display: flex;
              margin: 0;
              height: 100%;
          }

          .container {
              margin: auto;
              padding: 1em;
              width: 80%;
          }

          .destination-container {
              display: flex;
              flex-flow: wrap;
              justify-content: center;
          }

          .destination {
              background: #03a9f4;
              box-shadow: 0 1px 9px 0 rgba(0, 0, 0, 0.4);
              color: white;
              margin: 0.5em;
              min-height: 200px;
              flex: 0 1 200px;
              display: flex;
              justify-content: center;
              align-items: center;
              text-align: center;
          }

          h2 {
              margin: 0;
              transform: rotate(-45deg);
              text-shadow: 0 0 5px #01579b;
          }

          #florida {
              background-color: #03a9f4;
          }

          #paris {
              background-color: #d32f2f;
          }
          ```
        instructor_notes: ''
        resources: null
      - id: 298991
        key: fa581d50-ecb9-49b4-b40c-730add0ebb52
        locale: en-us
        version: 1.0.0
        title: null
        semantic_type: TextAtom
        updated_at: 'Mon Apr 24 2017 18:27:08 GMT+0000 (UTC)'
        is_public: true
        text: At this point this is what my project looks like but remember your project can be anything you want you just need to make sure you have a project with some commits in it.
        instructor_notes: ''
        resources: null
      - id: 298992
        key: e42e2b37-82fd-48e7-8d27-be453634be60
        locale: en-us
        version: 1.0.0
        title: null
        semantic_type: ImageAtom
        updated_at: 'Mon Apr 24 2017 18:27:57 GMT+0000 (UTC)'
        is_public: true
        url: 'https://d17h27t6h515a5.cloudfront.net/topher/2017/April/58f7dce2_ud456-l1-my-travel-plans-project/ud456-l1-my-travel-plans-project.png'
        width: 1920
        height: 1444
        caption: _A simple web application that shows the destinations I want to go to (Florida and Paris) opened in the Chrome browser._
        resources: null
        instructor_notes: null
      - id: 298995
        key: 4f0b37b3-975e-4cb0-b398-823bb8c1e3fa
        locale: en-us
        version: 1.0.0
        title: ''
        semantic_type: CheckboxQuizAtom
        updated_at: 'Mon Apr 24 2017 18:29:02 GMT+0000 (UTC)'
        is_public: true
        question:
          prompt: 'Let''s make sure you''re all set to continue. Please check off each of the following:'
          correct_feedback: Fantastic! Now that we have a project to work with let's look at hosting it on GitHub.
          video_feedback: null
          default_feedback: null
          answers:
            - id: a1492638982361
              text: I have created a new directory for my project with the name `my-travel-plans`
              is_correct: true
              incorrect_feedback: null
            - id: a1492639054167
              text: I've turned the project into a Git repo
              is_correct: true
              incorrect_feedback: null
            - id: a1492639084428
              text: I've added at least one file to the project
              is_correct: true
              incorrect_feedback: null
            - id: a1492639094139
              text: 'I''ve commited the file with git commit (for example, `Initial commit`)'
              is_correct: true
              incorrect_feedback: null
      - id: 298996
        key: 53fc1c1e-3e8d-4d7e-b0bf-323071a1a0fc
        locale: en-us
        version: 1.0.0
        title: null
        semantic_type: TextAtom
        updated_at: 'Wed Apr 19 2017 22:03:59 GMT+0000 (UTC)'
        is_public: true
        text: |-
          ## Hosting on GitHub

          There are several options for us to host Git projects. But one of the most popular hosting sites is a service called [GitHub](https://github.com/) which you might have heard of before. Now the problem with GitHub is that the name is so similar to Git that people sometimes conflate Git and GitHub and think they're the same thing when they're actually quite different. 

          * Git is a version control tool
          * GitHub is a service to host Git projects

          If you are already familiar with GitHub and know how to create a repo _without_ initializing a README, you can skip this video and go ahead and make your repo with the same name as your sample project, and remember not to initialize a readme.

          If you don't have an account yet, sign up for one on [GitHub's join page](https://github.com/). There are different types of GitHub accounts you can sign up for but the free tier is all that we need for this course. And a free account is what most people use anyway. Once you create your account, sign in to GitHub and you'll be on the home page:
        instructor_notes: ''
        resources: null
      - id: 298999
        key: a21d47ae-038b-4849-89d0-64ef5816b2df
        locale: en-us
        version: 1.0.0
        title: null
        semantic_type: ImageAtom
        updated_at: 'Wed Apr 19 2017 22:07:09 GMT+0000 (UTC)'
        is_public: true
        url: 'https://d17h27t6h515a5.cloudfront.net/topher/2017/April/58f7df39_ud456-l1-github-homepage/ud456-l1-github-homepage.png'
        width: 2660
        height: 1742
        caption: _This is what my account shows right after signing in. Your information will be different depending on the number of repositories you have and other users and repositories you follow._
        resources: null
        instructor_notes: null
      - id: 299004
        key: 38e49bcc-5178-4712-b1db-10881aef7bdc
        locale: en-us
        version: 1.0.0
        title: null
        semantic_type: TextAtom
        updated_at: 'Wed Apr 19 2017 22:22:25 GMT+0000 (UTC)'
        is_public: true
        text: 'Just like every website, GitHub updates its interface quite often so if what you''re saying doesn''t look exactly like the image above don''t worry the important features will be the same. '
        instructor_notes: ''
        resources: null
      - id: 299005
        key: 1d55c1e7-e10a-43c7-bf58-a8d49d73cb3f
        locale: en-us
        version: 1.0.0
        title: null
        semantic_type: TextAtom
        updated_at: 'Wed Apr 19 2017 22:21:43 GMT+0000 (UTC)'
        is_public: true
        text: |-
          The important thing we need to look at right now is how to create a new Repository. There are actually two ways to do this from the homepage:

          1. from the navbar
          * the green "new repository" button part way down the page on the right side
        instructor_notes: ''
        resources: null
      - id: 299006
        key: ceb7306e-79cb-4b89-84dc-bb9a5f7e25d1
        locale: en-us
        version: 1.0.0
        title: null
        semantic_type: ImageAtom
        updated_at: 'Wed Apr 19 2017 22:24:34 GMT+0000 (UTC)'
        is_public: true
        url: 'https://d17h27t6h515a5.cloudfront.net/topher/2017/April/58f7e399_ud456-l1-github-homepage-new-repo-button/ud456-l1-github-homepage-new-repo-button.png'
        width: 2660
        height: 1742
        caption: _GitHub has two locations where you can create a new repository. The plus icon located in the page's header and the "New Repository" button in the middle of the page._
        resources: null
        instructor_notes: null
      - id: 299007
        key: 22b84e4f-94b8-4fc9-916b-594b675328f8
        locale: en-us
        version: 1.0.0
        title: null
        semantic_type: TextAtom
        updated_at: 'Wed Apr 19 2017 22:25:34 GMT+0000 (UTC)'
        is_public: true
        text: 'I use the button in the navigation bar because the navigation bar is available on every single page, which makes it easy to get to the new repo link.'
        instructor_notes: ''
        resources: null
      - id: 299008
        key: 8aea6078-0d4a-407d-8d02-b811f599b752
        locale: en-us
        version: 1.0.0
        title: null
        semantic_type: ImageAtom
        updated_at: 'Wed Apr 19 2017 22:26:59 GMT+0000 (UTC)'
        is_public: true
        url: 'https://d17h27t6h515a5.cloudfront.net/topher/2017/April/58f7e42a_ud456-l1-nav-bar-new-repo-link/ud456-l1-nav-bar-new-repo-link.png'
        width: 908
        height: 484
        caption: _Clicking on the plus icon in GitHub's header displays a dropdown of options. One option is the "New repository" link._
        resources: null
        instructor_notes: null
      - id: 299010
        key: 4854707b-1315-4bf1-a29d-b3d9ca6005f3
        locale: en-us
        version: 1.0.0
        title: null
        semantic_type: TextAtom
        updated_at: 'Wed Apr 19 2017 22:28:22 GMT+0000 (UTC)'
        is_public: true
        text: 'In the dropdown, the `New repository` link takes you to the repository creation page. We only need to fill out just one field in this form -  the repository name field.'
        instructor_notes: ''
        resources: null
      - id: 299012
        key: 01810fef-7294-473c-a732-5ad201ffa846
        locale: en-us
        version: 1.0.0
        title: null
        semantic_type: ImageAtom
        updated_at: 'Wed Apr 19 2017 22:30:30 GMT+0000 (UTC)'
        is_public: true
        url: 'https://d17h27t6h515a5.cloudfront.net/topher/2017/April/58f7e4b3_ud456-l1-github-create-repo-page/ud456-l1-github-create-repo-page.png'
        width: 2346
        height: 1854
        caption: _GitHub's Create a new repository page. The only required field is the `Repository name` field._
        resources: null
        instructor_notes: null
      - id: 299015
        key: 07c451d6-4a89-4970-8dcb-2c7db833d886
        locale: en-us
        version: 1.0.0
        title: null
        semantic_type: TextAtom
        updated_at: 'Wed Apr 19 2017 22:33:22 GMT+0000 (UTC)'
        is_public: true
        text: |-
          Typically you want to use the name of your project as the name of the repository. Creating a repository, modifying it later, or deleting it is relatively easy so don't feel like you have to get the name perfect right here on this page.  I'm going to create a repository called "my-travel-plans" that's the same name as the sample project I created.

          It's okay to leave the description empty for now (although, you can provide one if you want). Because I'm on the free tier plan, my repository has to be public (which means my repository and all my code will be freely available for anyone to look at). If I want this to be a private repository, then I'd choose "Private" which will cause GitHub to ask for my credit card information and will also upgrade me to a paid plan.

          I'm also going to leave the "Initialize this repository with the README" option _unchecked_ because I don't want GitHub to add a README file for me.
        instructor_notes: ''
        resources: null
      - id: 299020
        key: 852a550b-9db8-4c4d-9a0e-bcceef533366
        locale: en-us
        version: 1.0.0
        title: null
        semantic_type: TextAtom
        updated_at: 'Wed Apr 19 2017 22:35:13 GMT+0000 (UTC)'
        is_public: true
        text: |
          ### ⚠️  Don't Initialize with a README ⚠️
          Make sure that you leave the "Initialize this repository with the README" _unchecked_. We'll be providing our own README, so we don't want GitHub to provide one automatically.

          Also, if we let GitHub auto-generate a new README file for us, then we won't be provided with the setup commands to run in the terminal. It's still possible to get that information, but it will be hidden away.

          So just make sure to leave this field unchecked, and you'll be good to go!
        instructor_notes: ''
        resources: null
      - id: 299021
        key: be16c111-ff7e-4db6-9e19-b3f93472270d
        locale: en-us
        version: 1.0.0
        title: null
        semantic_type: TextAtom
        updated_at: 'Wed Apr 19 2017 22:36:28 GMT+0000 (UTC)'
        is_public: true
        text: Now just clicked that big "Create Repository" button to create your remote repository!
        instructor_notes: ''
        resources: null
      - id: 299693
        key: ba3ff4b1-6144-422e-92b7-121034171cad
        locale: en-us
        version: 1.0.0
        title: L1 - New Repo Git Commands On GitHub
        semantic_type: VideoAtom
        updated_at: 'Sat Jul 01 2017 16:18:42 GMT+0000 (UTC)'
        is_public: true
        tags: []
        instructor_notes: ''
        resources: null
        video:
          id: '53735'
          youtube_id: myuGLZLYpYY
          subtitles:
            - url: 'https://s3.amazonaws.com/video.udacity-data.com/topher/2017/April/58f6f25d_l1-new-repo-git-commands-on-github/subtitles/lang_en_vs1.srt'
              language_code: en
          transcodings:
            uri_480p_mp4: 'http://video.udacity-data.com.s3.amazonaws.com/topher/2017/April/58f6f25d_l1-new-repo-git-commands-on-github/l1-new-repo-git-commands-on-github_480p.mp4'
            uri_480p_1000kbps_mp4: 'http://video.udacity-data.com.s3.amazonaws.com/topher/2017/April/58f6f25d_l1-new-repo-git-commands-on-github/l1-new-repo-git-commands-on-github_480p_1000kbps.mp4'
            uri_480p_ogg: 'http://video.udacity-data.com.s3.amazonaws.com/topher/2017/April/58f6f25d_l1-new-repo-git-commands-on-github/l1-new-repo-git-commands-on-github_480p.ogg'
            uri_720p_mp4: 'http://video.udacity-data.com.s3.amazonaws.com/topher/2017/April/58f6f25d_l1-new-repo-git-commands-on-github/l1-new-repo-git-commands-on-github_720p.mp4'
            uri_hls: 'http://video.udacity-data.com.s3.amazonaws.com/topher/2017/April/58f6f25d_l1-new-repo-git-commands-on-github/hls/playlist.m3u8'
      - id: 299025
        key: 862d50f5-9004-4673-826c-3e3d9aede69e
        locale: en-us
        version: 1.0.0
        title: null
        semantic_type: TextAtom
        updated_at: 'Wed Apr 19 2017 22:38:34 GMT+0000 (UTC)'
        is_public: true
        text: |-
          Remember that the `git remote` command is used to create and manage remote repositories. So I'll use the following command to create a connection from my local repository to the remote repository I just created on my GitHub account:

          ```bash
          $ git remote add origin https://github.com/richardkalehoff/RichardsFantasticProject.git
          ```
        instructor_notes: ''
        resources: null
      - id: 299039
        key: 26f19eac-1a8f-4f03-b756-6184a0ab671a
        locale: en-us
        version: 1.0.0
        title: null
        semantic_type: TextAtom
        updated_at: 'Wed Apr 19 2017 23:04:55 GMT+0000 (UTC)'
        is_public: true
        text: |-
          ## ⚠️  Remotes & Permissions ⚠️ 

          Warning: It's important that you use the URL for the new repository that _you_ created on _your_ GitHub profile. Do _not_ use the one above because that's for the project I just created on _my_ account. Because this project is on _my_ account _you_ do not have access to send changes to it.

          So make sure you use the URL from your project. 
        instructor_notes: ''
        resources: null
      - id: 299045
        key: 351146c5-afdb-4d73-a028-cfc0993c7b61
        locale: en-us
        version: 1.0.0
        title: null
        semantic_type: TextAtom
        updated_at: 'Wed Apr 19 2017 23:22:58 GMT+0000 (UTC)'
        is_public: true
        text: |-
          The friends Kagure, Jack, Owen, and Finn each have their own `my-travel-plans` project at:


          * https://github.com/kagure/my-travel-plans.git
          * https://github.com/jack/my-travel-plans.git
          * https://github.com/owen/my-travel-plans.git
          * https://github.com/finn/my-travel-plans.git
        instructor_notes: ''
        resources: null
      - id: 299044
        key: a06b102d-6e9f-4265-b8d3-1cc7a951e86d
        locale: en-us
        version: 1.0.0
        title: ''
        semantic_type: RadioQuizAtom
        updated_at: 'Tue May 16 2017 21:50:35 GMT+0000 (UTC)'
        is_public: true
        question:
          prompt: |-
            Whose repository is being cloned in the following command?

            ```bash
            $ git clone https://github.com/owen/my-travel-plans.git
            ```
          correct_feedback: The URL contains the username of the account that the project is being cloned from. That username is the owner of the repository.
          video_feedback: null
          default_feedback: Take another look at the URL that's being cloned. Whose name appears in that URL?
          answers:
            - id: a1492644108682
              text: Kagure's
              is_correct: false
              incorrect_feedback: null
            - id: a1492644126645
              text: Jack's
              is_correct: false
              incorrect_feedback: null
            - id: a1492644127187
              text: Owen's
              is_correct: true
              incorrect_feedback: null
            - id: a1492644127951
              text: Finn's
              is_correct: false
              incorrect_feedback: null
      - id: 299040
        key: 1fe260e4-4d36-45e4-aa7c-b2623f256165
        locale: en-us
        version: 1.0.0
        title: ''
        semantic_type: RadioQuizAtom
        updated_at: 'Wed Apr 19 2017 23:14:16 GMT+0000 (UTC)'
        is_public: true
        question:
          prompt: |-
            Jonathan and Allison are working on a project together. Jonathan creates a project on GitHub at the URL `https://github.com/docsrus/brain-mapping.git` .

            If Allison runs `git clone https://github.com/docsrus/brain-mapping.git`, will she have permission to make changes to Jonathan's project on GitHub?
          correct_feedback: Allison will not be able to make changes to Jonathan's project on GitHub because she is not the owner of that remote repository.
          video_feedback: null
          default_feedback: null
          answers:
            - id: a1492643594333
              text: 'Yes'
              is_correct: false
              incorrect_feedback: null
            - id: a1492643598300
              text: 'No'
              is_correct: true
              incorrect_feedback: null
      - id: 299027
        key: db1302dd-930b-4c93-92c2-47b173e34948
        locale: en-us
        version: 1.0.0
        title: null
        semantic_type: TextAtom
        updated_at: 'Mon Apr 24 2017 18:31:06 GMT+0000 (UTC)'
        is_public: true
        text: |-
          There are a couple of things to notice about the command you just ran on the command line:
          1. first, this command has the sub command `add`
          * the word `origin` is used - this is setting the shortname that we discussed earlier
              - Remember that the word `origin` here isn't special in any way.
              - If you want to change this to `repo-on-GitHub`, then (before running the command) just change the word "origin" to "repo-on-GitHub": 

              `$ git remote add repo-on-GitHub https://github.com/richardkalehoff/RichardsFantasticProject.git`
          * third, the full path to the repository is added (i.e. the URL to the remote repository on the web)

          Now I'll use `git remote -v` to verify that I've added the remote repository correctly:
        instructor_notes: ''
        resources: null
      - id: 300041
        key: 096bdfea-b444-492e-9d0b-c13884fd0098
        locale: en-us
        version: 1.0.0
        title: null
        semantic_type: ImageAtom
        updated_at: 'Mon Apr 24 2017 18:39:56 GMT+0000 (UTC)'
        is_public: true
        url: 'https://d17h27t6h515a5.cloudfront.net/topher/2017/April/58fe4670_ud456-l1-git-remote-add-terminal/ud456-l1-git-remote-add-terminal.png'
        width: 2900
        height: 1266
        caption: _`git remote add` was used to create a shortname of `origin` that points to the project on GitHub. Running `git remote -v` displays both the shortname and the URL._
        resources: null
        instructor_notes: null
      - id: 299036
        key: 08a89f38-e38c-4851-abdf-bf2c6ea2d97c
        locale: en-us
        version: 1.0.0
        title: null
        semantic_type: TextAtom
        updated_at: 'Wed Apr 19 2017 22:46:18 GMT+0000 (UTC)'
        is_public: true
        text: 'Fantastic! Everything is looking good. I''ve added a link to my remote repository with the `git remote add` command, and then I verified that everything looks correct with `git remote -v`. '
        instructor_notes: ''
        resources: null
      - id: 299038
        key: b5a4f6a0-bb17-4e27-8195-d7a8a1f496a0
        locale: en-us
        version: 1.0.0
        title: ''
        semantic_type: CheckboxQuizAtom
        updated_at: 'Wed Apr 19 2017 22:53:28 GMT+0000 (UTC)'
        is_public: true
        question:
          prompt: 'Let''s make sure we''re on the same page. Make sure you can answer all of these:'
          correct_feedback: Fantastic work!
          video_feedback: null
          default_feedback: null
          answers:
            - id: a1492642338989
              text: I have created my remote repository on GitHub
              is_correct: true
              incorrect_feedback: null
            - id: a1492642376776
              text: I've used `git remote add` to create a connection from my local repository to the remote repository
              is_correct: true
              incorrect_feedback: null
            - id: a1492642377462
              text: I've used `git remote -v` to verify that the shortname is there with the correct URL
              is_correct: true
              incorrect_feedback: null
      - id: 299037
        key: 3fcd4c32-9eaf-4d59-95d2-df957ed9ae6c
        locale: en-us
        version: 1.0.0
        title: null
        semantic_type: TextAtom
        updated_at: 'Wed Apr 19 2017 22:52:14 GMT+0000 (UTC)'
        is_public: true
        text: |-
          ## Recap

          A remote repository is a repository that's just like the one you're using but it's just stored at a different location. To manage a remote repository, use the `git remote` command:

          ```bash
          $ git remote
          ```

          * It's possible to have links to multiple different remote repositories.
          * A shortname is the name that's used to refer to a remote repository's location. Typically the location is a URL, but it could be a file path on the same computer.
          * `git remote add` is used to add a connection to a new remote repository.
          * `git remote -v` is used to see the details about a connection to a remote.

          ### Further Research
          * [Working with Remotes](https://git-scm.com/book/en/v2/Git-Basics-Working-with-Remotes#_showing_your_remotes) from the Git book
          * [the `git remote` command](https://git-scm.com/docs/git-remote) from the Git docs
        instructor_notes: ''
        resources: null
  - id: 293444
    key: b7334b54-ec80-4754-95cd-345b78f526ae
    locale: en-us
    version: 1.0.0
    title: Push Changes To A Remote
    semantic_type: Concept
    updated_at: 'Mon Apr 24 2017 20:40:49 GMT+0000 (UTC)'
    is_public: true
    resources: null
    _atoms_ids:
      - 299694
      - 299050
      - 300043
      - 299053
      - 300048
      - 299058
      - 299062
      - 300049
      - 299070
      - 300080
      - 299074
      - 300082
      - 299079
      - 300089
      - 299084
      - 299085
    atoms:
      - id: 299694
        key: 98f232cb-2a45-4b35-8c18-56060a67b1ab
        locale: en-us
        version: 1.0.0
        title: L1 - Git Push In Theory
        semantic_type: VideoAtom
        updated_at: 'Sat Jul 01 2017 16:18:52 GMT+0000 (UTC)'
        is_public: true
        tags: []
        instructor_notes: ''
        resources: null
        video:
          id: '53732'
          youtube_id: 21TvMEtMRys
          subtitles:
            - url: 'https://s3.amazonaws.com/video.udacity-data.com/topher/2017/April/58f6f247_l1-git-push-in-theory/subtitles/lang_en_vs1.srt'
              language_code: en
          transcodings:
            uri_480p_mp4: 'http://video.udacity-data.com.s3.amazonaws.com/topher/2017/April/58f6f247_l1-git-push-in-theory/l1-git-push-in-theory_480p.mp4'
            uri_480p_1000kbps_mp4: 'http://video.udacity-data.com.s3.amazonaws.com/topher/2017/April/58f6f247_l1-git-push-in-theory/l1-git-push-in-theory_480p_1000kbps.mp4'
            uri_480p_ogg: 'http://video.udacity-data.com.s3.amazonaws.com/topher/2017/April/58f6f247_l1-git-push-in-theory/l1-git-push-in-theory_480p.ogg'
            uri_720p_mp4: 'http://video.udacity-data.com.s3.amazonaws.com/topher/2017/April/58f6f247_l1-git-push-in-theory/l1-git-push-in-theory_720p.mp4'
            uri_hls: 'http://video.udacity-data.com.s3.amazonaws.com/topher/2017/April/58f6f247_l1-git-push-in-theory/hls/playlist.m3u8'
      - id: 299050
        key: 2038390c-f73d-4a10-90d5-2c73a77cdab0
        locale: en-us
        version: 1.0.0
        title: null
        semantic_type: TextAtom
        updated_at: 'Wed Apr 19 2017 23:34:05 GMT+0000 (UTC)'
        is_public: true
        text: |-
          ## Reviewing Commits

          Let's take a look at the commits that I have in my Repository. 
        instructor_notes: ''
        resources: null
      - id: 300043
        key: 0038929e-bb61-4cf3-981b-eedec56d7aa6
        locale: en-us
        version: 1.0.0
        title: null
        semantic_type: ImageAtom
        updated_at: 'Mon Apr 24 2017 18:45:57 GMT+0000 (UTC)'
        is_public: true
        url: 'https://d17h27t6h515a5.cloudfront.net/topher/2017/April/58fe47d8_ud456-l1-project-commits/ud456-l1-project-commits.png'
        width: 1940
        height: 870
        caption: _The terminal application displaying the log of the project's commits._
        resources: null
        instructor_notes: null
      - id: 299053
        key: f2f047a7-29e4-49b7-bc9c-8c2f98c6ef90
        locale: en-us
        version: 1.0.0
        title: null
        semantic_type: TextAtom
        updated_at: 'Wed Apr 19 2017 23:39:42 GMT+0000 (UTC)'
        is_public: true
        text: |-
          I used the following log command to display these commits

          ```bash
          $ git log --oneline --graph --decorate --all
          ```

          These commits are only in the local repository, though. They haven't been sent up to the remote repository yet. When commits are sent to the remote a remote branch indicator will appear in the log. Since there aren't any remote branch indicators we can tell that there are no commits on the remote repository. But just to be 100% certain let's look at the remote repository on GitHub to see if there any commits.
        instructor_notes: ''
        resources: null
      - id: 300048
        key: 9b4e71d4-b3f6-4eb1-a750-41a8e73de753
        locale: en-us
        version: 1.0.0
        title: null
        semantic_type: ImageAtom
        updated_at: 'Mon Apr 24 2017 18:50:55 GMT+0000 (UTC)'
        is_public: true
        url: 'https://d17h27t6h515a5.cloudfront.net/topher/2017/April/58fe48af_ud456-l1-project-github-no-commits/ud456-l1-project-github-no-commits.png'
        width: 2436
        height: 1726
        caption: '_The remote repository doesn''t contain any commits, so GitHub displays the repository''s setup screen._'
        resources: null
        instructor_notes: null
      - id: 299058
        key: 4bfc06d8-3797-46da-972b-1b2e059e0a9c
        locale: en-us
        version: 1.0.0
        title: null
        semantic_type: TextAtom
        updated_at: 'Wed Apr 19 2017 23:41:03 GMT+0000 (UTC)'
        is_public: true
        text: Since we haven't sent any commits update to GitHub yet it's still showing us the setup screen to tell us how we can connect our local repository to the remote repository and send some commits. Since this is still the setup screen we can know that there are no commits in the remote repository.
        instructor_notes: ''
        resources: null
      - id: 299062
        key: fad0f2c1-748a-419b-8bae-b59f659ae7a6
        locale: en-us
        version: 1.0.0
        title: null
        semantic_type: TextAtom
        updated_at: 'Wed Apr 19 2017 23:43:01 GMT+0000 (UTC)'
        is_public: true
        text: |-
          ## Sending Commits
          To send local commits to a remote repository you need to use the `git push` command. You provide the remote short name and then you supply the name of the branch that contains the commits you want to push:

          ```bash
          $ git push <remote-shortname> <branch>
          ```

          My remote's shortname is `origin` and the commits that I want to push are on the `master` branch. So I'll use the following command to send my commits to the remote repository on GitHub:

          ```bash
          $ git push origin master
          ```
        instructor_notes: ''
        resources: null
      - id: 300049
        key: fec03045-74b1-439e-89b2-ad9656616136
        locale: en-us
        version: 1.0.0
        title: null
        semantic_type: ImageAtom
        updated_at: 'Mon Apr 24 2017 18:54:29 GMT+0000 (UTC)'
        is_public: true
        url: 'https://d17h27t6h515a5.cloudfront.net/topher/2017/April/58fe49db_ud456-l1-project-push-commits/ud456-l1-project-push-commits.png'
        width: 2292
        height: 1332
        caption: '_The terminal application showing the `git push` command. It asks for my username, password (which isn''t displayed), and then displays information about what it''s doing to send the commits._'
        resources: null
        instructor_notes: null
      - id: 299070
        key: ebfaf91b-c774-4989-9f9a-d275106442d4
        locale: en-us
        version: 1.0.0
        title: null
        semantic_type: TextAtom
        updated_at: 'Wed Apr 19 2017 23:50:12 GMT+0000 (UTC)'
        is_public: true
        text: |-
          There a couple of things to notice:
          * Depending on how you have configured GitHub and the remote URL that's being used, you might have to enter your username and password.
              - this will happen if you use the HTTP version of the remote (rather than the `ssh` version)
              - If you have configured GitHub to use the SSH protocol and have supplied it with your SSH key then you don't need to worry about doing this step. Check the [Connecting to GitHub with SSH documentation page](https://help.github.com/articles/connecting-to-github-with-ssh/) if you're interested in using SSH with GitHub.
          * If you have to enter your username and password your username will show up after typing but your password will not. So just keep typing your password and press enter when you're done.
              - If you encounter any errors with your password don't worry it'll just ask you to type it in again
          * Git does some compressing of things to make it smaller and then sends those off to the remote
          * A new branch is created - at the very bottom it says `[new branch]` and then `master  -> master`

          Now let's look at GitHub:
        instructor_notes: ''
        resources: null
      - id: 300080
        key: 4b6737b3-5a85-4658-bdff-35b78a7b8a26
        locale: en-us
        version: 1.0.0
        title: null
        semantic_type: ImageAtom
        updated_at: 'Mon Apr 24 2017 19:52:59 GMT+0000 (UTC)'
        is_public: true
        url: 'https://d17h27t6h515a5.cloudfront.net/topher/2017/April/58fe5790_ud456-l1-project-on-github/ud456-l1-project-on-github.png'
        width: 1174
        height: 1053
        caption: _My entire project is up on GitHub!_
        resources: null
        instructor_notes: null
      - id: 299074
        key: 890e4502-57ee-4538-8de5-275caa12f6b4
        locale: en-us
        version: 1.0.0
        title: null
        semantic_type: TextAtom
        updated_at: 'Mon Apr 24 2017 19:55:56 GMT+0000 (UTC)'
        is_public: true
        text: |
          Our project is up on GitHub - how awesome and easy was that! One cool feature that GitHub does is that it automatically shows the content of the README file which can be extremely helpful.

          GitHub also displays a lot of details about our Repository. Right now it's showing that there are:
          * three commits
          * one branch 
          * one contributor
        instructor_notes: ''
        resources: null
      - id: 300082
        key: 96d7758e-844c-459c-baa1-fb290b9adc4c
        locale: en-us
        version: 1.0.0
        title: null
        semantic_type: ImageAtom
        updated_at: 'Mon Apr 24 2017 19:56:35 GMT+0000 (UTC)'
        is_public: true
        url: 'https://d17h27t6h515a5.cloudfront.net/topher/2017/April/58fe585d_ud456-l1-project-on-github-focus/ud456-l1-project-on-github-focus.png'
        width: 1174
        height: 1053
        caption: _The project's main page on GitHub displays information about the repository._
        resources: null
        instructor_notes: null
      - id: 299079
        key: a2f6fe92-d267-471b-a9f1-768abf533b9f
        locale: en-us
        version: 1.0.0
        title: null
        semantic_type: TextAtom
        updated_at: 'Wed Apr 19 2017 23:56:51 GMT+0000 (UTC)'
        is_public: true
        text: |-
          Now before we move on, let's just check the local repository to see how it changed after pushing.

          Run the following command:

          ```bash
          $ git log --oneline --graph --decorate --all
          ```

          _Important: make sure to include the `--decorate` and `--all` flags_
        instructor_notes: ''
        resources: null
      - id: 300089
        key: 18c531d1-33a1-4ad4-82b1-23c156f74dac
        locale: en-us
        version: 1.0.0
        title: null
        semantic_type: ImageAtom
        updated_at: 'Mon Apr 24 2017 19:59:44 GMT+0000 (UTC)'
        is_public: true
        url: 'https://d17h27t6h515a5.cloudfront.net/topher/2017/April/58fe591c_ud456-l1-04-commit-count-local/ud456-l1-04-commit-count-local.png'
        width: 2226
        height: 870
        caption: _The terminal application showing the results of running `git log --oneline --graph --decorate --all`. The new `origin/master` tracking branch now exists._
        resources: null
        instructor_notes: null
      - id: 299084
        key: 7c1aca25-91d1-407a-8705-6bcd555e3830
        locale: en-us
        version: 1.0.0
        title: null
        semantic_type: TextAtom
        updated_at: 'Thu Apr 20 2017 00:05:56 GMT+0000 (UTC)'
        is_public: true
        text: |-
          We now have a new marker in the output! This marker is `origin/master` and is called a **tracking branch**. A tracking branch's name includes the shortname of the remote repository as well as the name of the branch. So the tracking branch `origin/master` is telling us that the remote `origin` has a `master` branch that points to commit `9b7d28f` (and includes all of the commits before `9b7d28f`). This is really helpful because this means we can track the information of the remote Repository right here in our local one!

          One _very important thing to know_ is that this `origin/master` tracking branch is not a live representation of where the branch exists on the remote repository. If a change is made to the remote repository not by us but by someone else,  the `origin/master` tracking branch in our local repository will not move. We have to tell it to go check for any updates and _then_ it will move. We'll look at how to do this in the next section.
        instructor_notes: ''
        resources: null
      - id: 299085
        key: 52901036-ad22-493b-816a-02a49a8f71dd
        locale: en-us
        version: 1.0.0
        title: null
        semantic_type: TextAtom
        updated_at: 'Mon Apr 24 2017 20:40:37 GMT+0000 (UTC)'
        is_public: true
        text: |-
          ## Recap

          The `git push` command is used to send commits from a local repository to a remote repository.

          ```bash
          $ git push origin master
          ```

          The `git push` command takes:

          * the shortname of the remote repository you want to send commits to
          * the name of the branch that has the commits you want to send
        instructor_notes: ''
        resources: null
  - id: 293451
    key: 22364196-91e4-4da4-837b-0e71a8143350
    locale: en-us
    version: 1.0.0
    title: Pulling Changes From A Remote
    semantic_type: Concept
    updated_at: 'Mon Apr 24 2017 20:56:19 GMT+0000 (UTC)'
    is_public: true
    resources: null
    _atoms_ids:
      - 299151
      - 299695
      - 299154
      - 299155
      - 299696
      - 299157
      - 299158
      - 300122
      - 299163
      - 300124
      - 299165
      - 300125
      - 299166
      - 299170
    atoms:
      - id: 299151
        key: 23163032-d028-43b0-abbc-08eb04789544
        locale: en-us
        version: 1.0.0
        title: null
        semantic_type: TextAtom
        updated_at: 'Thu Apr 20 2017 17:54:09 GMT+0000 (UTC)'
        is_public: true
        text: |-
          ## Pull changes from a remote

          Let’s say that we are in a situation where there are commits on the _remote_ repository that we do not have in our _local_ repository. This can happen in several ways: You could be working on a team, and a co-worker has pushed new changes to the remote. Alternatively, you could be working on the same project but from different computers -- for example, say you have a work computer and a personal computer, and you contribute to the repo from both of them. If you push changes to the repo from your work computer, the local repo on your personal computer will not reflect those changes. How do we sync new changes that are on the remote into the local repository? That's exactly where we're going to be looking at now. Let's first look at how pulling in remote changes works in theory, then we'll actually do it ourselves!
        instructor_notes: ''
        resources: null
      - id: 299695
        key: af1856a4-9a9c-4d37-b7df-438fd2c6ba2c
        locale: en-us
        version: 1.0.0
        title: L1 - Git Pull In Theory
        semantic_type: VideoAtom
        updated_at: 'Sat Jul 01 2017 16:18:43 GMT+0000 (UTC)'
        is_public: true
        tags: []
        instructor_notes: ''
        resources: null
        video:
          id: '53730'
          youtube_id: MjNU2LTDVAA
          subtitles:
            - url: 'https://s3.amazonaws.com/video.udacity-data.com/topher/2017/April/58f6f246_l1-git-pull-in-theory/subtitles/lang_en_vs1.srt'
              language_code: en
          transcodings:
            uri_480p_mp4: 'http://video.udacity-data.com.s3.amazonaws.com/topher/2017/April/58f6f246_l1-git-pull-in-theory/l1-git-pull-in-theory_480p.mp4'
            uri_480p_1000kbps_mp4: 'http://video.udacity-data.com.s3.amazonaws.com/topher/2017/April/58f6f246_l1-git-pull-in-theory/l1-git-pull-in-theory_480p_1000kbps.mp4'
            uri_480p_ogg: 'http://video.udacity-data.com.s3.amazonaws.com/topher/2017/April/58f6f246_l1-git-pull-in-theory/l1-git-pull-in-theory_480p.ogg'
            uri_720p_mp4: 'http://video.udacity-data.com.s3.amazonaws.com/topher/2017/April/58f6f246_l1-git-pull-in-theory/l1-git-pull-in-theory_720p.mp4'
            uri_hls: 'http://video.udacity-data.com.s3.amazonaws.com/topher/2017/April/58f6f246_l1-git-pull-in-theory/hls/playlist.m3u8'
      - id: 299154
        key: 8c5dccfe-5570-4cc9-838b-10fd24e264a1
        locale: en-us
        version: 1.0.0
        title: null
        semantic_type: TextAtom
        updated_at: 'Thu Apr 20 2017 17:57:32 GMT+0000 (UTC)'
        is_public: true
        text: 'I said it before but I''ll say it again, the branch that appears in the _local_ repository is actually tracking a branch in the _remote_ repository (e.g. `origin/master` in the local repository is called a **tracking branch** because it''s tracking the progress of the `master` branch on the remote repository that has the shortname "origin").'
        instructor_notes: ''
        resources: null
      - id: 299155
        key: a87789f9-430c-4277-8d23-95a85075629b
        locale: en-us
        version: 1.0.0
        title: null
        semantic_type: TextAtom
        updated_at: 'Thu Apr 20 2017 17:59:47 GMT+0000 (UTC)'
        is_public: true
        text: |-
          ## Add remote changes

          Since we don't have any commits on our remote repository yet and we're not collaborating with anybody we're going to fake it and add some commits manually through GitHub's interface on the web. 

          A walk-through video is below. Use the code snippets to follow along in the video.

          ### New CSS Content

          Add the following new ruleset:

          ```css
          .destination:hover h2 {
              transform: rotate(0deg);
          }
          ```

          Add `transition: transform 0.5s;` to the `h2` ruleset, so it should now be:

          ```css
          h2 {
              margin: 0;
              transform: rotate(-45deg);
              transition: transform 0.5s;
              text-shadow: 0 0 5px #01579b;
          }
          ```
        instructor_notes: ''
        resources: null
      - id: 299696
        key: a351f4ce-f2ce-4b35-a8a8-d0a5219a0ea0
        locale: en-us
        version: 1.0.0
        title: L1 - Adding A Commit On GitHub
        semantic_type: VideoAtom
        updated_at: 'Sat Jul 01 2017 16:18:52 GMT+0000 (UTC)'
        is_public: true
        tags: []
        instructor_notes: ''
        resources: null
        video:
          id: '53727'
          youtube_id: UBYxcTg6VLU
          subtitles:
            - url: 'https://s3.amazonaws.com/video.udacity-data.com/topher/2017/April/58f6f244_l1-adding-a-commit-on-github/subtitles/lang_en_vs1.srt'
              language_code: en
          transcodings:
            uri_480p_mp4: 'http://video.udacity-data.com.s3.amazonaws.com/topher/2017/April/58f6f244_l1-adding-a-commit-on-github/l1-adding-a-commit-on-github_480p.mp4'
            uri_480p_1000kbps_mp4: 'http://video.udacity-data.com.s3.amazonaws.com/topher/2017/April/58f6f244_l1-adding-a-commit-on-github/l1-adding-a-commit-on-github_480p_1000kbps.mp4'
            uri_480p_ogg: 'http://video.udacity-data.com.s3.amazonaws.com/topher/2017/April/58f6f244_l1-adding-a-commit-on-github/l1-adding-a-commit-on-github_480p.ogg'
            uri_720p_mp4: 'http://video.udacity-data.com.s3.amazonaws.com/topher/2017/April/58f6f244_l1-adding-a-commit-on-github/l1-adding-a-commit-on-github_720p.mp4'
            uri_hls: 'http://video.udacity-data.com.s3.amazonaws.com/topher/2017/April/58f6f244_l1-adding-a-commit-on-github/hls/playlist.m3u8'
      - id: 299157
        key: 0ca81174-d0ba-457e-ae2d-cbe1d9b5aa36
        locale: en-us
        version: 1.0.0
        title: null
        semantic_type: TextAtom
        updated_at: 'Thu Apr 20 2017 18:06:39 GMT+0000 (UTC)'
        is_public: true
        text: |-
          > ## ⚠️  Prefer Working Locally ⚠️ 

          > Because GitHub has a web interface, it allows you to add commits manually through its interface. But just because you _can_ do thing, doesn't mean you _should_. I've demoed making these changes this way so that we could simulate commits being on the remote repository but not in the local repository. But I recommend that you should always work locally on a project and then push those changes to the remote repository. 
        instructor_notes: ''
        resources: null
      - id: 299158
        key: a3ee791c-6bac-4964-9494-9e0645dfb173
        locale: en-us
        version: 1.0.0
        title: null
        semantic_type: TextAtom
        updated_at: 'Mon Apr 24 2017 20:49:36 GMT+0000 (UTC)'
        is_public: true
        text: |-
          ## Retrieve remote commits

          Now let's compare our local repository and our remote repository. We only have _three_ commits in our local repository:
        instructor_notes: ''
        resources: null
      - id: 300122
        key: 8438cbdc-49fa-43b6-8ccf-430c6b537cee
        locale: en-us
        version: 1.0.0
        title: null
        semantic_type: ImageAtom
        updated_at: 'Mon Apr 24 2017 20:50:58 GMT+0000 (UTC)'
        is_public: true
        url: 'https://d17h27t6h515a5.cloudfront.net/topher/2017/April/58fe591c_ud456-l1-04-commit-count-local/ud456-l1-04-commit-count-local.png'
        width: 2226
        height: 870
        caption: _Our local repository only has three commits in it._
        resources: null
        instructor_notes: null
      - id: 299163
        key: 7522865d-3a62-4223-8a74-2264ee1f5e55
        locale: en-us
        version: 1.0.0
        title: null
        semantic_type: TextAtom
        updated_at: 'Mon Apr 24 2017 20:51:33 GMT+0000 (UTC)'
        is_public: true
        text: 'While there are actually _four_ commits in the remote repository:'
        instructor_notes: ''
        resources: null
      - id: 300124
        key: 712c2845-d486-43df-ba06-6851c50146a5
        locale: en-us
        version: 1.0.0
        title: null
        semantic_type: ImageAtom
        updated_at: 'Mon Apr 24 2017 20:53:52 GMT+0000 (UTC)'
        is_public: true
        url: 'https://d17h27t6h515a5.cloudfront.net/topher/2017/April/58fe65d8_ud456-l1-04-commit-count-remote/ud456-l1-04-commit-count-remote.png'
        width: 2386
        height: 1740
        caption: _The remote repository on GitHub has four commits. The three from our local repository and the one we manually added on GitHub._
        resources: null
        instructor_notes: null
      - id: 299165
        key: c8fe5d73-7dc7-4de5-aede-ad98bba73ccd
        locale: en-us
        version: 1.0.0
        title: null
        semantic_type: TextAtom
        updated_at: 'Thu Apr 20 2017 18:22:29 GMT+0000 (UTC)'
        is_public: true
        text: |-
          ## Pulling Changes with `git pull`

          The local commits end at commit `5a010d1` while the remote has two extra commits - commit `4b81b2a` and commit ` b847434`.

          Also, notice that in our _local_ repository when we did the `git log` the `origin/master` branch is still pointing to commit `5a010d1`.

          Remember that the `origin/master` branch is not a live mapping of where the remote's master branch is located. If the remote's `master` moves, the local `origin/master` branch does stays the same. To update this branch, we need to sync the two together. 

          `git push` will sync the _remote_ repository with the _local_ repository. To do with the opposite (to sync the _local_ with the _remote_), we need to use `git pull`. The format for `git pull` is very similar to `git push` -  you provided the shortname for the remote repository and then the name of the branch you want to pull in the commits.

          ```bash
          $ git pull origin master
          ```
        instructor_notes: ''
        resources: null
      - id: 300125
        key: 0b3fc747-6602-4b7e-a681-51a7d9da1430
        locale: en-us
        version: 1.0.0
        title: null
        semantic_type: ImageAtom
        updated_at: 'Mon Apr 24 2017 20:56:06 GMT+0000 (UTC)'
        is_public: true
        url: 'https://d17h27t6h515a5.cloudfront.net/topher/2017/April/58fe665e_ud456-l1-04-git-pull/ud456-l1-04-git-pull.png'
        width: 2226
        height: 1464
        caption: _Running `git pull origin master` will retrieve the commits from the `master` branch on the `origin` remote repository._
        resources: null
        instructor_notes: null
      - id: 299166
        key: 8831abeb-6d2c-4d05-9fcb-935be21dab53
        locale: en-us
        version: 1.0.0
        title: null
        semantic_type: TextAtom
        updated_at: 'Thu Apr 20 2017 18:21:53 GMT+0000 (UTC)'
        is_public: true
        text: |-
          There's several things to note about running this command:

          * the format is very similar to that of `git push` - there's counting and compressing and packing of items
          * it has the phrase "fast-forward" which means Git did a fast-forward merge (we'll dig into this in just a second)
           * it displays information similar to `git log --stat` where it shows the files that have been changed and how many lines were added or removed in them

          If you don't want to automatically merge the local branch with the tracking branch then you wouldn't use `git pull` you would use a different command called `git fetch`. You might want to do this if there are commits on the repository that you don't have _but_ there are also commits on the local repository that the remote one doesn't have either.

          Let's take a look at `git fetch`.
        instructor_notes: ''
        resources: null
      - id: 299170
        key: bf6f5a77-4d08-4819-bffb-81382a74a705
        locale: en-us
        version: 1.0.0
        title: null
        semantic_type: TextAtom
        updated_at: 'Thu Apr 20 2017 18:38:00 GMT+0000 (UTC)'
        is_public: true
        text: |-
          ## Recap

          If there are changes in a remote repository that you'd like to include in your local repository, then you want to _pull_ in those changes. To do that with Git, you'd use the `git pull` command. You tell Git the shortname of the remote you want to get the changes from and then the branch that has the changes you want:

          ```bash
          $ git pull origin master
          ```

          When `git pull` is run, the following things happen:
          * the commit(s) on the remote branch are copied to the local repository
          * the local tracking branch (`origin/master`) is moved to point to the most recent commit
          * the local tracking branch (`origin/master`) is merged into the local branch (`master`)

          Also, changes can be manually added on GitHub (but this is not recommended, so don't do it). 
        instructor_notes: ''
        resources: null
  - id: 293452
    key: daa45fbf-fccd-4648-b368-14e7a3de8bd1
    locale: en-us
    version: 1.0.0
    title: Pull vs Fetch
    semantic_type: Concept
    updated_at: 'Mon Apr 24 2017 20:56:31 GMT+0000 (UTC)'
    is_public: true
    resources: null
    _atoms_ids:
      - 299697
      - 299175
      - 299698
      - 299178
    atoms:
      - id: 299697
        key: e2d09bc4-9d91-4ee9-9034-f9ef474267ee
        locale: en-us
        version: 1.0.0
        title: Pull Vs Fetch
        semantic_type: VideoAtom
        updated_at: 'Sat Jul 01 2017 16:20:03 GMT+0000 (UTC)'
        is_public: true
        tags: []
        instructor_notes: ''
        resources: null
        video:
          id: '53731'
          youtube_id: kxXdk2HcOBo
          subtitles:
            - url: 'https://s3.amazonaws.com/video.udacity-data.com/topher/2017/April/58f6f247_l1-git-pull-vs-git-fetch/subtitles/lang_en_vs1.srt'
              language_code: en
          transcodings:
            uri_480p_mp4: 'http://video.udacity-data.com.s3.amazonaws.com/topher/2017/April/58f6f247_l1-git-pull-vs-git-fetch/l1-git-pull-vs-git-fetch_480p.mp4'
            uri_480p_1000kbps_mp4: 'http://video.udacity-data.com.s3.amazonaws.com/topher/2017/April/58f6f247_l1-git-pull-vs-git-fetch/l1-git-pull-vs-git-fetch_480p_1000kbps.mp4'
            uri_480p_ogg: 'http://video.udacity-data.com.s3.amazonaws.com/topher/2017/April/58f6f247_l1-git-pull-vs-git-fetch/l1-git-pull-vs-git-fetch_480p.ogg'
            uri_720p_mp4: 'http://video.udacity-data.com.s3.amazonaws.com/topher/2017/April/58f6f247_l1-git-pull-vs-git-fetch/l1-git-pull-vs-git-fetch_720p.mp4'
            uri_hls: 'http://video.udacity-data.com.s3.amazonaws.com/topher/2017/April/58f6f247_l1-git-pull-vs-git-fetch/hls/playlist.m3u8'
      - id: 299175
        key: f6bd1549-45b2-49f2-89a7-0062cc045d2a
        locale: en-us
        version: 1.0.0
        title: null
        semantic_type: TextAtom
        updated_at: 'Thu Apr 20 2017 18:32:49 GMT+0000 (UTC)'
        is_public: true
        text: |-
          Git fetch is used to retrieve commits from a remote repository's branch but it _does not_ automatically merge the local branch with the remote tracking branch after those commits have been received.

          The above paragraph is a little dense so why don't you reread it one more time. 

          You provide the exact same information to `git fetch` as you do for `git pull`. So you provide the shortname of the remote repository you want to fetch from and then the branch you want to fetch:

          ```bash
          $ git fetch origin master
          ```

          When `git fetch` is run, the following things happen:
          * the commit(s) on the remote branch are copied to the local repository
          * the local tracking branch (e.g. `origin/master`) is moved to point to the most recent commit

          The important thing to note is that the local branch does not change at all.

          You can think of `git fetch` as half of a `git pull`. The other half of `git pull` is the merging aspect.

          One main point when you want to use `git fetch` rather than `git pull` is if your remote branch and your local branch both have changes that neither of the other ones has.  In this case, you want to fetch the remote changes to get them in your local branch and then perform a merge manually. Then you can push that new merge commit back to the remote. 

          Let's take a look at that.
        instructor_notes: ''
        resources: null
      - id: 299698
        key: edb855cd-f18f-4704-9d1e-48b42179a38d
        locale: en-us
        version: 1.0.0
        title: L1 - Fetch Merge And Push
        semantic_type: VideoAtom
        updated_at: 'Sat Jul 01 2017 16:21:02 GMT+0000 (UTC)'
        is_public: true
        tags: []
        instructor_notes: ''
        resources: null
        video:
          id: '53728'
          youtube_id: jwyQUfE1Eqw
          subtitles:
            - url: 'https://s3.amazonaws.com/video.udacity-data.com/topher/2017/April/58f6f244_l1-fetch-merge-and-push/subtitles/lang_en_vs1.srt'
              language_code: en
          transcodings:
            uri_480p_mp4: 'http://video.udacity-data.com.s3.amazonaws.com/topher/2017/April/58f6f244_l1-fetch-merge-and-push/l1-fetch-merge-and-push_480p.mp4'
            uri_480p_1000kbps_mp4: 'http://video.udacity-data.com.s3.amazonaws.com/topher/2017/April/58f6f244_l1-fetch-merge-and-push/l1-fetch-merge-and-push_480p_1000kbps.mp4'
            uri_480p_ogg: 'http://video.udacity-data.com.s3.amazonaws.com/topher/2017/April/58f6f244_l1-fetch-merge-and-push/l1-fetch-merge-and-push_480p.ogg'
            uri_720p_mp4: 'http://video.udacity-data.com.s3.amazonaws.com/topher/2017/April/58f6f244_l1-fetch-merge-and-push/l1-fetch-merge-and-push_720p.mp4'
            uri_hls: 'http://video.udacity-data.com.s3.amazonaws.com/topher/2017/April/58f6f244_l1-fetch-merge-and-push/hls/playlist.m3u8'
      - id: 299178
        key: d2408893-539f-45ca-9fbd-d9ec454c3113
        locale: en-us
        version: 1.0.0
        title: null
        semantic_type: TextAtom
        updated_at: 'Thu Apr 20 2017 18:39:19 GMT+0000 (UTC)'
        is_public: true
        text: |-
          ## Recap

          You can think of the `git pull` command as doing two things:

          1. fetching remote changes (which adds the commits to the local repository and moves the tracking branch to point to them)
          * merging the local branch with the tracking branch

          The ` git fetch` command is just the first step. It just retrieves the commits and moves the tracking branch. It _does not_ merge the local branch with the tracking branch. The same information provided to `git pull` is passed to `git fetch`:

          * the shorname of the remote repository
          * the branch with commits to retrieve

          ```bash
          $ git fetch origin master
          ```
        instructor_notes: ''
        resources: null
  - id: 293453
    key: 702f499e-44bc-4208-8b3e-f05db54629c3
    locale: en-us
    version: 1.0.0
    title: Lesson Wrap Up
    semantic_type: Concept
    updated_at: 'Sun Apr 23 2017 23:07:40 GMT+0000 (UTC)'
    is_public: true
    resources: null
    _atoms_ids:
      - 299699
    atoms:
      - id: 299699
        key: e1d5f2b4-303f-4c3f-bce3-03f8983a6f5d
        locale: en-us
        version: 1.0.0
        title: Lesson Wrap Up
        semantic_type: VideoAtom
        updated_at: 'Sat Jul 01 2017 16:19:01 GMT+0000 (UTC)'
        is_public: true
        tags: []
        instructor_notes: ''
        resources: null
        video:
          id: '53734'
          youtube_id: 6Koa4nAu-04
          subtitles:
            - url: 'https://s3.amazonaws.com/video.udacity-data.com/topher/2017/April/58f6f259_l1-lesson-1-outro/subtitles/lang_en_vs1.srt'
              language_code: en
          transcodings:
            uri_480p_mp4: 'http://video.udacity-data.com.s3.amazonaws.com/topher/2017/April/58f6f259_l1-lesson-1-outro/l1-lesson-1-outro_480p.mp4'
            uri_480p_1000kbps_mp4: 'http://video.udacity-data.com.s3.amazonaws.com/topher/2017/April/58f6f259_l1-lesson-1-outro/l1-lesson-1-outro_480p_1000kbps.mp4'
            uri_480p_ogg: 'http://video.udacity-data.com.s3.amazonaws.com/topher/2017/April/58f6f259_l1-lesson-1-outro/l1-lesson-1-outro_480p.ogg'
            uri_720p_mp4: 'http://video.udacity-data.com.s3.amazonaws.com/topher/2017/April/58f6f259_l1-lesson-1-outro/l1-lesson-1-outro_720p.mp4'
            uri_hls: 'http://video.udacity-data.com.s3.amazonaws.com/topher/2017/April/58f6f259_l1-lesson-1-outro/hls/playlist.m3u8'
